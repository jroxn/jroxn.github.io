<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试页面</title>
      <link href="/posts/312f.html"/>
      <url>/posts/312f.html</url>
      
        <content type="html"><![CDATA[<p>这篇文章的标签是：<code>测试页</code>、<code>Markdown</code></p><p>这篇文章的分类是：<code>Markdown</code></p><p>这是一张图片：<br><img src="/medias/drawing-bed/images/0.jpg" alt="Hello Kitty?" title="😸😺😹😻😼😽🙀😿😾"><br>标题是：<strong>Hello Kitty?</strong></p><p>图片上注释为：”😸😺😹😻😼😽🙀😿😾”</p><p>这是几段代码高亮测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># shell 代码高亮测试</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello World !"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token comment"># python 代码高亮测试</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">while</span> b <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// java 代码高亮测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><code>---</code>分割线上线空行即可</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html" title="超链接title">md小技巧</a></p><p><code>[md小技巧](https://www.runoob.com/markdown/md-tutorial.html &quot;超链接title&quot;)</code>设置超链接文本，<code>&quot;超链接title&quot;</code>可以不加</p><p>&emsp;&emsp;缩进、空白格</p><p><code>&amp;emsp;&amp;emsp;</code>空白格，用于中文段落首行缩进</p><p>换行使用行尾<code>两个空格</code>或者<code>空行</code>，均可以表示换行。有<code>图片链接</code>、<code>标题</code>、<code>表格</code>、<code>代码块</code>的上下行可以省略空格或空行，会自动换行。</p><hr><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题### 三级标题#### 四级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p><em>斜体文本</em> &emsp;&emsp; <strong>粗体文本</strong> &emsp;&emsp; <del>删除线</del> &emsp;&emsp; __init__ &emsp;&emsp; 显示本体 不转义</p><p><code>*斜体文本* &amp;emsp;&amp;emsp; **粗体文本** &amp;emsp;&amp;emsp; ~~删除线~~ &amp;emsp;&amp;emsp; \_\_init__ &amp;emsp;&amp;emsp; </code>显示本体 不转义</p><blockquote><p>这是引用的内容 — 一级</p><blockquote><p>这是引用的内容 — 二级</p></blockquote></blockquote><pre class="line-numbers language-none"><code class="language-none">&gt;这是引用的内容 --- 一级&gt;&gt;这是引用的内容 --- 二级*注意这里没有空行*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下载地址书写：<a href="https://gitee.com/roxnc/download/raw/master/%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95.zip" title="类和方法.zip">download</a></p><p><code>下载地址书写：[download](https://gitee.com/roxnc/download/raw/master/类和方法.zip &quot;类和方法.zip&quot;)</code></p><hr><ul><li><input checked="" disabled="" type="checkbox"> Markdown  </li><li><input disabled="" type="checkbox"> JavaScript </li></ul><ul><li><input checked="" disabled="" type="checkbox"> Markdown</li><li><input disabled="" type="checkbox"> JavaScript</li></ul><ul><li><input checked="" disabled="" type="checkbox"> Markdown</li><li><input disabled="" type="checkbox"> JavaScript<pre class="line-numbers language-none"><code class="language-none">复选框三种写法：* [x] Markdown  * [ ] JavaScriptor+ [x] Markdown  + [ ] JavaScriptor- [x] Markdown  - [ ] JavaScript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>无序列表用 - + * 任何一种都可以<br>注意: - + * 跟内容之间都要有一个空格   <pre class="line-numbers language-none"><code class="language-none">- 列表内容- 列表内容- 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>列表内容</li><li>列表内容</li><li>列表内容</li></ul><hr><p>有序列表<br>注意: 序号跟内容之间要有空格   </p><pre class="line-numbers language-none"><code class="language-none">1. 列表内容  2. 列表内容  3. 列表内容  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>列表内容  </li><li>列表内容  </li><li>列表内容<br>列表嵌套<br>上一级和下一级之间敲三个空格即可   <pre class="line-numbers language-none"><code class="language-none">1. 列表1  2. 列表2     * 嵌套1  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>列表1  </li><li>列表2  <ul><li>嵌套1  </li></ul></li></ol><hr><p>表格对齐方式</p><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br>实例如下：  </p><table><thead><tr><th align="left">左</th><th align="center">居中</th><th align="right">右</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>font <span class="token assign-left variable">face</span><span class="token operator">=</span><span class="token string">"黑体"</span><span class="token operator">></span>我是黑体字<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font <span class="token assign-left variable">face</span><span class="token operator">=</span><span class="token string">"微软雅黑"</span><span class="token operator">></span>我是微软雅黑<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font <span class="token assign-left variable">face</span><span class="token operator">=</span><span class="token string">"STCAIYUN"</span><span class="token operator">></span>我是华文彩云<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span>red<span class="token operator">></span>我是红色<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token comment">#008000>我是绿色&lt;/font></span><span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span>Blue<span class="token operator">></span>我是蓝色<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token operator"><span class="token file-descriptor important">5</span>></span>我是尺寸<span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>font <span class="token assign-left variable">face</span><span class="token operator">=</span><span class="token string">"黑体"</span> <span class="token assign-left variable">color</span><span class="token operator">=</span>green <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token operator"><span class="token file-descriptor important">5</span>></span>我是黑体, 绿色, 尺寸为<span class="token operator"><span class="token file-descriptor important">5</span>&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span>居中<span class="token operator">&lt;</span>/center<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="黑体">我是黑体字</font></p><p><font face="微软雅黑">我是微软雅黑</font></p><p><font face="STCAIYUN">我是华文彩云</font></p><p><font color=red>我是红色</font></p><p><font color=#008000>我是绿色</font></p><p><font color=Blue>我是蓝色</font></p><p><font size=5>我是尺寸</font></p><center>居中</center><p><font face="黑体" color=green size=5>我是黑体, 绿色, 尺寸为5</font></p><hr><p>参考<a href="https://blog.csdn.net/heimu24/article/details/81189700">链接</a></p><p>脚注是对文本的补充说明。<br>[^要注明的文本]<br>创建脚注格式类似这样 [^RUNOOB]。<br>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术, 更是梦想！！！  </p><p>TODO 待完成<br>FIXME 代码需要修正和原因说明<br>XXX 虽然实现功能，但是代码需要改进和说明<br>HACK 补锅踩雷填坑<br>BUG 丢锅埋雷挖坑  </p><p><code>Ctrl+G</code>快速去某一行</p><h2 id="Have-a-nice-day"><a href="#Have-a-nice-day" class="headerlink" title="Have a nice day "></a><font size=5><strong>Have a nice day</strong> </font></h2>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 测试页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用手册</title>
      <link href="/posts/c412.html"/>
      <url>/posts/c412.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>安装前提：先安装<code>nodejs</code>和<code>git</code>，<code>win10</code>和<code>Linux</code>安装建议使用安装包，安装到默认位置即可，省的配置环境变量。</p><p><a href="https://nodejs.org/zh-cn/">Node.js</a></p><p><a href="http://git-scm.com/">Git</a></p><p>进入你的<code>hexo</code>目录，建议使用<code>vscode</code>或者<code>typora</code>打开目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i hexo hexo-clihexo initnpm i# 新建完成后，指定文件夹的目录如下：.├── node_modules├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在win10系统，如果使用<code>hexo s</code>报错，配置win10的环境变量：</p><p>打开<code>设置</code>，搜索<code>高级系统设置</code>，找到<code>环境变量</code>，在<code>用户变量</code>和<code>系统变量</code>里面找到<code>Path</code>，分别点击<code>编辑</code><br><img src="/medias/drawing-bed/images/0.png"><br>新建一行，这一行是你的<code>hexo目录</code>下面的<code>node_modules</code>下的<code>.bin</code>目录<br><img src="/medias/drawing-bed/images/1.png"><br>直接在<code>文件资源管理器</code>打开<code>.bin</code>目录，复制地址栏的地址即可。<br><img src="/medias/drawing-bed/images/2.png"><br>配置完成后需要打开新的<code>编辑器</code>或<code>cmd</code>执行命令</p><p>win10其他问题<code>无法加载文件...禁止运行脚本</code>，在设置中搜索<code>允许本地</code>，勾选应用<code>允许powershell较笨在不签名的情况下运行</code>：<br><img src="/medias/drawing-bed/images/3.png"></p><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>进入到<code>themes</code>目录，克隆主题，并修改文件夹名称为<code>matery</code>，删除如果你需要将主题自定义美化，并上传到git仓库，需要将clone下来的仓库中的<code>.git</code>目录删除，在hexo目录创建<code>.git</code>，上传到自己的代码库统一管理。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>hexo</code>目录将<code>_config.landscape.yml</code>修改为<code>_config.matery.yml</code></p><h1 id="统一配置文件"><a href="#统一配置文件" class="headerlink" title="统一配置文件"></a>统一配置文件</h1><p>将主题文件夹下的<code>_config.yml</code>文件中的内容复制到hexo根目录下的<code>_config.matery.yml</code>文件中，并删除主题文件夹下的<code>_config.yml</code>文件</p><p>以后主题配置文件就是<code>_config.matery.yml</code>，hexo配置文件是<code>_config.yml</code></p><h1 id="写作技巧"><a href="#写作技巧" class="headerlink" title="写作技巧"></a>写作技巧</h1><p>写草稿，不会被发布：</p><p><code>hexo n draft 文章草稿</code></p><p>这样会在<code>source/**_draft</code>中新建一个<strong>文章草稿.md</strong>，预览草稿：</p><p><code>hexo s -p 80 --draft</code></p><p>不预览草稿，正式发布预览：</p><p><code>hexo s -p 80</code></p><p>写完的草稿，正式发布：</p><p><code>hexo p draft 文章草稿</code></p><p>这样会自动把<strong>文章草稿.md</strong>发布到<code>_posts</code>目录下。</p><p>写作请使用</p><p><code>hexo n post --path 分类名/文章名 &quot;title信息&quot;</code></p><p>hexo简写命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo n <span class="token string">"文章名"</span> == hexo new <span class="token string">"文章名"</span>hexo p == hexo publishhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo s   <span class="token comment"># Hexo会监视文件变动并自动更新，您无须重启服务器。</span>hexo s <span class="token operator">-</span>s   <span class="token comment"># 静态模式</span>hexo s <span class="token operator">-</span>p 5000   <span class="token comment"># 更改端口</span>hexo s <span class="token operator">-</span>i 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>10   <span class="token comment"># 自定义 IP</span>hexo clean   <span class="token comment"># 清除缓存,网页正常情况下可以忽略此条命令</span>hexo g   <span class="token comment"># 生成静态网页</span>hexo d   <span class="token comment"># 开始部署</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用breeze安装kubernetes高可用</title>
      <link href="/posts/72c4.html"/>
      <url>/posts/72c4.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>使用VMware开启7台虚拟机，这里使用了一台32G内存台式机和一台16G笔记本</p><table><thead><tr><th align="left">主机名</th><th align="center">IP</th><th align="center">配置</th><th align="right">安装服务</th></tr></thead><tbody><tr><td align="left">deploy</td><td align="center">192.168.3.200</td><td align="center">centos7.9 x64,4g内存</td><td align="right">docker/docker-compose/breeze</td></tr><tr><td align="left">master01</td><td align="center">192.168.3.201</td><td align="center">centos7.9 x64,4g内存</td><td align="right">k8smaster/etcd/hapoxy/keepalived</td></tr><tr><td align="left">master02</td><td align="center">192.168.3.202</td><td align="center">centos7.9 x64,4g内存</td><td align="right">k8smaster/etcd/hapoxy/keepalived</td></tr><tr><td align="left">master03</td><td align="center">192.168.3.203</td><td align="center">centos7.9 x64,4g内存</td><td align="right">k8smaster/etcd/hapoxy/keepalived</td></tr><tr><td align="left">worker01</td><td align="center">192.168.3.204</td><td align="center">centos7.9 x64,4g内存</td><td align="right">k8swork/prometheus</td></tr><tr><td align="left">worker02</td><td align="center">192.168.3.205</td><td align="center">centos7.9 x64,4g内存</td><td align="right">k8swork</td></tr><tr><td align="left">harbor</td><td align="center">192.168.3.206</td><td align="center">centos7.9 x64,4g内存</td><td align="right">harbor</td></tr><tr><td align="left"></td><td align="center">192.168.3.210</td><td align="center">vip</td><td align="right">ha虚IP在3台k8smaster浮动</td></tr></tbody></table><p>所有主机安装<a href="https://repo.huaweicloud.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">centos7.9.mini.x64.2009.iso</a>镜像，注意安装时<font color=red>不要</font>创建<code>/swap</code>分区，只创建<code>/boot</code>和<code>/</code>分区即可，磁盘建议大于30G，内存大于4G，配置固定IP和主机名</p><p>参考文档：</p><p>&emsp;&emsp;<a href="https://github.com/wise2c-devops/breeze/blob/master/BreezeManual-CN.md">BreezeManual-CN.md</a></p><p>&emsp;&emsp;<a href="https://github.com/wise2c-devops/breeze/releases">docker-compose.yaml</a></p><p>&emsp;&emsp;<a href="https://github.com/wise2c-devops/breeze/raw/master/manual/BreezeManual-CN.pdf">BreezeManual-CN.pdf</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">timedatectl set-timezone Asia/Shanghaisetenforce <span class="token number">0</span><span class="token function">sed</span> --follow-symlinks -i <span class="token string">"s/SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/configfirewall-cmd --set-default-zone<span class="token operator">=</span>trustedfirewall-cmd --complete-reload<span class="token function">reboot</span><span class="token comment"># 做完之后记得各机器拍摄快照</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在deploy主机执行以下命令，不要更改yum源除非你会，如果下载速度慢选择备用链接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span> -o /usr/local/bin/docker-compose<span class="token comment"># 备用</span><span class="token comment"># curl -L http://mirror.azure.cn/docker-toolbox/linux/compose/1.25.4/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose</span><span class="token function">chmod</span> +x /usr/local/bin/docker-composeyum <span class="token function">install</span> docker -ysystemctl start dockersystemctl <span class="token builtin class-name">enable</span> docker<span class="token comment"># curl -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.20.4/docker-compose.yml -o docker-compose.yml</span><span class="token function">curl</span> -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.20.4/docker-compose-centos.yml -o docker-compose.yml<span class="token comment"># curl -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.20.4/docker-compose-ubuntu.yml -o docker-compose.yml</span><span class="token comment"># 备用，如果下载不到打开此链接复制内容到文件中，https://github.com/wise2c-devops/breeze/blob/master/docker-compose-centos-aliyun.yml</span><span class="token comment">## curl -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.20.4/docker-compose-aliyun.yml -o docker-compose.yml</span><span class="token comment"># curl -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.20.4/docker-compose-centos-aliyun.yml -o docker-compose.yml</span><span class="token comment">## curl -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.20.4/docker-compose-ubuntu-aliyun.yml -o docker-compose.yml</span>docker-compose up -d<span class="token comment"># 因开启的虚拟机过多建议使用下面的命令</span><span class="token comment"># COMPOSE_HTTP_TIMEOUT=300 docker-compose up -d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开网页<code>192.168.3.200:88</code>安装集群</p><p>验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看keepalived绑定，对所有master主机执行</span><span class="token function">ip</span> addr show ens32<span class="token comment"># 可以看到其中一台机器ens32网卡绑定VIP为192.168.3.210</span><span class="token comment"># kubectl get cs 获取集群状态</span>Warning: v1 ComponentStatus is deprecated <span class="token keyword">in</span> v1.19+NAME                 STATUS      MESSAGE                                                                                       ERRORscheduler            Unhealthy   Get <span class="token string">"http://127.0.0.1:10251/healthz"</span><span class="token builtin class-name">:</span> dial tcp <span class="token number">127.0</span>.0.1:10251: connect: connection refused   controller-manager   Unhealthy   Get <span class="token string">"http://127.0.0.1:10252/healthz"</span><span class="token builtin class-name">:</span> dial tcp <span class="token number">127.0</span>.0.1:10252: connect: connection refused   etcd-0               Healthy     <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span>                                                                             etcd-1               Healthy     <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span>                                                                             etcd-2               Healthy     <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span><span class="token comment"># 解决报错：</span><span class="token comment"># 编辑/etc/kubernetes/manifests/kube-controller-manager.yaml和/etc/kubernetes/manifests/kube-scheduler.yaml</span><span class="token comment"># 将两个文件中的</span><span class="token comment"># - --port=0</span><span class="token comment"># 这一行注释掉，稍等片刻</span><span class="token comment"># kubectl get cs</span>Warning: v1 ComponentStatus is deprecated <span class="token keyword">in</span> v1.19+NAME                 STATUS    MESSAGE             ERRORcontroller-manager   Healthy   ok                  scheduler            Healthy   ok                  etcd-1               Healthy   <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span>   etcd-0               Healthy   <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span>   etcd-2               Healthy   <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache配置ssl连接</title>
      <link href="/posts/dcf4.html"/>
      <url>/posts/dcf4.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>检查<code>apache</code>是否启用<code>mod_ssl</code>模块，一般情况下会在<code>/etc/httpd/conf.d/</code>下存在<code>ssl.conf</code>文件。</p><h1 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h1><p>安装<code>mod_ssl</code>模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y mod_ssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h2><h3 id="修改ssl-conf文件"><a href="#修改ssl-conf文件" class="headerlink" title="修改ssl.conf文件"></a>修改ssl.conf文件</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">&lt;VirtualHost _default_:443&gt;DocumentRoot &quot;&#x2F;var&#x2F;www&#x2F;html&quot;ServerName roxn.cn:443SSLEngine onSSLProtocol all -SSLv2 -SSLv3SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUMSSLHonorCipherOrder onSSLCipherSuite PROFILE&#x3D;SYSTEMSSLProxyCipherSuite PROFILE&#x3D;SYSTEMSSLCertificateFile &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;apache&#x2F;4434998_roxn.cn_public.crtSSLCertificateKeyFile &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;apache&#x2F;4434998_roxn.cn.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改httpd-conf，使http跳转到https"><a href="#修改httpd-conf，使http跳转到https" class="headerlink" title="修改httpd.conf，使http跳转到https"></a>修改httpd.conf，使http跳转到https</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">&lt;VirtualHost *:80&gt;    RewriteEngine on    RewriteCond %&#123;SERVER_PORT&#125; !^443$    RewriteRule ^(.*)$ https:&#x2F;&#x2F;%&#123;SERVER_NAME&#125;$1 [L,R]&lt;&#x2F;VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="重启验证"><a href="#重启验证" class="headerlink" title="重启验证"></a>重启验证</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/drawing-bed/gif/0.gif"></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible</title>
      <link href="/posts/ea2c.html"/>
      <url>/posts/ea2c.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="ansible简介"><a href="#ansible简介" class="headerlink" title="ansible简介"></a>ansible简介</h1><h2 id="自动化运维应用场景"><a href="#自动化运维应用场景" class="headerlink" title="自动化运维应用场景"></a>自动化运维应用场景</h2><blockquote><p>文件传输<br>命令执行</p><blockquote><p>应用部署<br>配置管理<br>任务流编排</p></blockquote></blockquote><h2 id="常用自动化运维工具"><a href="#常用自动化运维工具" class="headerlink" title="常用自动化运维工具"></a>常用自动化运维工具</h2><ol><li><p>ansible：基于python开发，agentless一般不需要代理，需要ssh连接基于key验证是基本，中小型应用环境（主机数量 &lt; 300 台）</p></li><li><p>saltstack：基于python开发，一般需部署agent，执行效率更高</p></li><li><p>puppet：基于ruby开发，功能强大，配置复杂，适合大型环境</p></li><li><p>fabric、chef、cfengine、func等</p></li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><blockquote><p>模块化：调用特定的模块，完成特定任务<br>有Paramiko，PyYAML，Jinja2（模板语言）三个关键模块<br>支持自定义模块<br>基于Python语言实现<br>部署简单，基于python和SSH（默认已安装），agentless<br>安全，基于OpenSSH<br>支持playbook编排任务<br>幂等性：一个任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况<br>无需代理不依赖PKI（无需ssl）<br>可使用任何编程语言写模块<br>YAML格式，编排任务，支持丰富的数据结构<br>较强大的多层解决方案</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wujiops/jpeg/ansible/0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/wujiops/jpeg/ansible/1.png"></p><h2 id="ansible-playbook（剧本）执行过程："><a href="#ansible-playbook（剧本）执行过程：" class="headerlink" title="ansible-playbook（剧本）执行过程："></a>ansible-playbook（剧本）执行过程：</h2><ol><li><p>将已有编排好的任务集写入ansible-playbook</p></li><li><p>通过ansible-playbook命令分拆任务集至逐条ansible命令，按预定规则逐条执行</p></li></ol><h2 id="Ansible主要操作对象："><a href="#Ansible主要操作对象：" class="headerlink" title="Ansible主要操作对象："></a>Ansible主要操作对象：</h2><ol><li><p>hosts主机</p></li><li><p>NETWORKING网络设备</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>执行ansible的主机一般称为主控端，中控，master或堡垒机</p></li><li><p>主控端Python版本需要2.6或以上</p></li><li><p>被控端Python版本小于2.4需要安装python-simplejson</p></li><li><p>被控端如开启SELinux需要安装libselinux-python</p></li><li><p>windows不能做为主控端</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rpm包安装:EPEL源</span>yum <span class="token function">install</span> ansible -y<span class="token comment"># 编译安装:</span>yum -y <span class="token function">install</span> python-jinja2 PyYAML python-paramiko python-babel python-crypto<span class="token function">tar</span> xf ansible-1.5.4.tar.gz<span class="token builtin class-name">cd</span> ansible-1.5.4python setup.py buildpython setup.py <span class="token function">install</span><span class="token function">mkdir</span> /etc/ansiblecp-r examples/* /etc/ansible<span class="token comment"># Git方式:</span><span class="token function">git</span> clone git://github.com/ansible/ansible.git --recursive<span class="token builtin class-name">cd</span> ./ansible<span class="token builtin class-name">source</span> ./hacking/env-setup<span class="token comment"># pip安装:pip是安装Python包的管理器，类似yum</span>yum <span class="token function">install</span> python-pip python-develyum <span class="token function">install</span> gcc glibc-devel zibl-devel rpm-bulid openssl-develpip <span class="token function">install</span> --upgrade pippip <span class="token function">install</span> ansible --upgrade<span class="token comment"># 确认安装:</span>ansible --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg   # 主配置文件，配置ansible工作特性&#x2F;etc&#x2F;ansible&#x2F;hosts   # 主机清单&#x2F;etc&#x2F;ansible&#x2F;roles&#x2F;   # 存放角色的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;bin&#x2F;ansible   # 主程序，临时命令执行工具&#x2F;usr&#x2F;bin&#x2F;ansible-doc   # 查看配置文档，模块功能查看工具&#x2F;usr&#x2F;bin&#x2F;ansible-galaxy   # 下载&#x2F;上传优秀代码或Roles模块的官网平台&#x2F;usr&#x2F;bin&#x2F;ansible-playbook   # 定制自动化任务，编排剧本工具&#x2F;usr&#x2F;bin&#x2F;ansible-pull   # 远程执行命令的工具&#x2F;usr&#x2F;bin&#x2F;ansible-vault   # 文件加密工具&#x2F;usr&#x2F;bin&#x2F;ansible-console   # 基于console界面与用户交互的执行工具<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主机清单inventory"><a href="#主机清单inventory" class="headerlink" title="主机清单inventory"></a>主机清单inventory</h2><p>Inventory主机清单</p><p>&emsp;&emsp;ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在inventory file中将其分组命名</p><p>&emsp;&emsp;默认的inventory file为 <code>/etc/ansible/hosts</code> </p><p>&emsp;&emsp;inventory file可以有多个，且也可以通过 <code>Dynamic Inventory</code> 来动态生成</p><h3 id="etc-ansible-hosts文件格式"><a href="#etc-ansible-hosts文件格式" class="headerlink" title="/etc/ansible/hosts文件格式"></a>/etc/ansible/hosts文件格式</h3><p>&emsp;&emsp;inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中；此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明</p><pre class="line-numbers language-hosts" data-language="hosts"><code class="language-hosts">ntp.magedu.com[webservers]www1.magedu.com:2222www2.magedu.com[dbservers]db1.magedu.comdb2.magedu.comdb3.magedu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机</p><p>示例：</p><pre class="line-numbers language-hosts" data-language="hosts"><code class="language-hosts">[webservers]www[01:100].example.com[dbservers]db-[a:f].example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ansible配置文件"><a href="#ansible配置文件" class="headerlink" title="ansible配置文件"></a>ansible配置文件</h2><p>Ansible配置文件<code>/etc/ansible/ansible.cfg</code> （一般保持默认）</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[defaults]#inventory &#x3D; &#x2F;etc&#x2F;ansible&#x2F;hosts   # 主机列表配置文件#library &#x3D; &#x2F;usr&#x2F;share&#x2F;my_modules&#x2F;   # 库文件存放目录#remote_tmp &#x3D; $HOME&#x2F;.ansible&#x2F;tmp   # 临时py命令文件存放在远程主机目录#local_tmp&#x3D; $HOME&#x2F;.ansible&#x2F;tmp   # 本机的临时命令执行目录#forks&#x3D; 5   # 默认并发数#sudo_user&#x3D; root   # 默认sudo用户#ask_sudo_pass &#x3D; True   # 每次执行ansible命令是否询问ssh密码#ask_pass&#x3D; True#remote_port&#x3D; 22#host_key_checking &#x3D; False   # 检查对应服务器的host_key，首次连接不必输入yes&#x2F;no#log_path&#x3D;&#x2F;var&#x2F;log&#x2F;ansible.log   # 日志文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ansible系列命令"><a href="#Ansible系列命令" class="headerlink" title="Ansible系列命令"></a>Ansible系列命令</h2><p><code>ansible</code>、<code>ansible-doc</code>、<code>ansible-playbook</code>、<code>ansible-vault</code>、<code>ansible-console</code>、<code>ansible-galaxy</code>、<code>ansible-pull</code></p><p><code>ansible-doc</code>：显示模块帮助</p><p><code>ansible-doc [options] [module...]</code></p><p><code>-a</code>&emsp;&emsp;&emsp;# 显示所有模块的文档</p><p><code>-l</code>, <code>--list</code>&emsp;&emsp;&emsp;# 列出可用模块</p><p><code>-s</code>, <code>--snippet</code>&emsp;&emsp;&emsp;# 显示指定模块的playbook片段</p><p>示例：</p><p><code>ansible-doc -l</code>   # 列出所有模块</p><p><code>ansible-doc ping</code>   # 查看指定模块帮助用法</p><p><code>ansible-doc -s ping</code>   # 查看指定模块帮助用法</p><p>&emsp;&emsp;ansible通过ssh实现配置管理、应用部署、任务执行等功能，建议配置ansible端能基于密钥认证的方式联系各被管理节点</p><p><code>ansible &lt;host-pattern&gt; [-m module_name] [-a args]</code></p><p><code>--version</code>   # 显示版本</p><p><code>-m module</code>   # 指定模块，默认为command</p><p><code>-v</code>   # 详细过程<code>-vv</code> <code>-vvv</code>更详细</p><p><code>--list</code>,<code> --list-hosts</code>   # 显示主机列表</p><p><code>-k</code>, <code>--ask-pass</code>   # 提示输入ssh连接密码，默认Key验证</p><p><code>-K</code>, <code>--ask-become-pass</code>   # 提示输入sudo时的口令</p><p><code>-C</code>，<code>--check</code>   # 检查，并不执行</p><p><code>-T</code>，<code>--timeout=TIMEOUT</code>   # 执行命令的超时时间，默认10s</p><p><code>-u</code>，<code>--user=REMOTE_USER</code>   # 执行远程执行的用户</p><p><code>-b</code>,  <code>--become</code>   # 代替旧版的sudo切换</p><h1 id="ansible的host-pattern"><a href="#ansible的host-pattern" class="headerlink" title="ansible的host-pattern"></a>ansible的host-pattern</h1><p>匹配主机的列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># all：表示所有inventory中的所有主机</span>ansible all -m <span class="token function">ping</span><span class="token comment"># *：通配符</span>ansible <span class="token string">"*"</span> -m <span class="token function">ping</span>ansible <span class="token number">192.168</span>.182.* -m <span class="token function">ping</span>ansible <span class="token string">"*cd"</span> -m <span class="token function">ping</span><span class="token comment"># 或关系</span>ansible <span class="token string">"ab:cd"</span> -m <span class="token function">ping</span>ansible <span class="token string">"192.168.182.130:192.168.182.131"</span> -m <span class="token function">ping</span><span class="token comment"># 逻辑与</span>ansible <span class="token string">"ab:&amp;bcd"</span> -m <span class="token function">ping</span><span class="token comment"># 在ab组并且在bcd组中的主机</span><span class="token comment"># 逻辑非</span>ansible <span class="token string">'ab:!bcd'</span> -m <span class="token function">ping</span><span class="token comment"># 在ab组，但不在bcd组中的主机，注意是单引号</span><span class="token comment"># 综合逻辑</span>ansible <span class="token string">'ab:cd:&amp;bcd:!cd'</span> -m <span class="token function">ping</span><span class="token comment"># 正则表达式</span>ansible <span class="token string">"ab:&amp;cd"</span> -m <span class="token function">ping</span> ansible <span class="token string">"~(b|c)d"</span> -m <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ansible命令执行过程"><a href="#ansible命令执行过程" class="headerlink" title="ansible命令执行过程"></a>ansible命令执行过程</h1><ol><li><p>加载自己的配置文件默认 <code>/etc/ansible/ansible.cfg</code> </p></li><li><p>加载自己对应的模块文件，如  <code>command</code> </p></li><li><p>通过ansible将模块或命令生成对应的临时py文件，并将该文件传输至远程服务器的对应执行用户<code>$HOME/.ansible/tmp/ansible-tmp-数字/XXX.PY文件</code></p></li><li><p>给文件+x执行</p></li><li><p>执行并返回结果</p></li><li><p>删除临时py文件，<code>sleep 0</code>退出</p></li></ol><p>执行状态（在ansible.cfg配置文件中[colors]可以更改）：</p><blockquote><p><font color=Green>绿色</font>：执行成功并且不需要做改变的操作<br><font color=Yellow>黄色</font>：执行成功并且对目标主机做变更<br><font color=Red>红色</font>：执行失败</p></blockquote><h1 id="ansible使用示例"><a href="#ansible使用示例" class="headerlink" title="ansible使用示例"></a>ansible使用示例</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以wang用户执行ping存活检测</span>ansible all -m ping-u wang -k<span class="token comment"># 以wang sudo至root执行ping存活检测</span>ansible all -m ping-u wang -b -k<span class="token comment"># 以wang sudo至mage用户执行ping存活检测</span>ansible all -m ping-u wang -b -k --become-user mage<span class="token comment"># 以wang sudo至root用户执行ls</span>ansible all -m <span class="token builtin class-name">command</span> -u wang --become-user<span class="token operator">=</span>root -a <span class="token string">'ls /root'</span> -b -k -K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a>ansible常用模块</h2><ol><li>command：在远程主机执行命令，默认模块，可忽略-m选项</li></ol><p><code>ansible ab -m command -a &#39;service vsftpd start&#39;</code> </p><p><code>ansible ab -m command -a &#39;echo magedu | passwd --stdin wang&#39;</code> 不成功</p><p>此命令不支持<code>$VARNAME</code> <code>&lt;</code> <code>&gt;</code> <code>|</code> <code>;</code> <code>&amp;</code>等，用shell模块实现</p><ol start="2"><li>Shell：和command相似，用shell执行命令</li></ol><p><code>ansible ab -m shell -a &#39; &#39;</code> </p><p>调用bash执行命令类似<code>cat /tmp/stanley.md | awk -F&#39;|&#39; &#39;iprint $1,$2&#125;&#39; &amp;&gt; /tmp/example.txt</code>这些复杂命令，即使使用shell也可能会失败，解决办法：写到脚本时，copy到远程，执行，再把需要的结果拉回执行命令的机器</p><ol start="3"><li>Script: 运行脚本</li></ol><p><code>-a &quot;/PATH/TO/SCRIPT_FILE&quot;</code> </p><p><code>snsible abc -m script -a f1.sh</code> </p><ol start="4"><li>Copy：从服务器复制文件到客户端,</li></ol><p><code>ansible bcd -m copy -a &quot;src=/root/host.sh dest=/data/host.sh owner=wang mode=600 backup=yes&quot;</code></p><p>如目标存在，默认覆盖，此处指定先备份(注意：文件未更改则不会备份)</p><p><code>ansible 192.168.182.128 -m copy -a &quot;content=&#39;test content\n&#39; dest=/tmp/f1.txt&quot;</code>利用内容，直接生成目标文件</p><ol start="5"><li>Fetch：从客户端取文件至服务器端，copy相反，目录可先tar</li></ol><p><code>ansible ab -m fetch -a &#39;src=/root/a.sh dest=/data/scripts&#39;</code></p><p><code>ansible bcd -m shell -a &#39;tar JPcf /var/log/log.txz /var/log/*.log&#39;</code></p><p><code>ansible bcd -m fetch -a &#39;src=/var/log/log.txz dest=/data&#39;</code></p><ol start="6"><li>File：设置文件属性</li></ol><p><code>ansible bcd -m file -a &quot;path=/root/a.sh owner=wang mode=755&quot;</code></p><p><code>ansible bcd -m file -a &#39;src=/etc/fstab dest=/data/fstab state=link&#39;</code></p><ol start="7"><li>Hostname：管理主机名</li></ol><p><code>ansible node1 -m hostname -a &quot;name=websrv&quot;</code></p><p><code>ansible 192.168.182.128 -m hostname -a &#39;name=node128&#39;</code></p><ol start="8"><li>Cron：计划任务</li></ol><p>支持时间：<code>minute </code>, <code>hour</code> , <code>day </code>, <code>month</code> , <code>weekday</code></p><p><code>ansible bcd -m cron -a &#39;minute=* weekday=2,4,6 job=&quot;/usr/bin/wall PC warning&quot; name=waring&#39;</code>创建任务</p><p><code>ansible bcd -m cron -a &#39;disabled=true job=&quot;/usr/bin/wall PC warning&quot; name=waring&#39;</code>注释任务</p><p><code>ansible bcd -m cron -a &#39;disabled=false job=&quot;/usr/bin/wall PC warning&quot; name=waring&#39;</code>取消注释任务，true、false可以被yes、no替换</p><p><code>ansible bcd -m cron -a &#39;job=&quot;/usr/bin/wall PC warning&quot; name=waring state=absent&#39;</code>删除任务</p><ol start="9"><li>Yum：管理包</li></ol><p><code>ansible all -m yum -a &#39;name=httpd state=latest&#39;</code>安装(<code>state=latest</code>可省)</p><p><code>ansible bcd -m yum -a &#39;name=httpd,nginx&#39;</code>安装多个</p><p><code>ansible all -m yum -a &#39;name=httpd state=removed&#39;</code>删除</p><p><code>ansible all -m yum -a &#39;name=httpd state=absent&#39;</code>删除</p><p>安装本地包，先copy再安装，忽略key检查<code>disable_gpg_check=yes</code></p><p><code>ansible bcd -m copy -a &#39;src=/data/vsftpd-3.0.2-22.el8.x86_64.rpm dest/=root/&#39;</code></p><p><code>ansible bcd -m yum -a &#39;name=/root/vsftpd-3.0.2-22.el8.x86_64.rpm&#39;</code></p><p><code>ansible bcd -m yum -a &#39;name=/root/vsftpd-3.0.2-22.el8.x86_64.rpm disable_gpg_check=yes&#39;</code></p><p>清除缓存安装包</p><p><code>ansible bcd -m yum -a &#39;name=dstat update_cache=yes&#39;</code> <code>update_cache=yes</code>等同于<code>yum clean all</code></p><ol start="10"><li>Service：管理服务</li></ol><p><code>ansible bcd -m service -a &#39;name=httpd state=started enabled=yes&#39;</code> <code>enable=yes</code>设置开机自启</p><p><code>ansible bcd -m service -a &#39;name=httpd state=stopped&#39;</code></p><p><code>ansible bcd -m service -a &#39;name=httpd state=started&#39;</code></p><p><code>ansible bcd -m service -a &#39;name=httpd state=reloaded&#39;</code></p><p><code>ansible bcd -m service -a &#39;name=httpd state=restarted&#39;</code></p><ol start="11"><li>User：管理用户</li></ol><p><code>ansible cd -m user -a &#39;name=nginx shell=/sbin/nologin system=yes home=/var/nginx groups=root,bin uid=80 comment=&quot;nginx service&quot;&#39;</code></p><p><code>ansible cd -a &#39;getent passwd nginx&#39;</code></p><p><code>ansible cd -m user -a &#39;name=nginx remove=yes state=absent&#39;</code> 删除用户及家目录等数据</p><p><code>ansible cd -a &#39;getent passwd nginx&#39;</code></p><ol start="12"><li>Group：管理组</li></ol><p><code>ansible cd -m group -a &#39;name=nginx system=yes gid=80&#39;</code></p><p><code>ansible cd -a &#39;getent group nginx&#39;</code></p><p><code>ansible cd -m group -a &#39;name=nginx state=absent&#39;</code></p><p><code>ansible cd -a &#39;getent group nginx&#39;</code></p><p>ansible-galaxy</p><p>连接<a href="https://galaxy.ansible.com下载相应的roles/">https://galaxy.ansible.com下载相应的roles</a></p><p><a href="https://galaxy.ansible.com/search?deprecated=false&amp;keywords=&amp;order_by=-relevance%E6%9F%A5%E6%89%BE%E5%8C%85%E5%9C%B0%E5%9D%80%E3%80%82">https://galaxy.ansible.com/search?deprecated=false&amp;keywords=&amp;order_by=-relevance查找包地址。</a></p><p><code>ansible-galaxy install geerlingguy.nginx</code> 安装别人的galaxy</p><p><code>ansible-galaxy list</code> 列出所有已安装的</p><p><code>ansible-galaxy list geerlingguy.nginx</code> 查看已安装<code>geerlingguy.nginx</code>的版本</p><p><code>cd  /root/.ansible/roles/</code> 安装后会提示安装的目录</p><p><code>tree .</code> 查看结构</p><p><code>cp geerlingguy.nginx wang.nginx -rp</code> 复制一份 修修改改 当自己的😋</p><p><code>ansible-galaxy list</code> 列出已安装的可以看到多了一个<code>wang.nginx</code></p><p>删除galaxy，可以直接删除文件夹<code>geerlingguy.nginx</code> <code>wang.nginx</code></p><p><code>ansible-galaxy remove geerlingguy.nginx</code> 命令删除</p><p><code>ansible-galaxy list</code> 列出所有已安装的</p><p><code>rm -fr wang.nginx/</code> 直接删除文件夹</p><p><code>ansible-galaxy list</code> 列出所有已安装的</p><h2 id="ansible-pull"><a href="#ansible-pull" class="headerlink" title="ansible-pull"></a>ansible-pull</h2><p>推送命令至远程，效率无限提升，对运维要求较高</p><h2 id="Ansible-playbook"><a href="#Ansible-playbook" class="headerlink" title="Ansible-playbook"></a>Ansible-playbook</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#hello world yml file</span><span class="token comment">#abcd is 192.168.182.1&#123;28,31&#125;</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> cd  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hello world      <span class="token key atrule">command</span><span class="token punctuation">:</span> /usr/bin/wall hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook hello.yml</code> 执行结果可以打开c、d机器的终端查看，xshell等。</p><h2 id="Ansible-vault"><a href="#Ansible-vault" class="headerlink" title="Ansible-vault"></a>Ansible-vault</h2><p>功能：管理加密解密yml文件</p><p><code>ansible-vault [create|decrypt|edit|encrypt|rekey|view]</code></p><p><code>ansible-vault encrypt hello.yml</code>   # 加密</p><p><code>ansible-vault decrypt hello.yml</code>   # 解密</p><p><code>ansible-vault view hello.yml</code>   # 查看</p><p><code>ansible-vault edit hello.yml</code>   # 编辑加密文件</p><p><code>ansible-vault rekey hello.yml</code>   # 修改口令</p><p><code>ansible-vault create new.yml</code>   # 创建带口令的新文件</p><h2 id="Ansible-console"><a href="#Ansible-console" class="headerlink" title="Ansible-console"></a>Ansible-console</h2><p>2.0+新增，可交互执行命令，支持tab</p><p><code>root@test(2)[f:10]$</code></p><p><code>执行用户@当前操作的主机组(当前组的主机数量)[f:并发数]$</code></p><p>设置并发数: <code>forks n</code> 例如： <code>forks 10</code></p><p>切换组: <code>cd 主机组</code> 例如: <code>cd web</code></p><p>列出当前组主机列表：<code>list</code></p><p>列出所有的内置命令：<code>?</code> 或 <code>help</code></p><p>示例:</p><p><code>root@all (4)[f:5]$ list</code></p><p><code>root@all (4)[f:5]$ cd cd</code></p><p><code>root@cd (2)[f:5]$ list</code></p><p><code>root@cd (2)[f:5]$ yum name=httpd state=present</code></p><p><code>root@cd (2)[f:5]$ service name=httpd state=started</code></p><h1 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h1><p>&emsp;&emsp;playbook是由一个或多个”play”组成的列表</p><p>&emsp;&emsp;play的主要功能在于将事先归并为一组的主机装扮成事先通过ansible中的task定义好的角色。从根本上来讲，所谓task无非是调用ansible的一个module。将多个play组织在一个playbook中，即可以让它们联同起来按事先编排的机制同唱一台大戏</p><p>&emsp;&emsp;Playbook采用YAML语言编写</p><p><img src="https://cdn.jsdelivr.net/gh/wujiops/jpeg/ansible/0.jpg"></p><h2 id="YAML介绍"><a href="#YAML介绍" class="headerlink" title="YAML介绍"></a>YAML介绍</h2><p>&emsp;&emsp;YAML是一个可读性高的用来表达资料序列的格式。YAML参考了其他多种语言，包括:XML、C语言、Python、Perl以及电子邮件格式RFC2822等。Clark Evans在2001年在首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者</p><p>&emsp;&emsp;YAML Ain’t Markup Language，即YAML不是XML。不过，在开发的这种语言时，YAML的意思其实是:”Yet Another Markup Language”(仍是一种标记语言）</p><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><blockquote><p>YAML的可读性好<br>YAML和脚本语言的交互性好<br>YAML使用实现语言的数据类型<br>YAML有一个一致的信息模型<br>YAML易于实现<br>YAML可以基于流来处理<br>YAML表达能力强，扩展性好</p></blockquote><p>更多的内容及规范参见<a href="http://www.yaml.org/">http://www.yaml.org</a></p><h3 id="YAML语法简介"><a href="#YAML语法简介" class="headerlink" title="YAML语法简介"></a>YAML语法简介</h3><p>&emsp;&emsp;在单一档案中，可用连续三个连字号<code>---</code>区分多个档案。另外，还有选择性的连续三个点号<code>...</code>用来表示档案结尾</p><p>&emsp;&emsp;次行开始正常写Playbook的内容，一般建议写明该Playbook的功能</p><p>&emsp;&emsp;使用<code>#</code>号注释代码</p><p>&emsp;&emsp;缩进必须是统一的，不能空格和tab混用</p><p>&emsp;&emsp;缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的</p><p>&emsp;&emsp;YAML文件内容和Linux系统大小写判断方式保持一致，是区别大小写的，k/v的值均需大小写敏感</p><p>&emsp;&emsp;k/v的值可同行写也可换行写。同行使用<code>:</code>分隔</p><p>&emsp;&emsp;v可是个字符串，也可是另一个列表</p><p>&emsp;&emsp;一个完整的代码块功能需最少元素需包括<code>name: task</code></p><p>&emsp;&emsp;一个name只能包括一个task</p><p>&emsp;&emsp;YAML文件扩展名通常为yml或yaml</p><h3 id="List：列表，其所有元素均使用-打头"><a href="#List：列表，其所有元素均使用-打头" class="headerlink" title="List：列表，其所有元素均使用-打头"></a>List：列表，其所有元素均使用<code>-</code>打头</h3><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#A list of tasty fruits</span><span class="token punctuation">-</span> Apple<span class="token punctuation">-</span> Orange<span class="token punctuation">-</span> Strawberry<span class="token punctuation">-</span> Mango<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dictionary：字典，通常由多个key与value构成"><a href="#Dictionary：字典，通常由多个key与value构成" class="headerlink" title="Dictionary：字典，通常由多个key与value构成"></a>Dictionary：字典，通常由多个key与value构成</h3><p>示例:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token comment"># An employee record</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Example Developer<span class="token key atrule">job</span><span class="token punctuation">:</span> Developer<span class="token key atrule">skill</span><span class="token punctuation">:</span> Elite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以将<code>key:value</code>放置于<code>&#123;&#125;</code>中进行表示，用<code>,</code>分隔多个<code>key:value</code></p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token comment"># An employee record</span><span class="token punctuation">&#123;</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Example Developer<span class="token punctuation">,</span> <span class="token key atrule">job</span><span class="token punctuation">:</span> Developer<span class="token punctuation">,</span> skill<span class="token punctuation">:</span>Elite<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构(Structure )通过空格来展示，序列(Sequence )里的项用<code>-</code>来代表，Map里的键值对用<code>:</code>分隔</p><p>示例</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> John Smith<span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">41</span><span class="token key atrule">gender</span><span class="token punctuation">:</span> Male<span class="token key atrule">spouse</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> Jane Smith  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">37</span>  <span class="token key atrule">gender</span><span class="token punctuation">:</span> Female<span class="token key atrule">children</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Jimmy Smith    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">17</span>    <span class="token key atrule">gender</span><span class="token punctuation">:</span> Male  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Jenny Smith    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">13</span>    <span class="token key atrule">gender</span><span class="token punctuation">:</span> Female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Playbook核心元素"><a href="#Playbook核心元素" class="headerlink" title="Playbook核心元素"></a>Playbook核心元素</h2><p><code>Hosts</code> 执行的远程主机列表</p><p><code>Tasks</code> 任务集</p><p><code>Varniables</code> 内置变量或自定义变量在playbook中调用</p><p><code>Templates</code> 模板，可替换模板文件中的变量并实现一些简单逻辑的文件</p><p><code>Handlers</code> 和 <code>notity</code> 结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行<br><code>tags</code> 标签 指定某条任务执行，用于选择运行playbook中的部分代码。ansible具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可以通过tags跳过此些代码片断。</p><p><code>ansible-playbook -t tagsname useradd.yml</code> </p><h2 id="playbook基础组件"><a href="#playbook基础组件" class="headerlink" title="playbook基础组件"></a>playbook基础组件</h2><h3 id="Hosts："><a href="#Hosts：" class="headerlink" title="Hosts："></a>Hosts：</h3><p>playbook中的每一个play的目的都是为了让某个或某些主机以某个指定的用户身份执行任务。hosts用于指定要执行指定任务的主机，须事先定义在主机清单中</p><p>可以是如下形式：</p><pre class="line-numbers language-none"><code class="language-none">one.example.comone.example.com:two.example.com192.168.1.50192.168.1.*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>Websrvs:dbsrvs</code> 两个组的并集</p><p><code>Websrvs:&amp;dbsrvs</code> 两个组的交集</p><p><code>websrvs:!dbsrvs</code> 在websrvs组，但不在dbsrvs组</p><p>示例：</p><p><code>- hosts: websrvs:dbsrvs</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> cd  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root    <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create new file      <span class="token key atrule">file</span><span class="token punctuation">:</span> name=/data/newfile state=touch    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create new user      <span class="token key atrule">user</span><span class="token punctuation">:</span> name=test2 system=yes shell=/sbin/nologin    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=httpd    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy html      <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=/var/www/html/index.html dest=/var/www/html/    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start service      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=started enabled=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook -C play.yaml</code>   # 检查playbook</p><h2 id="remote-user"><a href="#remote-user" class="headerlink" title="remote_user"></a>remote_user</h2><p>可用于Host和task中</p><p>&emsp;&emsp;也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root    <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test connection      <span class="token key atrule">ping</span><span class="token punctuation">:</span>      <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> magedu      <span class="token key atrule">sudo</span><span class="token punctuation">:</span> yes   默认sudo为root      <span class="token key atrule">sudo_user</span><span class="token punctuation">:</span> wang   sudo为wang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="task-列表和-action"><a href="#task-列表和-action" class="headerlink" title="task 列表和 action"></a>task 列表和 action</h2><p>play的主体部分是task list</p><p>&emsp;&emsp;task list中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后再开始第二个。在运行自下而下某playbook时，如果中途发生错误，所有已执行任务都将回滚，因此，在更正playbook后重新执行一次即可</p><p>&emsp;&emsp;task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致</p><p>&emsp;&emsp;每个task都应该有其name，用于playbook的执行结果输出，建议其内容尽可能清晰地描述任务执行步骤。如果未提供name，则action的结果将用于输出</p><h3 id="tasks：任务列表"><a href="#tasks：任务列表" class="headerlink" title="tasks：任务列表"></a>tasks：任务列表</h3><p>格式：</p><p>(1) <code>action: module arguments</code></p><p>(2) <code>module: arguments</code>   建议使用</p><p>注意： <code>shell</code> 和 <code>command</code> 模块后面跟命令，而非<code>key=value</code></p><p>某任务的状态在运行后为changed时，可通过”notify”通知给相应的handlers</p><p>任务可以通过”tags”打标签，而后可在<code>ansible-playbook</code>命令上使用<code>-t</code>指定进行调用</p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> disable selinux    <span class="token key atrule">command</span><span class="token punctuation">:</span> /sbin/setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果命令或脚本的退出码不为零，可以使用如下方式替代</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run this command and ignore the result    <span class="token key atrule">shell</span><span class="token punctuation">:</span> /usr/bin/somecommand <span class="token punctuation">|</span><span class="token punctuation">|</span> /bin/true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者使用ignore_errors来忽略错误信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run this command and ignore the result    <span class="token key atrule">shell</span><span class="token punctuation">:</span> /usr/bin/somecommand    <span class="token key atrule">ignore_errors</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h2><p>运行playbook的方式</p><p><code>ansible-playbook &lt;filename.yml&gt; ... [options]</code></p><p>常见选项</p><p><code>--check</code>   只检测可能会发生的改变，但不真正执行操作</p><p><code>--list-hosts</code>   列出运行任务的主机</p><p><code>--limit</code>   主机/列表 只针对主机列表中的主机执行</p><p><code>-v</code>   显示过程<code>-vv</code> <code>-vvv</code>更详细</p><p>示例</p><p><code>ansible-playbook file.yml --check</code>   只检测</p><p><code>ansible-playbook file.yml --list</code></p><p><code>ansible-playbook file.yml --list-tasks</code></p><p><code>ansible-playbook file.yml --limit websrvs</code></p><p><code>ansible-playbook file.yml --list-tags</code></p><p>Playbook VS ShellScripts</p><p>SHELL脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#安装Apache</span>yum <span class="token function">install</span> --quiet -y httpd<span class="token comment">#复制配置文件</span><span class="token function">cp</span> /tmp/httpd.conf /etc/httpd/conf/httpd.conf<span class="token function">cp</span> /tmp/vhosts.conf /etc/httpd/confd/<span class="token comment">#启动Apache，并设置开机启动</span><span class="token function">service</span> httpd start<span class="token function">chkconfig</span> httpd on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Playbook定义</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"安装Apache"</span>      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=httpd    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"复制配置文件"</span>      <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=/tmp/httpd.conf dest=/etc/httpd/conf/<span class="token comment">#      copy: src=/tmp/vhosts.conf dest=/etc/httpd/conf.d/   注意如果相同的模块，不能放在一块，否则只会执行最后一个</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"复制配置文件"</span>       <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=/tmp/vhosts.conf dest=/etc/httpd/conf.d/    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"启动Apache，并设置开机启动"</span>      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=started enabled=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：sysuser.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>  <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all    <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root        <span class="token key atrule">tasks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create mysql user        <span class="token key atrule">user</span><span class="token punctuation">:</span> name=mysql system=yes uid=36      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create a group        <span class="token key atrule">group</span><span class="token punctuation">:</span> name=httpd system=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：httpd.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install httpd      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=httpd state=present    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install configure file        <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=$HOME/httpd.conf dest=/etc/httpd/conf/   <span class="token comment"># src相对路径是相对于当前目录。如果修改远端文件，直接修改本地文件，再次执行playbook会覆盖远端的文件。</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start service        <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=started enabled=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="handlers和notify结合使用触发条件"><a href="#handlers和notify结合使用触发条件" class="headerlink" title="handlers和notify结合使用触发条件"></a>handlers和notify结合使用触发条件</h1><p>Handlers（触发器和task是并列关系）</p><p>是task列表，这些task与前述的task并没有本质上的不同，用于当关注的资源发生变化时，才会采取一定的操作</p><p>Notify（通知）</p><p>此action可用于在每个play的最后被触发，这样可以避免多次有改变发生时每次都执行指定的操作，仅在所有的变化发生完成最后一次性地执行指定操作。在notify中列出的操作称为handler，也即notify中调用handler中定义的操作。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 192.168.182.131  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy conf file      <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=httpd.conf dest=/etc/httpd/conf/ backup=yes      <span class="token key atrule">notify</span><span class="token punctuation">:</span> restart service   <span class="token comment"># notify内容和handles中- name:内容保持一致，才会触发。</span>  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart service      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=restarted    <span class="token comment"># 这里可以多个 - name:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 192.168.182.131  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root    <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> add group nginx      <span class="token key atrule">tags</span><span class="token punctuation">:</span> user      <span class="token key atrule">user</span><span class="token punctuation">:</span> name=nginx state=present    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> add user nginx      <span class="token key atrule">user</span><span class="token punctuation">:</span> name=nginx state=present group=nginx    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Nginx      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=nginx state=present    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config      <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=/root/config.txt dest=/etc/nginx/nginx.conf      <span class="token key atrule">notify</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Restart Nginx        <span class="token punctuation">-</span> Check Nginx Process  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Restart Nginx      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=restarted enabled=yes    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Check Nginx process      <span class="token key atrule">shell</span><span class="token punctuation">:</span> killall <span class="token punctuation">-</span>0 nginx <span class="token punctuation">></span> /tmp/nginx.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Playbook中tags使用"><a href="#Playbook中tags使用" class="headerlink" title="Playbook中tags使用"></a>Playbook中tags使用</h1><p>示例: <code>httpd.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 192.168.182.131  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install httpd      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=httpd      <span class="token key atrule">tags</span><span class="token punctuation">:</span> inshttp      <span class="token comment"># tags: http</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy conf file      <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=httpd.conf dest=/etc/httpd/conf/ backup=yes      <span class="token key atrule">notify</span><span class="token punctuation">:</span> restart service    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start httpd      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=started enabled=yes      <span class="token key atrule">tags</span><span class="token punctuation">:</span> rshttp      <span class="token comment"># tags: http</span>  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart service      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=restarted<span class="token comment"># 其中多个动作可以使用相同名称的tags，即一个tags可以指定多个动作。</span><span class="token comment"># 运行时指定标签名即可，逗号为分隔符。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible 192.168.182.131 -m service -a &quot;name=httpd state=stopped&quot;</code> </p><p><code>ansible-playbook -t rshttp httpd.yml</code> or <code>ansible-playbook -t inshttp,rehttp httpd.yml</code> </p><p><code>ansible 192.168.182.131 -m shell -a &quot;ss -anptl|grep :8080&quot;</code> </p><p><code>ansible-playbook 131httpconf.yaml --list-tags</code>   # 列出yaml文件中的tags</p><h1 id="Playbook中变量使用"><a href="#Playbook中变量使用" class="headerlink" title="Playbook中变量使用"></a>Playbook中变量使用</h1><p>变量名：仅能由字母、数字和下划线组成，且只能以字母开头</p><p>变量来源：</p><ol><li><p><code>ansible setup facts</code> 远程主机的所有变量都可直接调用</p></li><li><p>在 <code>/etc/ansible/hosts</code> 中定义</p></li></ol><p>普通变量：主机组中主机单独定义，优先级高于公共变量</p><p>公共（组）变量：针对主机组中所有主机定义统一变量</p><ol start="3"><li>通过命令行指定变量，优先级最高</li></ol><p><code>ansible-playbook -e varname=value</code> </p><ol start="4"><li>在playbook中定义</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">vars:- var1: value1- var2: value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>在role中定义</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#httpd.yaml</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 192.168.182.131  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start service      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> state=started enabled=true<span class="token comment"># 安装软件 并 启动，注意包名和服务名 可能不一样。</span><span class="token comment">#app.yaml</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 192.168.182.131  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package1      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package2      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量赋值为httpd</p><p><code>ansible-playbook -e &#39;pkname=httpd&#39; httpd.yaml</code> </p><p>变量赋值为httpd,nginx，yum可以同时安装多个包</p><p><code>ansible-playbook -e &#39;pkname1=httpd,nginx&#39; bianliang.yaml</code> </p><p>多个变量赋值，用空格隔开</p><p><code>ansible-playbook -e &#39;pkname1=httpd pkname2=nginx&#39; bianliang.yaml</code> </p><p>查询安装的包</p><p><code>ansible 192.168.182.131 -m shell -a &quot;rpm -qa|grep -E &#39;httpd|nginx&#39;&quot;</code> </p><p>卸载安装的包，同样name可以将httpd和nginx同时删掉（absent=removed）</p><p><code>ansible 192.168.182.131 -m yum -a &#39;name=httpd,nginx state=absent&#39;</code> </p><p>在playbook里面定义变量</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 192.168.182.131  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">pkname1</span><span class="token punctuation">:</span> httpd    <span class="token punctuation">-</span> <span class="token key atrule">pkname2</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package1      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package2      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook app.yaml</code> </p><p>在主机清单中定义变量<code>/etc/ansible/hosts</code> </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>webs<span class="token punctuation">]</span><span class="token number">192.168</span>.1.107 <span class="token assign-left variable">na</span><span class="token operator">=</span><span class="token number">107</span><span class="token number">192.168</span>.1.108 <span class="token assign-left variable">na</span><span class="token operator">=</span><span class="token number">108</span><span class="token comment"># 其中[webs]主机清单中，在每个主机后面可以对每个主机设置单一变量，优先级高于 通用 变量</span><span class="token punctuation">[</span>webs:vars<span class="token punctuation">]</span><span class="token assign-left variable">a</span><span class="token operator">=</span>node<span class="token assign-left variable">z</span><span class="token operator">=</span>centos7.com<span class="token comment"># 对webs主机组中所有的主机设置的 通用/公共 变量</span><span class="token comment"># 一般的规则：命令行-e 配置的变量 优先级高于 上面两种定义变量方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>变量名仅能由字母、数字和下划线组成，且只能以字母开头</p><p>变量定义：<code>key=value</code> </p><p>示例：<code>http_port=80</code> </p><p>变量调用方式:</p><p>通过 <code>&#123;&#123; variable_name &#125;&#125;</code> 调用变量，且变量名前后必须有空格，有时用 <code>&quot;&#123;&#123; variable_name &#125;&#125;&quot;</code> 才生效</p><p><code>ansible-playbook -e</code> 选项指定</p><p><code>ansible-playbook test.yml -e &quot;hosts=www user=mageedu&quot;</code> </p><h2 id="直接使用系统变量-setup模块"><a href="#直接使用系统变量-setup模块" class="headerlink" title="直接使用系统变量(setup模块)"></a>直接使用系统变量(setup模块)</h2><p><code>ansible web -m setup</code>   查看setup模块中定义的变量</p><p><code>&quot;ansible_user_uid&quot;</code>   变量名类似于这样</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create user      <span class="token key atrule">user</span><span class="token punctuation">:</span> name=wang groups=wheel comment="haha wang"    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create file      <span class="token key atrule">file</span><span class="token punctuation">:</span> name=/opt/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ansible_fqdn <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>.log state=touch mode=600 owner=wang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible web -m shell -a &quot;ls /data -l&quot;</code> </p><p>在 <code>vars.yaml</code> 文件中定义变量</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">var1</span><span class="token punctuation">:</span> httpd<span class="token key atrule">var2</span><span class="token punctuation">:</span> nginx<span class="token key atrule">var3</span><span class="token punctuation">:</span> haha<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_files</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> vars.yaml  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create file      <span class="token key atrule">file</span><span class="token punctuation">:</span> name=/data/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> var3 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> state=touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook test.yaml</code>   运行playbook文件</p><p><code>ansible web -m shell -a &quot;ls /data -l&quot;</code>   查看文件是否创建成功</p><p>变量名仅能由字母、数字和下划线组成，且只能以字母开头变量定义: <code>key=value</code></p><p>示例: <code>http_port=80</code></p><p>变量调用方式：</p><p>通过<code>&#123;&#123; variable_name &#125;&#125;</code>调用变量，且变量名前后必须有空格，有时用<code>&quot;&#123;&#123; variable_name &#125;&#125;&quot;</code>才生效</p><p><code>ansible-playbook -e</code> 选项指定</p><p><code>ansible-playbook test.yml -e &quot;hosts=www user=magedu&quot;</code></p><p>示例：变量</p><p>示例：var.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root    <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> state=present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook -e pkname=httpd var.yml</code> </p><p>示例：使用setup变量</p><p>示例：var.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root    <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create log file      <span class="token key atrule">file</span><span class="token punctuation">:</span> name=/var/log/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ansible_fqdn <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> state=touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook var.yml</code></p><p>示例：变量<br>示例: var.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">username</span><span class="token punctuation">:</span> user1    <span class="token punctuation">-</span> <span class="token key atrule">groupname</span><span class="token punctuation">:</span> group1  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create group      <span class="token key atrule">group</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> groupname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> state=present    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create user       <span class="token key atrule">user</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> state=present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook var.yml</code><br><code>ansible-playbook -e &quot;username=user2 groupname=group2&quot; var2.yml</code> </p><h2 id="主机变量"><a href="#主机变量" class="headerlink" title="主机变量"></a>主机变量</h2><p>可以在inventory中定义主机时为其添加主机变量以便于在playbook中使用</p><p>示例:</p><pre class="line-numbers language-none"><code class="language-none">[websrvs]www1.magedu.com http_port&#x3D;80 maxRequestsPerChild&#x3D;808www2.magedu.com http_port&#x3D;8080 maxRequestsPerChild&#x3D;909<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="组变量"><a href="#组变量" class="headerlink" title="组变量"></a>组变量</h2><p>组变量是指赋予给指定组内所有主机上的在playbook中可用的变量示例：</p><pre class="line-numbers language-none"><code class="language-none">[websrvs]www1.magedu.comwww2.magedu.com[websrvs:vars]ntp_server&#x3D;ntp.magedu.comnfs_server&#x3D;nfs.magedu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h2><pre class="line-numbers language-none"><code class="language-none">[websrvs]192.168.99.101 http_port&#x3D;8080 hname&#x3D;www1192.168.99.102 http_port&#x3D;80 hname&#x3D;www2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="公共（组）变量"><a href="#公共（组）变量" class="headerlink" title="公共（组）变量"></a>公共（组）变量</h2><pre class="line-numbers language-none"><code class="language-none">[websvrs:vars]http_port&#x3D;808mark&#x3D; &quot;_&quot;[websrvs]192.168.99.101 http_port&#x3D;8080 hname&#x3D;www1192.168.99.102 http_port&#x3D;80 hname&#x3D;www2ansible websvrs -m hostname -a &#39;name&#x3D;&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令行指定变量："><a href="#命令行指定变量：" class="headerlink" title="命令行指定变量："></a>命令行指定变量：</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ansible websvrs -e <span class="token assign-left variable">http_port</span><span class="token operator">=</span><span class="token number">8000</span> -m <span class="token function">hostname</span> -a <span class="token string">'name=&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用变量文件"><a href="#使用变量文件" class="headerlink" title="使用变量文件"></a>使用变量文件</h2><p>cat vars.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">var1</span><span class="token punctuation">:</span> httpd<span class="token key atrule">var2</span><span class="token punctuation">:</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>cat var.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars_files</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> vars.yml      <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create httpd log      <span class="token key atrule">file</span><span class="token punctuation">:</span> name=/app/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> var1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>.log state=touch    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create nginx log       <span class="token key atrule">file</span><span class="token punctuation">:</span> name=/app/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> var2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>.log state=touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板<code>templates</code>不能在命令行使用</p><p>文本文件，嵌套有脚本（使用模板编程语言编写)</p><p>Jinja2语言，使用字面量，有下面形式</p><p>字符串：使用单引号或双引号</p><p>数字：整数，浮点数</p><p>列表：<code>[item1, item2,...]</code></p><p>元组：<code>(item1, item2,...)</code></p><p>字典：<code>&#123;key1:value1, key2:value2,..&#125;</code></p><p>布尔型：<code>true/false</code></p><p>算术运算：<code>+, -, *, /, //, %, **</code></p><p>比较操作：<code>==, !=, &gt;, &gt;=, &lt;, &lt;=</code></p><p>逻辑运算：<code>and, or, not</code></p><p>流表达式：<code>For If When</code></p><h1 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h1><p>templates功能：根据模块文件动态生成对应的配置文件</p><p>templates文件必须存放于templates目录下，且命名为.j2结尾</p><p>yaml/yml文件需和templates目录平级，目录结构如下：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;|--j2test.yaml|--templates       |--nginx.conf.j2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Templates示例"><a href="#Templates示例" class="headerlink" title="Templates示例"></a>Templates示例</h2><p>示例：利用templates同步nginx配置文件准备templates/nginx.conf.j2文件</p><p>在ansible目录新建templates文件夹，并将 <code>/etc/nginx/nginx.conf</code> 复制到 <code>templates/nginx.conf.j2</code></p><p><code>cp /etc/nginx/nginx.conf templates/nginx.conf.j2</code> </p><p>编辑<code>j2test.yaml</code>文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=nginx    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy templates      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=nginx.conf.j2 dest=/etc/nginx/nginx.conf<span class="token comment">#      notify: restart service</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start service      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=started enabled=yes<span class="token comment">#  handlers:</span><span class="token comment">#    - name: restart service</span><span class="token comment">#      service: name=nginx state=restarted</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查执行playbook文件，检查nginx是否运行</p><p><code>ansible-playbook -C j2test.yaml</code></p><p><code>ansible-playbook j2test.yaml</code></p><p><code>ansible web -m shell -a &quot;ps aux|grep nginx&quot;</code></p><p>修改 <code>templates/nginx.conf.j2</code> 文件为 <code>worker_processes &#123;&#123; ansible_processor_vcpus*2 &#125;&#125;;</code> ，将work线程修改为CPU核心数的2倍。同时将<code>j2test.yaml</code>文件中的notify-handlers注释解开。</p><p>运行playbook，查看work线程是否增加2倍。</p><p><code>ansible-playbook j2test.yaml</code></p><p><code>ansible web -m shell -a &quot;ps aux|grep nginx&quot;</code></p><h1 id="when"><a href="#when" class="headerlink" title="when"></a>when</h1><p>条件测试：如果需要根据变量、facts或此前任务的执行结果来做为某task执行与否的前提时要用到条件测试，通过when语句实现，在task中使用，jinja2的语法格式</p><h2 id="when语句"><a href="#when语句" class="headerlink" title="when语句"></a>when语句</h2><p>在task后添加when子句即可使用条件测试；when语句支持Jinja2表达式语法</p><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"shutdown RedHat flavored systems"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> /sbin/shutdown <span class="token punctuation">-</span>h now    <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_os_family == "RedHat"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ansible变量的优先级 <code>-e &#123;&#123; var &#125;&#125;</code> &gt; <code>playbook</code> &gt; <code>hosts &#123;&#123; host_vars &#125;&#125;</code> &gt; <code>hosts &#123;&#123; group_var &#125;&#125;</code></p><p><code>ansible_distribution_version</code>   版本号</p><p><code>ansible_distribution_major_version</code>   大版本号</p><p><code>ansible_processor_vcpus</code>   本机的cpu核心数</p><p>示例：when条件判断</p><p> <code>cat j2test.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web2  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package      <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=nginx    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy templates for centos8      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=nginx.conf8.j2 dest=/etc/nginx/nginx.conf      <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == "8"      <span class="token key atrule">notify</span><span class="token punctuation">:</span> restart service    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy templates for centos7      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=nginx.conf7.j2 dest=/etc/nginx/nginx.conf      <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == "7"      <span class="token key atrule">notify</span><span class="token punctuation">:</span> restart service    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start service      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=started enabled=yes  <span class="token key atrule">handlers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart service      <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat templates/nginx.conf7.j2 | grep -Ev &quot;#|^$&quot;</code></p><pre class="line-numbers language-jinja2" data-language="jinja2"><code class="language-jinja2">user daemon;worker_processes &#123;&#123; ansible_processor_vcpus+4 &#125;&#125;;error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;pid &#x2F;run&#x2F;nginx.pid;include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;events &#123;    worker_connections 1024;&#125;http &#123;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type        application&#x2F;octet-stream;    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;    server &#123;        listen       &#123;&#123; http_port &#125;&#125; default_server;        listen       [::]:&#123;&#123; http_port &#125;&#125; default_server;        server_name  _;        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;        location &#x2F; &#123;        &#125;        error_page 404 &#x2F;404.html;            location &#x3D; &#x2F;40x.html &#123;        &#125;        error_page 500 502 503 504 &#x2F;50x.html;            location &#x3D; &#x2F;50x.html &#123;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat templates/nginx.conf8.j2 | grep -Ev &quot;#|^$&quot;</code></p><pre class="line-numbers language-jinja2" data-language="jinja2"><code class="language-jinja2">user bin;worker_processes &#123;&#123; ansible_processor_vcpus*2 &#125;&#125;;error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;pid &#x2F;run&#x2F;nginx.pid;include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;events &#123;    worker_connections 1024;&#125;http &#123;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type        application&#x2F;octet-stream;    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;    server &#123;        listen       &#123;&#123; http_port &#125;&#125; default_server;        listen       [::]:&#123;&#123; http_port &#125;&#125; default_server;        server_name  _;        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;        location &#x2F; &#123;        &#125;        error_page 404 &#x2F;404.html;            location &#x3D; &#x2F;40x.html &#123;        &#125;        error_page 500 502 503 504 &#x2F;50x.html;            location &#x3D; &#x2F;50x.html &#123;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代：with-items"><a href="#迭代：with-items" class="headerlink" title="迭代：with_items"></a>迭代：with_items</h2><p>迭代：当有需要重复性执行的任务时，可以使用迭代机制&gt;对迭代项的引用，固定变量名为”item”</p><p>要在task中使用with_items给定要迭代的元素列表</p><blockquote><p>列表格式：</p><blockquote><p>字符<br>串字典</p></blockquote></blockquote><p>示例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> add several users  <span class="token key atrule">user</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> state=present groups=wheel  <span class="token key atrule">with_items</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> testuser1    <span class="token punctuation">-</span> testuser2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面语句的功能等同于下面的语句：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> add user testuser1  <span class="token key atrule">user</span><span class="token punctuation">:</span> name=testuser1 state=present groups=wheel<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> add user testuser2  <span class="token key atrule">user</span><span class="token punctuation">:</span> name=testuser2 state=present groups=wheel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：迭代嵌套子变量</p><p><code>cat user2.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web2  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create some groups      <span class="token key atrule">group</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == "7"      <span class="token key atrule">with_items</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> g1        <span class="token punctuation">-</span> g2        <span class="token punctuation">-</span> g3    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create some users      <span class="token key atrule">user</span><span class="token punctuation">:</span> name=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item.name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> group=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item.group <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">with_items</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'user1'</span><span class="token punctuation">,</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">'g1'</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'user2'</span><span class="token punctuation">,</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">'g2'</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'user3'</span><span class="token punctuation">,</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">'g3'</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Playbook中template-for-if"><a href="#Playbook中template-for-if" class="headerlink" title="Playbook中template for if"></a>Playbook中template for if</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&#123;</span>% for vhost in nginx_vhosts %<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>listen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.listen <span class="token punctuation">|</span> default('80 default_server') <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;<span class="token punctuation">&#123;</span>% if vhost.server_name is defined %<span class="token punctuation">&#125;</span>server_name <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.server_name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;<span class="token punctuation">&#123;</span>% endif %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% if vhost.root is defined %<span class="token punctuation">&#125;</span>root <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.root <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;<span class="token punctuation">&#123;</span>% endif %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>示例</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">// temnginx.yml     // templates/nginx.conf.j2<span class="token punctuation">---</span>                 <span class="token punctuation">&#123;</span>% for vhost in nginx_vhosts %<span class="token punctuation">&#125;</span>                    server <span class="token punctuation">&#123;</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> testweb    listen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.listen <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root   <span class="token punctuation">&#125;</span><span class="token key atrule">vars</span><span class="token punctuation">:</span>               <span class="token punctuation">&#123;</span>% endfor %<span class="token punctuation">&#125;</span>  <span class="token key atrule">nginx_vhosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">listen</span><span class="token punctuation">:</span> 8080  // 生成的结果                    server <span class="token punctuation">&#123;</span>                      listen 8080                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><p><code>cat for.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token number">81</span>      <span class="token punctuation">-</span> <span class="token number">82</span>      <span class="token punctuation">-</span> <span class="token number">83</span>        <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy conf      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=for1.conf.j2 dest=/data/for1.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat templates/for1.conf.j2</code></p><pre class="line-numbers language-jinja2" data-language="jinja2"><code class="language-jinja2">&#123;% for port in ports %&#125;server&#123;    listen &#123;&#123; port &#125;&#125;&#125;&#123;% endfor %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook for.yaml</code></p><p><code>ansible web -m shell -a &#39;cat /data/for1.conf&#39;</code></p><p>键值对的方式组成列表</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">listen_port</span><span class="token punctuation">:</span> <span class="token number">81</span>      <span class="token punctuation">-</span> <span class="token key atrule">listen_port</span><span class="token punctuation">:</span> <span class="token number">82</span>      <span class="token punctuation">-</span> <span class="token key atrule">listen_port</span><span class="token punctuation">:</span> <span class="token number">83</span>        <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy conf      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=for1.conf.j2 dest=/data/for1.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jinja2" data-language="jinja2"><code class="language-jinja2">&#123;% for port in ports %&#125;server&#123;    listen &#123;&#123; port.listen_port &#125;&#125;&#125;&#123;% endfor %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的效果是一样的，验证时记得删除原来远程主机生成的文件。</p><p>在列表中定义另一个列表，而另一个列表定义了很多键值对：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">web1</span><span class="token punctuation">:</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> web1.node.com        <span class="token key atrule">rootdir</span><span class="token punctuation">:</span> /data/website1      <span class="token punctuation">-</span> <span class="token key atrule">web2</span><span class="token punctuation">:</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">82</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> web2.node.com        <span class="token key atrule">rootdir</span><span class="token punctuation">:</span> /data/website2      <span class="token punctuation">-</span> <span class="token key atrule">web3</span><span class="token punctuation">:</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">83</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> web3.node.com        <span class="token key atrule">rootdir</span><span class="token punctuation">:</span> /data/website3        <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy conf      <span class="token key atrule">template</span><span class="token punctuation">:</span> src=for1.conf.j2 dest=/data/for1.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jinja2" data-language="jinja2"><code class="language-jinja2">&#123;% for p in ports %&#125;server&#123;    listen &#123;&#123; p.port &#125;&#125;&lt;!-- &#123;% if p.name is defined %&#125; --&gt;    servername &#123;&#123; p.name &#125;&#125;&lt;!-- &#123;% endif %&#125; --&gt;    documentroot &#123;&#123; p.rootdir &#125;&#125;&#125;&#123;% endfor %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IF判断，将上面的j2文件注释解开，并注释yaml文件的web1和web3的name配置，执行结果可以看到只有第二个有servername，其它两个没有。如果在j2文件中，不加if判断，执行ansible-playbook会报错。</p><h1 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h1><p>ansilbe自1.2版本引入的新特性，用于层次性、结构化地组织playbook。roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲，roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中</p><p>复杂场景：建议使用roles，代码复用度高</p><blockquote><p>变更指定主机或主机组<br>如命名不规范维护和传承成本大<br>某些功能需多个Playbook，通过includes即可实现</p></blockquote><p>角色(roles)：角色集合</p><pre class="line-numbers language-none"><code class="language-none">roles&#x2F;  mysql&#x2F;  httpd&#x2F;  nginx&#x2F;  memcached&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/wujiops/jpeg/ansible/1.jpg"></p><h2 id="roles目录结构"><a href="#roles目录结构" class="headerlink" title="roles目录结构"></a>roles目录结构</h2><p>每个角色，以特定的层级目录结构进行组织</p><p>roles目录结构：</p><pre class="line-numbers language-none"><code class="language-none">playbook.ymlroles&#x2F;  project&#x2F;    tasks&#x2F;    files&#x2F;    vars&#x2F;       不常用    default&#x2F;    不常用    templates&#x2F;    handlers&#x2F;    meta&#x2F;       不常用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Roles各目录作用"><a href="#Roles各目录作用" class="headerlink" title="Roles各目录作用"></a>Roles各目录作用</h2><p><code>/roles/project/</code>：项目名称（<code>/roles/nginx/</code>、<code>/roles/httpd/</code>等），有以下子目录</p><p><code>files/</code>：存放由copy或script模块等调用的文件</p><p><code>templates/</code>：template模块查找所需要模板文件的目录</p><p><code>tasks/</code>：定义task，role的基本元素，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</p><p><code>handlers/</code>：至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</p><p><code>vars/</code>：定义变量，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</p><p><code>meta/</code>：定义当前角色的特殊设定及其依赖关系，至少应该包含一个名为main.yml的文件，其它文件需在此文件中通过include进行包含</p><p><code>default/</code>：设定默认变量时使用此目录中的main.yml文件</p><h2 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a>创建role</h2><p>创建role的步骤</p><p>(1) 创建以roles命名的目录</p><p>(2) 在roles目录中分别创建以各角色名称命名的目录，如webservers等</p><p>(3) 在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建</p><p>(4) 在playbook文件中，调用各角色</p><p>针对大型项目使用roles进行编排</p><p>简单示例：</p><pre class="line-numbers language-none"><code class="language-none">[root@node ansible]# tree .├── nginx_role.yaml└── roles    └── nginx        ├── tasks        │   ├── group.yaml        │   ├── main.yaml        │   ├── restart.yaml        │   ├── start.yaml        │   ├── templ.yaml        │   ├── user.yaml        │   └── yum.yaml        └── templates            └── nginx.conf.j2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>playbook调用角色，文件内容：</p><p><code>nginx_role.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web2  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>group.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create group  <span class="token key atrule">group</span><span class="token punctuation">:</span> name=nginx gid=80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>user.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create user   <span class="token key atrule">user</span><span class="token punctuation">:</span> name=nginx uid=80 group=nginx system=yes shell=/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>yum.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install package  <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=nginx <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>templ.yaml </code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy conf  <span class="token key atrule">template</span><span class="token punctuation">:</span> src=nginx.conf.j2 dest=/etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>start.yaml </code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start nginx  <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=started enabled=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>restart.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart nginx  <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>main.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> group.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> user.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> yum.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> templ.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> start.yaml<span class="token comment">#- include: restart.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat templates/nginx.conf.j2 | grep -Ev &quot;^[[:space:]]*#|^$&quot;</code></p><pre class="line-numbers language-jinja2" data-language="jinja2"><code class="language-jinja2">user nginx;worker_processes &#123;&#123; ansible_processor_vcpus+2 &#125;&#125;;error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;pid &#x2F;run&#x2F;nginx.pid;include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;events &#123;    worker_connections 1024;&#125;http &#123;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type        application&#x2F;octet-stream;    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;    server &#123;        listen       80 default_server;        listen       [::]:80 default_server;        server_name  _;        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;        location &#x2F; &#123;        &#125;        error_page 404 &#x2F;404.html;            location &#x3D; &#x2F;40x.html &#123;        &#125;        error_page 500 502 503 504 &#x2F;50x.html;            location &#x3D; &#x2F;50x.html &#123;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat /etc/ansible/hosts | grep -Ev &quot;^[[:space:]]*#|^$&quot;</code></p><pre class="line-numbers language-none"><code class="language-none">[alls]192.168.1.2 hostnm&#x3D;node.1.2192.168.1.3 hostnm&#x3D;node.1.3192.168.1.4 hostnm&#x3D;node.1.4192.168.1.5 hostnm&#x3D;node.1.5192.168.1.6 hostnm&#x3D;node.1.6192.168.1.7 hostnm&#x3D;node.1.7[local]192.168.1.2[app]192.168.1.[3:6][web]192.168.1.5 http_port&#x3D;5555192.168.1.6 http_port&#x3D;6666[web2]192.168.1.7 http_port&#x3D;7777192.168.1.6 http_port&#x3D;6666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行playbook脚本，并验证：</p><p><code>ansible-playbook nginx_role.yaml</code></p><p><code>ansible web2 -m shell -a &#39;ss -anptl | grep nginx&#39;</code></p><p><code>ansible web2 -m shell -a &#39;ps aux | grep nginx&#39;</code></p><p><code>ansible web2 -m shell -a &#39;getent passwd | grep nginx&#39;</code></p><p><code>ansible web2 -m shell -a &#39;getent group | grep nginx&#39;</code></p><p>示例2：</p><p>同时执行多个roles</p><p><code>http_role.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web2  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat roles/httpd/files/httpd.conf | grep -Ev &quot;^$|^[[:space:]]*#&quot;</code></p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">ServerRoot &quot;&#x2F;etc&#x2F;httpd&quot;Listen 80Include conf.modules.d&#x2F;*.confUser apacheGroup apacheServerAdmin root@localhost&lt;Directory &#x2F;&gt;    AllowOverride none    Require all denied&lt;&#x2F;Directory&gt;DocumentRoot &quot;&#x2F;var&#x2F;www&#x2F;html&quot;&lt;Directory &quot;&#x2F;var&#x2F;www&quot;&gt;    AllowOverride None    Require all granted&lt;&#x2F;Directory&gt;&lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&quot;&gt;    Options Indexes FollowSymLinks    AllowOverride None    Require all granted&lt;&#x2F;Directory&gt;&lt;IfModule dir_module&gt;    DirectoryIndex index.html&lt;&#x2F;IfModule&gt;&lt;Files &quot;.ht*&quot;&gt;    Require all denied&lt;&#x2F;Files&gt;ErrorLog &quot;logs&#x2F;error_log&quot;LogLevel warn&lt;IfModule log_config_module&gt;    LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined    LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; common    &lt;IfModule logio_module&gt;      LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot; %I %O&quot; combinedio    &lt;&#x2F;IfModule&gt;    CustomLog &quot;logs&#x2F;access_log&quot; combined&lt;&#x2F;IfModule&gt;&lt;IfModule alias_module&gt;    ScriptAlias &#x2F;cgi-bin&#x2F; &quot;&#x2F;var&#x2F;www&#x2F;cgi-bin&#x2F;&quot;&lt;&#x2F;IfModule&gt;&lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;cgi-bin&quot;&gt;    AllowOverride None    Options None    Require all granted&lt;&#x2F;Directory&gt;&lt;IfModule mime_module&gt;    TypesConfig &#x2F;etc&#x2F;mime.types    AddType application&#x2F;x-compress .Z    AddType application&#x2F;x-gzip .gz .tgz    AddType text&#x2F;html .shtml    AddOutputFilter INCLUDES .shtml&lt;&#x2F;IfModule&gt;AddDefaultCharset UTF-8&lt;IfModule mime_magic_module&gt;    MIMEMagicFile conf&#x2F;magic&lt;&#x2F;IfModule&gt;EnableSendfile onIncludeOptional conf.d&#x2F;*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat roles/httpd/tasks/copy.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy file  <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=httpd.conf dest=/data owner=apache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>cat roles/httpd/tasks/main.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> user.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> copy.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>cat roles/httpd/tasks/user.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create user   <span class="token key atrule">user</span><span class="token punctuation">:</span> name=apache system=yes shell=/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>cat some_reole.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web2  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> httpd    <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证(清除原来playbook创建的文件😊)：</p><p><code>ansible-playbook some_reole.yaml</code></p><p>示例3：</p><p>一个role调用另一个role中的tasks，nginx调用httpd的copy.yaml</p><ol><li>修改nginx的main.yaml，增加httpd的copy.yaml文件</li></ol><p><code>cat roles/nginx/tasks/main.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> group.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> user.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> yum.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> templ.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> start.yaml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> roles/httpd/tasks/copy.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如果是通用的yaml文件，公共的yaml文件中的一些路径要写绝对路径，所以修改httpd的copy.yaml文件</li></ol><p><code>cat roles/httpd/tasks/copy.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> copy file  <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=/etc/httpd/conf/httpd.conf dest=/data owner=apache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例4：</p><p>加标签（标签可以是一个列表）：</p><p><code>cp -r roles/nginx/ roles/app</code></p><p><code>cat some_reole.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web2  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> httpd<span class="token punctuation">,</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'web'</span><span class="token punctuation">,</span><span class="token string">'httpd'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> nginx<span class="token punctuation">,</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'web'</span><span class="token punctuation">,</span><span class="token string">'nginx'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> app<span class="token punctuation">,</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token string">"app"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证：</p><p><code>ansible-playbook -t web some_reole.yaml</code></p><p><code>ansible-playbook -t httpd some_reole.yaml</code></p><p><code>ansible-playbook -t app some_reole.yaml</code></p><p>示例5：</p><p>when语句：</p><p><code>cat some_reole.yaml</code> </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> web2  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> httpd<span class="token punctuation">,</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'web'</span><span class="token punctuation">,</span><span class="token string">'httpd'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> nginx<span class="token punctuation">,</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'web'</span><span class="token punctuation">,</span><span class="token string">'nginx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == "7" <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> app<span class="token punctuation">,</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token string">"app"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ansible-playbook some_reole.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Linux Create User and Upload User Public keys  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> test  <span class="token comment">#remote_user: xxxx</span>  <span class="token comment">#sudo: yes</span>  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">user_1</span><span class="token punctuation">:</span> xiaoxiaoleo  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Make sure we have a 'wheel' group      <span class="token key atrule">group</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> wheel        <span class="token key atrule">state</span><span class="token punctuation">:</span> present    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Allow 'wheel' group to have passwordless sudo      <span class="token key atrule">lineinfile</span><span class="token punctuation">:</span>        <span class="token key atrule">dest</span><span class="token punctuation">:</span> /etc/sudoers        <span class="token key atrule">state</span><span class="token punctuation">:</span> present        <span class="token key atrule">regexp</span><span class="token punctuation">:</span> <span class="token string">'^%wheel'</span>        <span class="token key atrule">line</span><span class="token punctuation">:</span> <span class="token string">'%wheel ALL=(ALL) NOPASSWD: ALL'</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Create user <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">user</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; user_1 &#125;&#125;"</span>        <span class="token key atrule">shell</span><span class="token punctuation">:</span> /bin/bash        <span class="token key atrule">groups</span><span class="token punctuation">:</span> wheel        <span class="token key atrule">createhome</span><span class="token punctuation">:</span> yes        <span class="token key atrule">home</span><span class="token punctuation">:</span> /home/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">state</span><span class="token punctuation">:</span> present     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create key directory      <span class="token key atrule">action</span><span class="token punctuation">:</span> file path=/home/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/.ssh/ state=directory  owner=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> group=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> mode=0700     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create key file      <span class="token key atrule">action</span><span class="token punctuation">:</span> file path=/home/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/.ssh/authorized_keys state=touch  owner=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> group=<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user_1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> mode=0600            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set authorized key took from file      <span class="token key atrule">authorized_key</span><span class="token punctuation">:</span>        <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; user_1 &#125;&#125;"</span>        <span class="token key atrule">state</span><span class="token punctuation">:</span> present        <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; lookup('file', '/tmp/pubkey/id_rsa.pub') &#125;&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux杂记</title>
      <link href="/posts/3c4c.html"/>
      <url>/posts/3c4c.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> -lh --max-depth<span class="token operator">=</span><span class="token number">1</span>   <span class="token comment"># 当前文件夹下的各目录大小</span><span class="token function">du</span> -sh   <span class="token comment"># 当前文件夹大小</span><span class="token function">df</span> -h   <span class="token comment"># 各挂载点大小</span><span class="token comment"># selinux没关nginx端口只能选择80 or 8080，修改其他端口</span>setsebool -P httpd_can_network_connect <span class="token number">1</span>   <span class="token comment"># selinux没关执行这个</span>semanage port -a -t http_port_t -p tcp <span class="token number">8090</span>   <span class="token comment"># 加入端口</span>semanage port -l <span class="token operator">|</span> <span class="token function">grep</span> http_port_t   <span class="token comment"># 查看被selinux放开的http端口</span><span class="token comment"># 没有网卡配置文件</span><span class="token function">cat</span> <span class="token operator">></span> /etc/sysconfig/network-scripts/ifcfg-eth1<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth1<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp<span class="token comment"># Ctrl + D 保存退出</span>systenctl restart network   <span class="token comment"># 重启网络</span>systenctl restart NetworkManager   <span class="token comment"># 重启网络服务</span><span class="token function">usermod</span> -G wheel roxn   <span class="token comment"># 将用户加入wheel组，用于sudo免密执行命令</span><span class="token comment"># 根据服务的名称查询端口</span>ss -anptl<span class="token operator">|</span><span class="token function">grep</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"roxn.*.jar$"</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab迁移</title>
      <link href="/posts/b33f.html"/>
      <url>/posts/b33f.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>概述：<code>centos-7.7.1908</code> + <code>gitlab-ce-12.6.1</code> 迁移到 <code>centos-8.2.2004</code> + <code>gitlab-ce-13.3.6</code><br>PS：有博客提示需从<code>gitlab-ce-12.6.1</code>升级到<code>gitlab-ce-12.10.14</code>，再升级到<code>gitlab-ce-13.3.6</code><br>原因不能夸大版本升级，之能先升级到当前大版本的最后一个版本，之后依次升级到下一个大版本的最后一个版本，最后升级到最新的大版本的latest。</p><p>备份的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份旧服务器上的文件</span>/etc/gitlab/gitlab.rb   <span class="token comment"># 配置文件须备份</span>/var/opt/gitlab/nginx/conf   <span class="token comment"># nginx 配置目录</span>/etc/postfix/main.cf   <span class="token comment"># postfix 邮件配置备份</span>gitlab-rake gitlab:backup:create   <span class="token comment"># 备份仓库、用户等数据tar包在/var/opt/gitlab/backups</span><span class="token comment"># 拷贝到新服务器gitlab.bak</span><span class="token function">scp</span> * gitlab.bak:/backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搭建环境，安装gitlab-ce</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 仓库配置</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/yum.repos.d/gitlab-ce.repo <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[gitlab-ce]name=Gitlab CE Repositorybaseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el\<span class="token variable">$releasever</span>/gpgcheck=0enabled=1EOF</span>yum list gitlab-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r   <span class="token comment"># 当前yum仓库可安装gitlab-ce的版本</span>yum <span class="token function">install</span> gitlab-ce -y   <span class="token comment"># 安装</span><span class="token function">cat</span> /etc/gitlab/gitlab.rb <span class="token operator">|</span> <span class="token function">grep</span> -Ev <span class="token string">"^$|^#"</span>   <span class="token comment"># 对比两个配置文件1</span><span class="token function">cat</span> /backup/gitlab.rb   <span class="token comment"># 对比两个配置文件2</span>gitlab-ctl reconfigure   <span class="token comment"># 配置不启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禅道迁移</title>
      <link href="/posts/cd15.html"/>
      <url>/posts/cd15.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>zbox一键安装包只能安装在<code>/opt</code>目录下。</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> zbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理gitlab</title>
      <link href="/posts/42ea.html"/>
      <url>/posts/42ea.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>环境介绍：gitlab版本12.6.1，Linux系统centos7.7.1908，使用yum安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/opt/gitlab/gitlab-rails/etc/<span class="token function">vi</span> gitlab.yml<span class="token function">vi</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/nginx/conf/gitlab-http.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="gitlab-yml"><a href="#gitlab-yml" class="headerlink" title="gitlab.yml"></a>gitlab.yml</h1><p>在<code>gitlab.yml</code>配置文件中第10行<code>## GitLab settings</code>、555行<code>## GitLab Shell settings</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## GitLab settings</span>gitlab:  host: <span class="token number">10</span>******23   <span class="token comment"># git clone 的IP</span>  port: <span class="token number">82</span>   <span class="token comment"># http端口</span><span class="token comment">## GitLab Shell settings</span>gitlab_shell:  path: /opt/gitlab/embedded/service/gitlab-shell/  hooks_path: /opt/gitlab/embedded/service/gitlab-shell/hooks/  authorized_keys_file: /var/opt/gitlab/.ssh/authorized_keys  <span class="token comment"># Git over HTTP</span>  upload_pack:  receive_pack:  <span class="token comment"># If you use non-standard ssh port you need to specify it</span>  ssh_port: <span class="token number">3</span>****   <span class="token comment"># ssh端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="gitlab自带nginx"><a href="#gitlab自带nginx" class="headerlink" title="gitlab自带nginx"></a>gitlab自带nginx</h1><p>在gitlab自带nginx配置文件<code>gitlab-http.conf</code>中，第30行<code>configuration</code>。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server &#123;  listen *:82;  server_name dev.******.com;   # 配置域名访问  server_tokens off; ## Don&#39;t s  ## Increase this if you want   ## Or if you want to accept l  client_max_body_size 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h1><p>nginx反向代理设置<code>/etc/nginx/conf.d/gitlab.conf</code>。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">upstream  gitlab&#123;  # 7.x 版本在此位置  # server unix:&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;gitlab-rails&#x2F;tmp&#x2F;sockets&#x2F;gitlab.socket;  # 8.0 位置  server unix:&#x2F;&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;gitlab-rails&#x2F;sockets&#x2F;gitlab.socket;&#125;server &#123;    listen      80;    server_name dev.****.com;   # 访问域名    location &#x2F; &#123;        # 这个大小的设置非常重要，如果 git 版本库里面有大文件，设置的太小，文件push 会失败，根据情况调整        client_max_body_size 50m;        proxy_redirect off;        #以下确保 gitlab中项目的 url 是域名而不是 http:&#x2F;&#x2F;git，不可缺少        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        # 反向代理到 gitlab 内置的 nginx        proxy_pass http:&#x2F;&#x2F;dev.****.com:82;   # gitlab自带nginx地址        index index.html index.htm;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="hosts域名映射"><a href="#hosts域名映射" class="headerlink" title="hosts域名映射"></a>hosts域名映射</h1><p>本地主机直接将域名解析到内网IP<code>/etc/hosts</code><br><code>172.17.**** master dev.****.com</code>，配置内网hosts域名映射。  </p><h1 id="重启，稍等一会验证"><a href="#重启，稍等一会验证" class="headerlink" title="重启，稍等一会验证"></a>重启，稍等一会验证</h1><p><code>gitlab-ctl restart</code>，慎重执行<code># gitlab-ctl reconfigure</code><br><img src="/medias/drawing-bed/git/2.jpg"></p><h1 id="若修改失败参考"><a href="#若修改失败参考" class="headerlink" title="若修改失败参考"></a>若修改失败参考</h1><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">cat &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb|grep -Ev &quot;^$|^#&quot;external_url &#39;http:&#x2F;&#x2F;dev.******.com&#39;gitlab_rails[&#39;smtp_enable&#39;] &#x3D; truegitlab_rails[&#39;smtp_address&#39;] &#x3D; &quot;smtp.exmail.qq.com&quot;gitlab_rails[&#39;smtp_port&#39;] &#x3D; 465gitlab_rails[&#39;smtp_user_name&#39;] &#x3D; &quot;dev@****.com&quot;gitlab_rails[&#39;smtp_password&#39;] &#x3D; &quot;****&quot;gitlab_rails[&#39;smtp_domain&#39;] &#x3D; &quot;smtp.exmail.qq.com&quot;gitlab_rails[&#39;smtp_authentication&#39;] &#x3D; &quot;login&quot;gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] &#x3D; truegitlab_rails[&#39;smtp_tls&#39;] &#x3D; truegitlab_rails[&#39;gitlab_email_from&#39;] &#x3D; &#39;dev@****.com&#39;gitlab_rails[&#39;backup_path&#39;] &#x3D; &quot;&#x2F;mnt&#x2F;gitbak&quot;gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] &#x3D; ***nginx[&#39;listen_port&#39;] &#x3D; 82<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>gitlab-ctl stop</code> <code>gitlab-ctl reconfigure</code> <code>gitlab-ctl start</code></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> nginx </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>devops故障排错</title>
      <link href="/posts/f80c.html"/>
      <url>/posts/f80c.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --> <h1 id="故障排除的最佳实践"><a href="#故障排除的最佳实践" class="headerlink" title="故障排除的最佳实践"></a>故障排除的最佳实践</h1><h2 id="1-1-划分问题空间"><a href="#1-1-划分问题空间" class="headerlink" title="1.1 划分问题空间"></a>1.1 划分问题空间</h2><p>首先玩一个游戏1~100中间随机一个数字73。让玩家去猜这个数字。<br>第一类人：50，75，62，68，71，73。<br>第二类人：1，2，3…73。<br>第三类人：73。…。23，1，59…73。<br>你可以看到，找到正确答案只猜了6次。如果从1开始递加需要猜73次。如果随机猜有可能要遍历所有的数字才能找到答案。<br>&emsp;&emsp;这个方法适用于所有的故障排除。面对问题，一些人从可能产生问题的原因列表的底层开始，一步一步解决问题，另外一些人选择随机测试直到幸运地找到原因。一位优秀的故障排除人员选择的每一项测试的结果都会排除一类原因，而不是一个原因，将故障分而治之。划分问题空间之后，即使一项测试不能找到故障的根本原因，测试结果最少也能排除掉几个可能的原因。<br>&emsp;&emsp;例如，如果我尝试用浏览器访问一个网站，但是请求超时，此时我想测试是网站的原因还是我的网络连接有问题，但我不会立即去查看网线是否没有插好，而是访问一两个通常都很稳定的其他<a href="www.baidu.com">网站</a>。如果别的网站能正常加载，就可以确定我的网络连接正常，从而省去一系列本地网络测试。<br>&emsp;&emsp;当你和团队中的其他人协作排除故障时，也会在团队成员之间划分问题空间，没有比跟踪一个问题的时候发现有人也在做相同的测试更坏的事情了。当你在团队环境下着手解决一个问题时，要给每个人分配不同的测试并保证一旦某个人排除了一个原因，能及时把结果传达给其他人。</p><h2 id="1-2-协同工作时的良好沟通"><a href="#1-2-协同工作时的良好沟通" class="headerlink" title="1.2 协同工作时的良好沟通"></a>1.2 协同工作时的良好沟通</h2><p>&emsp;&emsp;建立良好的沟通方法是团队排除故障的最大挑战之一。如果没有良好的沟通，两个人不会意识到正在解决相同的问题，一个人会重复排查别人已经检查过的问题。更糟糕的是，人们误解了说明，让问题变得愈加严重。<br>直接对话：运团队人员通常坐在一个区域，方便沟通。<br>电子邮件：不需要立即解决的问题可以选择电子邮件<br>QQ、钉钉、微信、等群聊天软件：优点个人之间可以私密聊天，群里面可以共享信息。可以保留聊天记录。<br>其他的备用方案：电话会议等。</p><h2 id="1-3-首选快速、简单的测试，而不是缓慢、复杂的测试"><a href="#1-3-首选快速、简单的测试，而不是缓慢、复杂的测试" class="headerlink" title="1.3 首选快速、简单的测试，而不是缓慢、复杂的测试"></a>1.3 首选快速、简单的测试，而不是缓慢、复杂的测试</h2><p>&emsp;&emsp;如果每个问题都有一系列井然有序的测试集合，那就太棒了。然而，通常你会遇到各种各样的原因，这些原因看起来都像是问题的根源所在。你很难知道应该先尝试哪个，一个好的原则是：当你可以执行两个一样好的测试的时候，首选快速或简单的，而不是缓慢或复杂的。<br>&emsp;&emsp;如果你们团队的宕机时间是用金钱衡量的，那么尽可能快地定位问题的原因非常重要。例如，当一个Web服务器宕机的时候，有很多不同的方法可以解决这个问题。但是，如果你从ping服务器的方法开始尝试，那么就是在使用一种相当快的方法断定服务器是否连通了网络。如果无法ping通服务器，你就可以着手处理如何让服务器恢复网络连接。若是能ping通，则可以进行更进一步的故障排除过程，损失的只不过是几秒钟时间而已。<br>&emsp;&emsp;在团队合作的情景下有个优势是可以很容易同时进行多个测试。在这种情况下，让一个员工做缓慢、复杂的测试而其他人专注更短、更简单的测试是合理的。只要团队成员之间具备良好的沟通，你们就能迅速定位到问题的根本原因。<br>&emsp;&emsp;尽管应该首选快速、简单的测试，但如果有缓慢的测试可以在几乎无人监视的情况下执行，那么做一下慢测试也无妨。因为启动慢测试之后，测试运行期间你可以去做别的事情。同样的思路也适用于那些需要花费时间的故障排除过程。例如，故障排除中有一步是提交一个工单或者给支持人员发送某种通知，当启动这些流程之后，你就可以将注意力转移到其他更需要关注的任务当中。<br>&emsp;&emsp;另外一个大问题是，网络是否接通？通常一些大问题的原因都很简单。网络和电源线的连接经常会松动，非常轻微的推动就足以让服务器断开网络连接。如果你离系统设备非常近，可以查看下线缆是否接通，快速查看线缆连接比坐在电脑前一分钟等待端口扫描的结果要好得多。</p><h2 id="1-4-多尝试过去的解决方案"><a href="#1-4-多尝试过去的解决方案" class="headerlink" title="1.4 多尝试过去的解决方案"></a>1.4 多尝试过去的解决方案</h2><p>&emsp;&emsp;事实上大部分问题都发生了不止一次。某些人拥有快速划分问题根源能力的原因是他们以前多次碰到过同样的问题。你接触的问题越多，你就越能成为一个更好、更快的故障排除人员。<br>&emsp;&emsp;解决问题时经常会遇到以前碰到过的症状。努力回忆上次是什么原因造成的这个问题，采取了什么样的步骤来隔离问题。多数情况下，问题症状一样，造成问题的原因也相同，如果你能识别出这个症状，就能非常快速地解决问题。俗话说得好，如果它走起路来像鸭子且叫声也像鸭子，那它很可能就是只鸭子。<br>&emsp;&emsp;然而，有时候它并不是鸭子。我曾经见过某些人在听到任何相似的症状时就采用使用过的解决方案去解决问题，完全不再听取任何其他的描述。实际情况是，完全不同的问题经常也可以产生相同的症状。尤其是那些表面症状。例如，登入服务器的会话有延迟并且看起来非常缓慢。在服务器负载很高或者网络连接不佳的情况下都会出现这样的情况。Nmap（一个很好用的端口扫描工具）会报告一个端口被过滤，如果防火墙阻塞了这个端口或者某个路由器配置错误的话。如果过早地把注意力放到过去的某个解决方案中，会让自己对问题产生偏见，从而更难找到造成问题的真正原因。<br>&emsp;&emsp;关键的一点是即使你用之前的解决方案指导故障的排除过程，也务必验证你的假设。如果你记得上次隔离问题的一些方法，那么这次你应该能用一个测试很快的验证问题，如果测试结果不同，就准备好采取别的解决方法吧。</p><h2 id="1-5-记录问题和解决方案"><a href="#1-5-记录问题和解决方案" class="headerlink" title="1.5 记录问题和解决方案"></a>1.5 记录问题和解决方案</h2><p>&emsp;&emsp;如我所说过的，大部分问题都发生了不止一次。利用这个事实的最好方法之一是记录问题及其解决方案。许多人将这个过程称为事后析误。一个问题解决以后，参与解决问题的人聚集在一起记录哪里出了差错，每个人分别采取了什么步骤来隔离问题，相应的结果是什么。事后剖析的最后确定问题的根本原因，更理想的情况是，实施进一步的方案去防止此类问题再发生。<br>&emsp;&emsp;尽管事后析误会占用每个人的时间，但是有很多理由值得这么去做。主要原因是，如果同样的症状下次再出现，会很难想起上次解决这个问题时做的每一件事情。情急之下，你能记起的只有你曾经碰到过这个问题。如果你能找到相应的事后析误记录，就会立即找到一个排除故障的步骤列表去隔离问题。<br>&emsp;&emsp;记录问题的过程也会让团队中的每一位成员成为更好的问题解决者。团队中的初级成员从资深成员的经历中受益，每个人一起学习新的工具和技术。更重要的是，如果问题的解决方法记录下来，团队中的初级成员很容易自己就能解决问题。这意味着，你在度假或者睡觉时就会少被打扰了。<br>&emsp;&emsp;若运用得当，事后析误将成为一笔有价值的财富。倘若运用不当，则它们引发的问题会比能解决的还要多。讨论和记录故障排除方法与过程非常棒，但你必须追溯到问题的根本原因。一旦问题消失，确实要花费很多时间和努力去查阅日志来追查问题的根源。很多时候一个团队只能做到描述问题的症状是什么，采取了什么措施消除了这个问题。团队经常通过重启系统或者服务就解决了问题。如果不能隔离问题的根源，很可能会一次又一次地遇到相同的问题。<br>&emsp;&emsp;当然，找到问题的根源仅在你想采取措施防止问题重现时有用。一旦你掌握了问题的根源，就可以想出解决问题的方法和能解决问题的人员。这说起来容易，但若不了解问题的根源，可能会再次碰到这个问题。最坏的情形是，你会认为从根本上解决问题从而一劳永逸的努力是白费的。<br>&emsp;&emsp;一些团队会有相反的问题。他们喜欢用事后析误去分析问题根源，但只是为了知道应该责备谁，事后析误在这种环境下就会变得有防御性，且常带有侵略性，这最终会起到相反的效果。当事后析误变得只有指责，人们不大可能去参与它，而很可能隐瞒事实，尤其是问题可能牵连到自己时。最后，即使你发现应该责备某人，但是可能并没有找到问题的根本原因。当你不得不排除一个新问题的时候，这就形成了一个更加紊乱的环境。在这样的环境中，人们的关注点不是解决手边的问题，而是做很多工作去证明出现问题的原因在于你，而不是我。<br>&emsp;&emsp;最后，有些人非常喜欢事后析误以至于他们在问题解决之前就开始这么做了。当你身处于一个危机当中的时候，你的关注点应该在手上的问题和你要隔离问题而采用的故障排除手段。这时候了解问题的根源还为时尚早，追问<strong>我们怎么做才能让这样的事不再发生</strong>也没有意义。如果你解决过复杂的问题，你就知道，在解决问题过程中，你认为可能的问题根源会不断地发生改变。通常排除故障压力很大，需要极度的专注，尤其是当故障花费公司的金钱的时候，任何注意力分散都意味着解决问题的时间会更久。<br>&emsp;&emsp;即使你已经鉴定出问题的根本原因，最好给每个人足够的时间冷静下来，镇定一下，在你计划长期的解决问题方案之前认真思考刚才发生了什么。缺少那些额外的时间，你很可能会碰到反对意见，这将要么推迟问题的解决，要么造成比他们解决的问题还多的问题。</p><h2 id="1-6-了解改动"><a href="#1-6-了解改动" class="headerlink" title="1.6 了解改动"></a>1.6 了解改动</h2><p>&emsp;&emsp;系统问题的一个最大来源是改动。如果系统已经流畅地运行了很久，突然出现了一个问题，你首先应该问的是：哪里发生了改动？如果系统一直都不稳定，就不必把新的改动作为问题的来源之一。但是对于运行一向稳定的系统来说，在所有其他因素相同的情况下，改动的内容应该作为你进行故障排除的第一目标。鉴定和排除对系统的改动将会显著加快排除故障的过程。<br>&emsp;&emsp;尽管对系统的更改可能是问题的来源，但你如果没有办法追踪到更改，就很可能无法更快地解决问题。如果你缺乏追踪所做更改的方法，就应该认真地考虑寻找一个方法，尤其是当你的系统曾经很稳定时。没有比收到问题报警更好的了，”<strong>Jim在问题发生的那段时间提交了代码</strong>“，这可以迅速跟踪到问题。没有比在稳定的系统上发现一个问题，当想要知道对系统做了什么改动时却无从得知更糟糕的事情了。<br>&emsp;&emsp;即使通过某些方法能了解到改动的内容，你最好还是要求自己每次只做一个改动。如果能在问题发生时指出之前的一个改动，会很容易隔离问题。若同时更改了10段代码和3个配置文件就很难隔离问题。我曾经遇到一些团队用维护窗口作为追踪变更的方法，结果很多不相关的信息都涌了出来。问题在于在这样的维护窗口下发生问题的时候，很难隔离问题的根本原因。<br>&emsp;&emsp;如果有一个系统专门用来记录改动那就太棒了，这个系统最好还允许回滚那些引发问题的更改。如果没有别的问题，若你能把所有的改动回滚到问题发生之前，而问题依旧存在，就排除了一个主要的假设，然后可以继续做其他测试。即使你能回滚所有的改动，最好仍然每次只做一个改动。回滚多个改动可能会解决问题，但你仍然不得不遍历每个改动去找到问题的源头。<br>&emsp;&emsp;上面说了这么多，但改动不总是造成问题的原因。事实上，我曾经见过”更改了什么”这个问题在故障排除过程中转移了很多注意力。像所有其他故障排除哲学一样，验证你认为是改动造成的问题的假设，而不要在刚碰到问题时就回滚全部改动。</p><h2 id="1-7-了解系统如何工作"><a href="#1-7-了解系统如何工作" class="headerlink" title="1.7 了解系统如何工作"></a>1.7 了解系统如何工作</h2><p>&emsp;&emsp;这么多年来，作为一个系统管理员我了解到的一点是遇到问题时，每个人都会指责他们知之甚少的技术。在我职业生涯的一段时期内，DNS成了所有网络问题的替罪羊。我不知道为什么会出现这样的局面，不过自打我在那里起，我们的DNS服务器一直都很稳定，但出现网络问题的时候，人们总会问：”是不是DNS宕机了？”我注意到指责DNS有问题的人就是那些对DNS了解最少的人。我的解决方案是在公司内部开设一个自愿参加的课程，主讲DNS如何工作。在那之后，我注意到参加过课程的人在遇到网络问题时不再指责DNS(但少数未参加该课程的人仍然是老样子)。<br>&emsp;&emsp;要点是，本能地去指责自己不熟悉的技术这个毛病排除故障的人员和其他人也有。如果你知道所排查故障的系统如何工作，你将会是一个高效的问题解决者。从解决Linux问题的角度讲，这意味着对TCP/IP、DNS、Linux进程、编程和内存管理都要有较深的理解。本书将以故障排除为上下文来解释这些主题，不过这些都是非常不错的主题，即使不为了排除故障也应该了解。<br>&emsp;&emsp;你会发现，对系统如何工作了解得越多，解决系统问题的速度就越快，同时也会发现你对问题的预感更加准确。这也能帮助你避免做无用功。你将不用执行很多测试就可以排除引起某个问题的一系列原因。</p><h2 id="1-8-谨慎使用Internet"><a href="#1-8-谨慎使用Internet" class="headerlink" title="1.8 谨慎使用Internet"></a>1.8 谨慎使用Internet</h2><p>&emsp;&emsp;排除故障时，Internet是一个非常宝贵的资源。你可能不是世界上第一个看到某条错误消息的人。很有可能有人已经碰到过和你一样的问题，而且你有可能搜索到可行的解决方法。<br>&emsp;&emsp;使用Internet排除故障的挑战是在开始网络搜索之前，需要对问题有正确、清晰的理解。假如你的服务器没有连入网络，而你只是在搜索引擎中输入”server not on network”(服务器脱机)，很可能不会得到有用的结果。一旦你采取某些故障排除措施缩小了问题的范围，并且对问题有了更清晰的认识，就能使用具体、有针对性的搜索词条帮助你解决问题。<br>&emsp;&emsp;当问题故障排除的过程中包含了详细的错误码或短语时，Internet是最有帮助的。描述特定问题的错误码特别方便，因为很容易搜索到相关信息，即使你不了解错误码的含义。一般在某个论坛能找到为你解释错误码含义以及应该如何处理这些错误的人或知识库。如果程序输出的错误信息足够详尽，那么它们也可以作为帮助你解决问题的一个很好的来源。<br>&emsp;&emsp;使用网络搜索的另一个危险是：如果对问题了解得不够深入或者没有使用特定的关键词搜索，你就会得到大量无价值的信息，并且错误的问题诊断步骤将会让你离产生问题的根源更远。你还可能会从一群一无所知的人那里得到很多建议。总是从问题本身出发，尤其是要确保在复制、粘贴任何命令或代码之前对它们了如指掌。</p><h2 id="1-9-抵制重启"><a href="#1-9-抵制重启" class="headerlink" title="1.9 抵制重启"></a>1.9 抵制重启</h2><p>&emsp;&emsp;在Windows 95时代，重启系统通常是修复问题的最好办法。虽然Windows 95时代已经久远，甚至现在我们都不再使用Windows作为服务器，但是重启操作在一些人的脑海中已经根深蒂固，当发生故障的时候，他们的第一反应就是重启服务或者重启硬件设备。<br>&emsp;&emsp;使用重启操作修复问题最危险之处不在于它不能工作，而在于有时候重启系统确实修复了故障。危险之处在于如果通过重启操作修复了问题，你仍然不能识别出问题的根本原因。因为问题消失了无法继续测试，所以可能再也不能找出产生问题的原因。在问题不存在的情况下，寻找问题的原因确实非常困难。如果你不能找出问题的根本原因，几乎可以保证你在晚些时候还会遇到相同的问题。<br>&emsp;&emsp;不要误解我的意思，我不是说排除故障时，永远不能重启硬件设备或者重启服务。我的意思是你应该把重启作为最后的手段。在开始问题诊断之前，尝试获得所有与排除故障相关的数据，以防问题消失。这可能是一个取巧的策略，尤其是在问题需要花费金钱并且你的老板或者客户尖叫着让你重启机器看看问题是否解决时。但是，请坚持立场，如果你觉得老板或者客户不高兴，那就等同样的问题再次出现时再说吧。</p><h1 id="服务器为什么这么慢？CPU、RAM、I-O问题"><a href="#服务器为什么这么慢？CPU、RAM、I-O问题" class="headerlink" title="服务器为什么这么慢？CPU、RAM、I/O问题"></a>服务器为什么这么慢？CPU、RAM、I/O问题</h1><p>&emsp;&emsp;尽管服务器的绝大部分问题都与网络相关，但是还有一类问题仅与本地服务器相关。让这个问题变得棘手的是：本地服务器问题和网络问题经常表现出相同的征兆。事实上，服务器本地的问题会导致网络问题，反过来也一样。本章将会介绍专门出现在本机上的问题，而将影响网络的问题留到第5章介绍。<br>&emsp;&emsp;几乎DevOps团队中的所有成员都遇到过性能不好或响应缓慢的主机，不论是试图查出为什么最近一次提交比之前慢很多的开发者，在代码部署到生产环境之前努力执行负载测试的QA工程师，还是需要确定是否应该购买更多RAM、CPU或运行速度更快的磁盘的系统管理员。这些技术甚至可以帮助你排除Linux桌面系统中的负载问题。<br>&emsp;&emsp;关于主机最常见的一个问题可能是性能太差，甚至都无法响应。通常，网络故障会引发这个问题，但本章将会介绍一些本地故障排除工具，借助这些工具可以分辨出网络过载和机器过载之间的区别。<br>&emsp;&emsp;机器运行缓慢通常是由于消耗了太多系统特定的资源。系统的主要资源包括CPU、RAM、磁盘I/O以及网络（将在第5章介绍）。过度使用这些资源的任何一种都会让系统陷入困境，此时唯一的解决方法就是————重启。不过，如果能登录到系统之中，则可以借助大量工具确定问题的起因。</p><h2 id="2-1系统负载"><a href="#2-1系统负载" class="headerlink" title="2.1系统负载"></a>2.1系统负载</h2><p>&emsp;&emsp;解决引起系统运行缓慢的问题时，平均系统负载可能是最先用到的基本度量标准。在排除系统运行缓慢的问题时，通常我执行的第一条命令是<code>uptime</code>:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uptime</span><span class="token number">13</span>:35:03 up <span class="token number">103</span> days, <span class="token number">8</span> min, <span class="token number">5</span> users, load average: <span class="token number">2.03</span>, <span class="token number">20.17</span>, <span class="token number">15.09</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;<code>load average</code>后面的3个数字<code>2.03</code>、<code>20.17</code>和<code>15.09</code>分别代表了<code>1分钟</code>、<code>5分钟</code>和<code>15分钟</code>内机器的平均负载。一个系统的平均负载等于处于运行或者不可打扰状态进程的平均数。可运行的进程要么正在使用CPU，要么正在等待使用CPU；不可打扰状态的进程都在等待IO响应。<br>&emsp;&emsp;平均负载为1的单CPU系统意味着这个CPU处于恒定负载。如果单CPU系统的平均负载是4，那么这个系统处于它可承受负载能力的4倍，所以3/4的进程都在等待资源。一个系统的平均负载不会因为你所拥有的CPU数量而更改，所以，如果具备两个CPU的系统的平均负载是1，那么其中一个CPU一直处于满负荷状态，也就是说，系统处于50%的负载状态。所以，负载状态为1的单CPU系统与负载状态为4的四CPU系统使用资源的量一样。<br>&emsp;&emsp;1分钟、5分钟、15分钟的平均负载描述了相对时间内负载的平均值，这些值在确定系统当前状态时非常有用。1分钟内的平均负载会让你对系统当前所处的状态有一个清晰的认识，所以在前面这个例子中，你能看到服务器在过去的1分钟内负载为2，但是在过去的5分钟内平均负载却飙升到了20。前15分钟内，负载平均值是15。由此可知，机器在过去的15分钟内处于高负载的状态，而且5分钟前系统负载又开始增长，但是现在已经减弱。让我们将它与一个完全不同的平均负载做个对比。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uptime</span>05:11:52 up <span class="token number">20</span> days, <span class="token number">55</span> min, <span class="token number">2</span> users, load average: <span class="token number">17.29</span>, <span class="token number">0.12</span>, <span class="token number">0.01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;在这个例子中，5分钟内和15分钟内的平均负载都很低，但是1分钟内的平均负载却很高，所以我知道负载的飙升相对而言发生在最近。在这种情况下，通常我会连续运行多次<code>uptime</code>命令（或者使用<code>top</code>命令，马上我就会讲到这个工具）来观察负载是持续上升还是正在下降。</p><p>什么是高平均负载</p><p>&emsp;&emsp;一个值得研究的问题是：平均负载多少算高？简单的回答是”这取决于产生高负载的原因”。因为负载描述了正在使用资源的活动进程的平均数量，所以负载的飙升透露了很多信息。明确负载是CPU密集型（等待CPU资源的进程）、RAM密集型（尤其是，频繁使用的RAM被移入了交换区）还是I/O密集型（争夺磁盘或网络I/O资源的进程）非常重要。<br>&emsp;&emsp;例如，如果运行的一个应用程序在不同的时间点产生大量的同步线程，这些线程会同时启动，你可能会看到负载飙升到20、40或者更高，它们在竞争系统资源。随着这些进程逐渐完成，负载就会降下来。<br>&emsp;&emsp;通常CPU密集型的系统会比I/O密集型的系统响应度更高。我见过数以百计CPU密集型的系统，我仍然可以在这些系统上运行故障排除工具而且具有良好的响应时间。我也见过IO负载相对较低的I/O密集型系统，只是登录这些系统就需要花费一段时间，因为它们的磁盘IO完全饱和了。用尽RAM资源的系统通常与I/O密集型的系统表现相同，因为一旦系统开始使用磁盘上的交换存储，它就会消耗磁盘资源，导致进程逐渐变慢直至停止。</p><h2 id="2-2-使用top命令解决负载问题"><a href="#2-2-使用top命令解决负载问题" class="headerlink" title="2.2 使用top命令解决负载问题"></a>2.2 使用top命令解决负载问题</h2><p>&emsp;&emsp;当需要解决高负载问题的时候，我第一个想到的工具是top命令。在命令行输入top命令并按下Enter键后，马上就能看到大量的系统信息（见图2-1）。这些数据都会不断更新，所以你能看到系统的实时信息，包括系统启动了多久、负载平均值、系统中总共有多少进程正在运行、总共有多少内存、使用了多少内存、还剩多少内存，最后还包含系统的进程列表以及它们占用的资源数量。使用top命令可能无法看到系统当前运行的所有进程，因为无法将它们都显示在屏幕上。top命令默认排序方式是按照进程的CPU使用情况从上到下排序，所以可以一眼就能看到哪些进程正在消耗CPU资源。</p><p><img src="/medias/drawing-bed/oops/0.jpg"></p><p>&emsp;&emsp;那么如果发现一个进程占用了全部CPU资源，你想要终止这个进程，该怎么做呢？top命令输出的第一列是PID，它代表程序的进程ID————系统赋给每个进程的唯一ID。想要<code>终止某个进程</code>，只需按下<code>K</code>按键，然后输入想要终止的<code>PID</code>，最后当系统提示该进程将会终止于<code>signal 15</code>时，按下<code>Enter</code>键即可。<br>&emsp;&emsp;默认情况下top命令在非交互式模式下运行，如果不需要看显示在屏幕外的信息，那一切都还好。如果想要看到top命令的完整输出，或者想将这些信息都重定向到文件中，那么你可以在批处理模式下运行这个命令。-b选项可以开启批处理模式，-n选项可以控制在退出top命令之前，刷新信息多少次。例如，想看到完整的输出，仅需运行一次top命令，输入如下命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> -b -n l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要将这些信息存储到名为top_output的文件中，那么请输入如下命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> -b -n <span class="token number">1</span> <span class="token operator">></span> top_output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要查看top命令的输出，同时将该输出写入文件，那么你可以使用便捷的命令行工具 tee:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> -b -n <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">tee</span> top_output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-1-了解top命令的输出"><a href="#2-2-1-了解top命令的输出" class="headerlink" title="2.2.1 了解top命令的输出"></a>2.2.1 了解top命令的输出</h3><p>&emsp;&emsp;使用top命令来排除系统负载问题时，基本步骤是检查top的输出，借此明确耗尽了哪些资源（CPU、RAM还是磁盘I/O）。一旦清楚了这个问题，就可以尝试检查到底是哪些进程大量消耗了这些资源。首先，检查系统中top命令的标准输出:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> - <span class="token number">14</span>:08:25 up <span class="token number">38</span> days，8:02，1 user，load average: <span class="token number">1.70</span>，1.77，1.68Tasks: <span class="token number">107</span> total， <span class="token number">3</span> running，104 sleeping， <span class="token number">0</span> stopped，0 zombieCpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: <span class="token number">11.4</span>%us，29.6%sy，0.0%ni，58.3%id，.7%wa，0.0%hi，0.0%si，0.8%stMem:  1024176k total，997408k used， 26768k free， 85520k buffersSwap: 1004052k total，  4360k used，999692k free，286040k cachedPID   <span class="token environment constant">USER</span>   PR NI  VIRT  RES  SHR  S %CPU %MEM     TINE+  COMWAND<span class="token number">9463</span>  mysql  <span class="token number">16</span>  <span class="token number">0</span>  686m  ll1m <span class="token number">3328</span> S   <span class="token number">53</span>  <span class="token number">5.5</span> <span class="token number">569</span>:17.64  mysqld<span class="token number">18749</span> nagios <span class="token number">16</span>  <span class="token number">0</span>  140m  134m <span class="token number">1868</span> S   <span class="token number">12</span>  <span class="token number">6.6</span>   <span class="token number">1345</span>:01  nagios2db_status<span class="token number">24636</span> nagios <span class="token number">17</span>  <span class="token number">0</span> <span class="token number">34660</span>  10m   <span class="token number">712</span> S    <span class="token number">8</span>  <span class="token number">0.5</span>   <span class="token number">1195</span>:15  nagios<span class="token number">22442</span> nagios <span class="token number">24</span>  <span class="token number">0</span>  <span class="token number">6048</span>  <span class="token number">2024</span> <span class="token number">1452</span> S    <span class="token number">8</span>  <span class="token number">0.1</span>   <span class="token number">0</span>:00.04  check_time.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;top命令输出的第一行与你之前见到的uptime命令的输出一致。正如你在这个例子中看到的，对于这台拥有4个CPU的机器来说，系统负载并不大。<br><code>top - 14:08:25 up 38 days，8:02，1 user，1oad average: 1.70，1.77，1.68</code><br>&emsp;&emsp;不过除了标准的系统负载，top命令还为你提供了额外的度量标准。例如，Cpu(s)这一行提供了当前CPU运行情况的信息:<br><code>Cpu(s): 11.4%us，29.6%sy，0.0%ni，58.3%id，0.7%wa，0.0%hi，0.0%si，0.0%st</code><br>&emsp;&emsp;如果你不清楚这些缩写代表什么，那么它们对你毫无意义，所以我将它们都列在下面:  </p><ul><li><input disabled="" type="checkbox"> us: 用户CPU时间<br>运行非优雅的用户进程所占CPU时间的百分比（优雅，英文”nicing”，是指一个进程允许你根据其他进程更改优先级）。  </li><li><input disabled="" type="checkbox"> sy: 系统CPU时间<br>运行内核和内核进程所占CPU时间的百分比。  </li><li><input disabled="" type="checkbox"> ni: 优雅CPU时间<br>如果更改过一些进程的优先级，这个指标能够告诉你它们所占CPU时间的百分比。  </li><li><input disabled="" type="checkbox"> id: CPU空闲时间<br>这是你希望具备很高数值的度量指标中的一个。它代表了CPU的空闲时间比。如果系统运行缓慢，但是这个指标特别高，那么你就可以确定问题的原因不是高CPU负载。  </li><li><input disabled="" type="checkbox"> wa: I/O等待<br>这个数字代表了CPU时间用在等待执行I/O操作所占的百分比。当你解决运行缓慢的系统问题的时候，这是一个非常有价值的度量指标，因为如果这个数值很低，那么就能轻松排除磁盘或者网络I/O的问题。  </li><li><input disabled="" type="checkbox"> hi: 硬件中断<br>CPU用于处理硬件中断所占时间的百分比。  </li><li><input disabled="" type="checkbox"> si: 软件中断<br>CPU用在处理软件中断所占时间的百分比。  </li><li><input disabled="" type="checkbox"> st: 流逝的时间<br>如果你正在运行虚拟机，这个度量指标会告诉你虚拟机中执行的其他任务所占CPU时间的百分比。  </li></ul><p>&emsp;&emsp;在前面的例子中，你可以看到系统有超过50%的空闲时间，这与机器具备4个CPU、系统负载为1.70的指标相匹配。当你处理一个运行缓慢的系统的时候，首先要观察的度量指标之一就是I/O等待时间，它可以用来排除磁盘I/O的问题。如果I/O等待时间很低，那么可以看看CPU空闲时间百分比；如果I/O等待时间很高，那么下一步就是确定是什么因素导致I/O等待时间所占的比重这么高，这一点我马上就会讲到。如果I/O等待和CPU空闲时间百分比都很低，那么很可能会看到一个非常高的用户时间百分比，所以你必须确定是什么原因导致了这么高的用户时间百分比。如果I/O等待时间所占百分比很低，而空闲时间百分比很高，那么你就知道系统运行缓慢不是CPU资源的原因，而应该从别的地方找原因。这可能意味着应该查看网络问题或者Web服务器的问题，或者查看MySQL查询缓慢的问题等。</p><h3 id="2-2-2-解决高用户时间的问题"><a href="#2-2-2-解决高用户时间的问题" class="headerlink" title="2.2.2 解决高用户时间的问题"></a>2.2.2 解决高用户时间的问题</h3><p>&emsp;&emsp;解决故障的过程中一个常见而又相对简单的问题是，由用户CPU时间百分比高引起的高负载问题。这很常见，因为服务器上的服务很可能会占系统负载的绝大部分，而且这些服务都是用户进程。如果发现<code>用户时间百分比高</code> 但<code>I/O等待时间百分比却很低</code>，很显然你需要确定系统中哪一个<code>进程占用了</code>如此<code>大量的CPU资源</code>。默认情况下，top命令会按照各个进程CPU使用率由高到低排序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  PID   <span class="token environment constant">USER</span> PR NI  VIRT  RES  SHR S %CPU %MEM     TIME+  COMMAND <span class="token number">9463</span>  mysql <span class="token number">16</span>  <span class="token number">0</span>  686m 111m <span class="token number">3328</span> S   <span class="token number">53</span>  <span class="token number">5.5</span> <span class="token number">569</span>:17.64  mysqld<span class="token number">18749</span> nagios  <span class="token number">1</span>  <span class="token number">0</span>  140m 134m <span class="token number">1868</span> S   <span class="token number">12</span>  <span class="token number">6.6</span>   <span class="token number">1345</span>:01  nagios2db_status<span class="token number">24636</span> nagios <span class="token number">17</span>  <span class="token number">0</span> <span class="token number">34660</span>  10m  <span class="token number">712</span> S    <span class="token number">8</span>  <span class="token number">0.5</span>   <span class="token number">1195</span>:15  nagios<span class="token number">22442</span> nagios <span class="token number">24</span>  <span class="token number">0</span>  <span class="token number">6048</span> <span class="token number">2024</span> <span class="token number">1452</span> S    <span class="token number">8</span>  <span class="token number">0.1</span>   <span class="token number">0</span>:00.04  check_time.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;在这个例子中，mysqld进程消耗了53%的CPU时间，nagios2db_status进程消耗了12%的CPU时间。注意，这个数字代表的是所占单个CPU的百分比，所以如果你拥有一台具备4个CPU的机器，可能会看到多个进程都耗了99%的CPU时间。<br>&emsp;&emsp;你会看到大部分高CPU负载的情况都是由于CPU 被一个、两个或者很多个进程消耗殆尽。任何一种情况都很容易确定，因为在第一种情况下，top命令输出中前一两个进程都有非常高的CPU百分比，而其余进程所占CPU百分比相对很低，此时，解决方法就是终止大量使用CPU资源的进程（按K键，然后输入对应进程的PID）。<br>&emsp;&emsp;在多进程的情况下，你可能让系统做了太多事。比如说，在Web服务器中可能有大量Apache进程，还有cron中运行的部分日志解析脚本。这些进程可能会消耗差不多等量的CPU资源。这种问题的解决方案从长期来看相当复杂。以Web服务器为例，你的确需要运行全部Apache进程，同时你可能还需要日志解析工具。在短期内，你可以终止（或推迟）一些进程直到负载降低，但是从长期来看，你可能需要考虑增加系统资源或者将这些功能分拆到多台服务器上。</p><h3 id="2-2-3-解决内存不足的问题"><a href="#2-2-3-解决内存不足的问题" class="headerlink" title="2.2.3 解决内存不足的问题"></a>2.2.3 解决内存不足的问题</h3><p>&emsp;&emsp;top输出中的以下两行提供了非常有价值的RAM使用情况的信息。在处理特定的系统问题之前，排除内存问题非常重要。</p><pre class="line-numbers language-none"><code class="language-none">Mem: 1024176k total，997408k used， 26768k free， 85520k buffersSwap:1004052k total，  4360k used，999692k free，286040k cached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;第1行告诉我们有多少物理内存可用、占用了多少内存、空闲多少内存以及缓存了多少内存。第2行为我们提供了相似的信息，交换存储以及Linux文件缓存使用了多少RAM。一眼看上去会以为系统内存快要耗尽了，因为系统仅显示有26768KB空闲内存。不少故障排除人员都会被输出中与Linux文件缓存相关的已用和空闲的信息误导。一旦Linux将一个文件载入到RAM中，当程序用完这个文件的时候，不需要将它从RAM中移除。如果还有可用的RAM，Linux将会在RAM中缓存这个文件，这样如果一个程序再次访问这个文件，访问速度将会得到大幅提升。如果系统的确需要为活动的进程提供RAM，那RAM中将不会缓存这么多文件。由于文件缓存的存在，通常在服务器运行相当长的一段时间后，都会显示仅有少量RAM空闲，而其余的都被缓存占用。<br>&emsp;&emsp;想要找出进程到底真正使用了多少RAM，你必须刨除RAM中的文件缓存。正如你所看到的示例代码一样，在已用的997408KB的RAM中，有286040KB的RAM被文件缓存占用，所以这就是说实际上仅使用了711368KB的RAM。在这个例子中，系统仍然有大量可用的内存资源，几乎没有使用任何交换存储。即便你的确看到使用了一些交换存储，这也不足以作为问题的征兆。如果一个进程转为空闲状态，Linux通常会将它占用的RAM释放，供其他进程使用。辨别是否耗尽了RAM的一个好方法是查看文件缓存。如果实际用的内存减去文件缓存的值很大，同时交换存储的值也很高，很可能的确有内存问题。<br>&emsp;&emsp;如果真的发现了内存问题，下一步就是确定哪些进程消耗了RAM。top默认按照CPU的使用率排序，所以你需要将其改为按照RAM使用率来排序。保持top的打开状态，然后按下M键。这就会让所有进程按照RAM的使用率排序。</p><pre class="line-numbers language-none"><code class="language-none">  PID USER   PR NI  VIRT﹒RES  SHR S %CPU %MEM   TIME+  COMMAND18749 nagios 16  0  140m 134m 1868 S   12  6.6 1345:01  nagios2db_status 9463 mysql  16  0  686m 111m 3328 S   53  5.5  569:17  mysqld24636 nagios 17  0 34660  10m  712 S    8  0.5 1195:15  nagios22442 nagios 24  0   048 2024 1452 S    8  0.1 0:00.04  check_time.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;注意%MEM这一列，会看到前几个进程占用了大量RAM。如果你找到了大量使用RAM的进程，可以终止它们，或者根据程序，通过专门的故障排除方法来寻找是什么原因导致这些进程占用了大量RAM。<br><strong>注意</strong><br>&emsp;&emsp;<em>实际上top命令的输出可以根据任何列排序。想要更改top输出的排序方式，按F键进入选择排序列的界面。在按下对应特定列的按键之后（比如，K对应CPU列），再按Enter键就能回到top的输出界面。</em><br>&emsp;&emsp;Linux内核也有一个内存耗尽（OOM）终结者，如果低内存导致系统运行危险，它就会介入。当系统内存快要耗尽的时候，OOM终结者就会开始终止进程。有些情况下，终止的可能是占用大量RAM的进程，但它并不能保证不会终止未占用大量RAM的进程。有的时候它也会终止像sshd这样的程序或者其他进程，而不是真正的罪魁祸首。很多时候，OOM终止了一些进程之后，系统就会变得不大稳定，所以你不得不重启机器以确保所有的系统进程都在正常运行。如果OOM终结者介入了，在/var/log/syslog中你会看到如下行:</p><pre class="line-numbers language-none"><code class="language-none">1228419127.32453.1704.hostname:2,S:Out of Memory: Kil1ed process 21389 (java).1228419127.32453_1710.hostname:2,S:Out of Memory: Killed process 21389 (java).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-4-解决高I-O等待时间问题"><a href="#2-2-4-解决高I-O等待时间问题" class="headerlink" title="2.2.4 解决高I/O等待时间问题"></a>2.2.4 解决高I/O等待时间问题</h3><p>&emsp;&emsp;当你看到IO等待时间所占CPU时间的比重很高的时候，首先需要检查的就是机器是否正在大量使用交换空间。因为硬盘操作的速度远远低于RAM，所以当系统内存耗尽，开始使用交换空间的时候，系统的性能会受到严重响。任何想要访问硬盘的操作都要完成与硬盘的I/O交换。所以，故障排除的第一步是看内存是否耗尽，如果是，先解决这个问题。如果还有大量可用的RAM，你需要明确哪个进程占用了大部分I/O操作。<br>&emsp;&emsp;有的时候很难弄明白到底是哪个进程占用了大量I/O资源，但是如果系统中存在多个分区，你可以缩小范围，找到哪个分区正在执行大量IO操作。想要做到这一点，需要使用iostat程序，基于Red Hat和基于Debian的系统的sysstat包中都提供了这个程序。如果你的机器没有安装，可以通过包管理工具来安装。<br>&emsp;&emsp;在解决问题之前，你最好先安装好这个程序。安装了这个程序后，就可以不带任何参数运行iostat，观察系统的整体情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> iostatLinux <span class="token number">2.6</span>.24-19-server <span class="token punctuation">(</span>hostname<span class="token punctuation">)</span>   01/31/2009avg-cpu:  %user  %nice  %system  %iowait  %steal  %idle           <span class="token number">5.73</span>   <span class="token number">0.07</span>     <span class="token number">2.03</span>     <span class="token number">0.53</span>    <span class="token number">0.00</span>  <span class="token number">91.64</span>Device:  tps  Blk_read/s  B1k_wrtn/s  B1k_read  Blk_wrtnsda     <span class="token number">9.82</span>      <span class="token number">417.96</span>       <span class="token number">27.53</span>  <span class="token number">30227262</span>   <span class="token number">1990625</span>sda1    <span class="token number">6.55</span>      <span class="token number">219.10</span>        <span class="token number">7.12</span>  <span class="token number">15845129</span>    <span class="token number">515216</span>sda2    <span class="token number">0.04</span>        <span class="token number">0.74</span>        <span class="token number">3.31</span>     <span class="token number">53506</span>    <span class="token number">239328</span>sda3    <span class="token number">3.24</span>      <span class="token number">198.12</span>       <span class="token number">17.09</span>  <span class="token number">14328323</span>   <span class="token number">1236081</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;首先看到的是与top命令相似的CPU信息，下面紧跟着系统上所有硬盘设备及其分区的I/O状态信息。下面是各列代表的意义:  </p><ul><li><input disabled="" type="checkbox"> tps<br>这个值列出了设备每秒的传输量。”传输”（Transfer）是向设备发送I/O请求的另一种表达方式。  </li><li><input disabled="" type="checkbox"> Blk_read/s<br>表示每秒从设备读取的数据量。  </li><li><input disabled="" type="checkbox"> Blk_wrtn/s<br>表示每秒向设备写入的数据量。  </li><li><input disabled="" type="checkbox"> Blk_read<br>这一列表示从设备读取的数据总量。  </li><li><input disabled="" type="checkbox"> Blk_wrtn<br>这一列表示写入设备的数据总量。  </li></ul><p>&emsp;&emsp;当系统处于高I/O负载状态的时候，首先就是观察每个分区，看看哪个分区的I/O负载最高。比如说，你有一台数据库服务器，数据库本身存储在/dev/sda3分区。你如果看到大量的I/O操作来自这里，这就是一个很好的线索:数据库很可能占用了大量I/O资源。<br>&emsp;&emsp;弄明白了这一点后，下一步就是确定I/O操作大部分来自读取还是写入。假设你怀疑备份工作导致了I/O操作的增长。因为备份工作的操作主要集中于从文件系统中读取文件，然后通过网络传输到备用服务器，如果大量的I/O操作都来自于写入而不是读取操作，那么大概就可以排除这个问题。<br><strong>注意</strong><br>&emsp;&emsp;<em>你可能需要运行iostat命令多次，以此得到系统当前的精确I/O状况。如果在命令行指定一个数字参数，iostat就会持续运行并根据指定的秒数刷新输出信息。比如说，如果你想要每2秒看到一次iostat的输出，就可以输入sudo iostat 2。如果你有任何NFS共享，iostat另一个非常有用的参数是-n，当你指定了-n参数，iostat就会给出所有NFS共享的I/O统计信息。</em><br>&emsp;&emsp;除了iostat，在最新的发布版中，我们还有一个很简单的工具。实际上，它是top和iostat程序的混合体，能够显示系统中所有运行进程并将进程根据IO统计信息排序。这个软件使用了Linux内核的一些新特性，所以需要2.6.20或者更新的内核。如果默认情况下没有安装这个程序，那么可以在iotop包中找到它。这个工具包含在基于Debian的版本中，但是对于基于Red Hat的版本来说，你就需要在网上或者从第三方仓库中寻找并安装第三方的RPM。安装了这个包后，就可以用root权限运行iotop，并看到如下输出:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> iotopTotal DISK READ: <span class="token number">189.52</span> K/s <span class="token operator">|</span> Total DISK WRITE: <span class="token number">0.00</span> B/s TID  PRIO  <span class="token environment constant">USER</span>  DISK  READ  DISK  WRITE   SWAPIN     I<span class="token operator"><span class="token file-descriptor important">0</span>></span>  COMMAND<span class="token number">8159</span>  be/4  root <span class="token number">189.2</span>   K/s  <span class="token number">0.00</span>    B/s   <span class="token number">0.00</span> %  <span class="token number">0.00</span> %  <span class="token function">rsync</span> --server --se <span class="token number">443</span>  be/4  kyle  <span class="token number">0.00</span>   B/s  <span class="token number">3.79</span>    K/s   <span class="token number">0.00</span> %  <span class="token number">0.00</span> %  cli /usr/lib/gnome-<span class="token number">4244</span>  be/4  kyle  <span class="token number">0.00</span>   B/s  <span class="token number">3.79</span>    K/s   <span class="token number">0.00</span> %  <span class="token number">0.00</span> %  cli /usr/lib/gnome-   <span class="token number">1</span>  be/4  root  <span class="token number">0.00</span>   B/s  <span class="token number">0.00</span>    B/s   <span class="token number">0.00</span> %  <span class="token number">0.00</span> %  init在这个例子中，你会看到rsync进程执行了大量I/O读取操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-问题发生后的高负载处理"><a href="#2-3-问题发生后的高负载处理" class="headerlink" title="2.3 问题发生后的高负载处理"></a>2.3 问题发生后的高负载处理</h2><p>&emsp;&emsp;截止到这里，本章都在讨论当系统负载过高的时候，如何找到高负载的原因。尽管top和 iostat都是非常优秀的工具，但是当系统发生问题的时候，我们不是总能足够幸运地找到解决办法。我记不清我遇到过多少次机器运行缓慢，只能等待负载降低才能登录。只需要稍微多做一点工作，就能在服务器上安装相应的工具，记录全天的性能数据。<br>&emsp;&emsp;我们已经讨论了如何使用sysstat包中的iostat工具来解决高I/O的问题，不过sysstat中也包含一些能报告CPU和RAM使用情况的工具。虽然的确可以使用top命令达到这个目的，但是sysstat更加强大，它能够用一种简单的机制来记录系统的统计信息，如CPU负载、RAM以及I/O状态。借助这些统计信息，当有人抱怨昨天中午系统很慢时，你就可以查看日志，看看是什么原因引起的这个问题。</p><h3 id="2-3-1-配置sysstat"><a href="#2-3-1-配置sysstat" class="headerlink" title="2.3.1 配置sysstat"></a>2.3.1 配置sysstat</h3><p>&emsp;&emsp;第一步是使用包管理工具安装sysstat包。在基于Debian的系统（如Ubuntu）中，sysstat不会自动启用，所以需要修改<code>/etc/default/sysstat</code>文件，将<br>&emsp;&emsp;<code>ENABLED=&quot;false&quot;</code><br>&emsp;&emsp;更改为<br>&emsp;&emsp;<code>ENABLED=&quot;true&quot;</code><br>&emsp;&emsp;在基于Red Hat的系统上，你可能需要修改<code>/etc/sysconfig/sysstat</code>文件，更改HISTORY选项，让它可以记录7天以上的统计信息。对于这两种系统，统计信息都可以每10分钟抓取一次并记录每日总结。<br>&emsp;&emsp;一旦启用了sysstat，它就会每10分钟收集一次系统状态并将它们存储到<code>/var/log/sysstat</code>或<code>/var/log/sa</code>文件中。除此之外，每天晚上在午夜之前，它还会分割统计文件。这些操作都是由<code>/etc/cron.d/sysstat</code>脚本执行的，所以如果想要更改sysstat收集信息的频率，你可以修改这个脚本文件。</p><h3 id="2-3-2-查看CPU统计信息"><a href="#2-3-2-查看CPU统计信息" class="headerlink" title="2.3.2 查看CPU统计信息"></a>2.3.2 查看CPU统计信息</h3><p>&emsp;&emsp;sysstat统计信息的时候，它将这些信息存储在以sa开头、以本月当前日期结尾的文件名的文件中（如sa03）。这就意味着你可以查看从当前日期起，一个月以内的统计数据。使用sar工具可以查看这些统计信息。默认情况下sar会输出当天的CPU统计信息:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sarLinux <span class="token number">2.6</span>.24-22-server <span class="token punctuation">(</span>kickseed<span class="token punctuation">)</span>01/07/2012<span class="token punctuation">..</span>.07:44:20 PM CPU %user %nice %system %iowait %steal %idle07:45:01 PM all  <span class="token number">0.00</span>  <span class="token number">0.00</span>    <span class="token number">0.54</span>    <span class="token number">0.51</span>   <span class="token number">0.00</span> <span class="token number">98.95</span>07:55:01 PM all  <span class="token number">0.54</span>  <span class="token number">0.00</span>    <span class="token number">1.66</span>    <span class="token number">1.26</span>   <span class="token number">0.00</span> <span class="token number">96.54</span>08:05:01 PM all  <span class="token number">0.20</span>  <span class="token number">0.00</span>    <span class="token number">0.72</span>    <span class="token number">1.08</span>   <span class="token number">0.00</span> <span class="token number">98.00</span>08:15:01 PM all  <span class="token number">0.49</span>  <span class="token number">0.00</span>    <span class="token number">1.12</span>    <span class="token number">0.62</span>   <span class="token number">0.00</span> <span class="token number">97.77</span>08:25:01 PM all  <span class="token number">0.49</span>  <span class="token number">0.00</span>    <span class="token number">2.15</span>    <span class="token number">1.21</span>   <span class="token number">0.00</span> <span class="token number">96.16</span>08:35:01 PM all  <span class="token number">0.22</span>  <span class="token number">0.00</span>    <span class="token number">0.98</span>    <span class="token number">0.58</span>   <span class="token number">0.00</span> <span class="token number">98.23</span>08:45:01 PM all  <span class="token number">0.23</span>  <span class="token number">0.00</span>    <span class="token number">0.75</span>    <span class="token number">0.54</span>   <span class="token number">0.00</span> <span class="token number">98.47</span>08:55:01 PM all  <span class="token number">0.20</span>  <span class="token number">0.00</span>    <span class="token number">0.78</span>    <span class="token number">0.50</span>   <span class="token number">0.00</span> <span class="token number">98.52</span>09:01:18 PM all  <span class="token number">0.19</span>  <span class="token number">0.00</span>    <span class="token number">0.72</span>    <span class="token number">0.37</span>   <span class="token number">0.00</span> <span class="token number">98.71</span>09:05:01 PM all  <span class="token number">0.24</span>  <span class="token number">0.00</span>    <span class="token number">1.10</span>    <span class="token number">0.54</span>   <span class="token number">0.00</span> <span class="token number">98.12</span>Average:    all  <span class="token number">0.32</span>  <span class="token number">0.00</span>    <span class="token number">1.12</span>    <span class="token number">0.78</span>   <span class="token number">0.00</span> <span class="token number">97.78</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;从输出中可以发现，CPU的很多统计信息都和top命令的输出相同。在最后一行，sar还为每个值提供了平均值。</p><h3 id="2-3-3-查看RAM统计信息"><a href="#2-3-3-查看RAM统计信息" class="headerlink" title="2.3.3 查看RAM统计信息"></a>2.3.3 查看RAM统计信息</h3><p>&emsp;&emsp;sysstat计划任务不仅可以收集CPU负载信息，还能收集很多别的信息。例如，使用-r选项就可以收集RAM的统计信息:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sar -rLinux <span class="token number">2.6</span>.24-22-server <span class="token punctuation">(</span>kickseed<span class="token punctuation">)</span> 01/07/201207:44:20 PM kbmemfree kbmemused %memused kbbuffers kbcached kbswpfree kbswpused %swpused kbswpcad07:45:01 PM    <span class="token number">322064</span>    <span class="token number">193384</span>    <span class="token number">37.52</span>     <span class="token number">16056</span>   <span class="token number">142900</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span> 07:55:01 PM    <span class="token number">318484</span>    <span class="token number">196964</span>    <span class="token number">38.21</span>     <span class="token number">17152</span>   <span class="token number">144672</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span> 08:05:01 PM    <span class="token number">318228</span>    <span class="token number">197220</span>    <span class="token number">38.26</span>     <span class="token number">17648</span>   <span class="token number">144700</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>08:15:01 PM    <span class="token number">297669</span>    <span class="token number">217780</span>    <span class="token number">42.25</span>     <span class="token number">18384</span>   <span class="token number">154408</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>08:25:01 PM    <span class="token number">284152</span>    <span class="token number">231296</span>    <span class="token number">44.87</span>     <span class="token number">28072</span>   <span class="token number">173724</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>08:35:01 PM    <span class="token number">283096</span>    <span class="token number">232352</span>    <span class="token number">45.08</span>     <span class="token number">20612</span>   <span class="token number">173756</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>08:45:01 PM    <span class="token number">283284</span>    <span class="token number">232164</span>    <span class="token number">45.04</span>     <span class="token number">21116</span>   <span class="token number">173780</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>08:55:01 PM    <span class="token number">282556</span>    <span class="token number">232892</span>    <span class="token number">45.18</span>     <span class="token number">21624</span>   <span class="token number">173804</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>09:01:18 PM    <span class="token number">276632</span>    <span class="token number">238816</span>    <span class="token number">46.33</span>     <span class="token number">21964</span>   <span class="token number">173896</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>09:05:01 PM    <span class="token number">281876</span>    <span class="token number">233572</span>    <span class="token number">45.31</span>     <span class="token number">22188</span>   <span class="token number">173900</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span>Average:       <span class="token number">294804</span>    <span class="token number">220644</span>    <span class="token number">42.81</span>     <span class="token number">19682</span>   <span class="token number">162954</span>     <span class="token number">88316</span>         <span class="token number">0</span>     <span class="token number">0.00</span>        <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;在这里可以看到使用了多少内存，空闲多少内存，同时还能查看交换空间的信息以及文件缓存的信息，这些信息与用top或free命令输出的信息类似。与之不同的是，你可以及时查看之前的信息。</p><h3 id="2-3-4-查看磁盘统计信息"><a href="#2-3-4-查看磁盘统计信息" class="headerlink" title="2.3.4 查看磁盘统计信息"></a>2.3.4 查看磁盘统计信息</h3><p>&emsp;&emsp;从sar中还可以获得另一个非常有用的度量指标:磁盘统计信息。使用-b选项能给出一些列磁盘I/O的基本信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sar -bLinux <span class="token number">2.6</span>.24-22-server <span class="token punctuation">(</span>kickseed<span class="token punctuation">)</span> 01/07/201207:44:20 PM  tps rtps wtps bread/s bwrtn/s07:45:01 PM <span class="token number">8.03</span> <span class="token number">0.00</span> <span class="token number">8.03</span>    <span class="token number">0.00</span>  <span class="token number">106.61</span>07:55:01 PM <span class="token number">8.78</span> <span class="token number">0.14</span> <span class="token number">8.64</span>    <span class="token number">3.35</span>  <span class="token number">127.59</span>08:05:01 PM <span class="token number">7.16</span> <span class="token number">0.00</span> <span class="token number">7.16</span>    <span class="token number">0.00</span>   <span class="token number">61.14</span>08:15:01 PM <span class="token number">8.17</span> <span class="token number">0.14</span> <span class="token number">8.03</span>    <span class="token number">5.82</span>  <span class="token number">139.02</span>08:25:01 PM <span class="token number">9.50</span> <span class="token number">0.06</span> <span class="token number">9.44</span>    <span class="token number">4.09</span>  <span class="token number">212.62</span>08:35:01 PM <span class="token number">8.27</span> <span class="token number">0.00</span> <span class="token number">8.27</span>    <span class="token number">0.01</span>   <span class="token number">74.66</span>08:45:01 PM <span class="token number">8.04</span> <span class="token number">0.00</span> <span class="token number">8.04</span>    <span class="token number">0.00</span>   <span class="token number">71.51</span>08:55:01 PM <span class="token number">7.64</span> <span class="token number">0.00</span> <span class="token number">7.64</span>    <span class="token number">0.00</span>   <span class="token number">66.46</span>09:01:18 PM <span class="token number">7.11</span> <span class="token number">0.00</span> <span class="token number">7.11</span>    <span class="token number">0.36</span>   <span class="token number">63.73</span>09:05:01 PM <span class="token number">7.61</span> <span class="token number">0.00</span> <span class="token number">7.61</span>    <span class="token number">0.00</span>   <span class="token number">72.11</span>Average:    <span class="token number">8.11</span> <span class="token number">0.04</span> <span class="token number">8.06</span>    <span class="token number">1.67</span>  <span class="token number">102.52</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;从这里可以看到每秒总共传输的数据量（ tps），它由总共读取的数据量和写入的数据量（分别是rtps和 wtps）相加获得。bread/s列并非用来衡量块IO，而是告诉你平均每秒读取的数据量。类似地、bwrtn/s能告诉你平均每秒写入的数据量。<br>&emsp;&emsp;sar程序可以传入很多参数，输出特定的数据集，不过有的时候你可能想一次性看到所有数据。使用-A选项可以做到这点。它会显示包括负载平均值、CPU负载、RAM、磁盘IO、网络IO和其他一些有趣值在内的统计信息。这样可以让你更加了解sar能够输出什么统计信息，之后，通过阅读sar的用户手册(输入man sar).可以了解到想要看特定的统计信息应该传入什么标志位。</p><h3 id="2-3-5-查看之前的统计信息"><a href="#2-3-5-查看之前的统计信息" class="headerlink" title="2.3.5 查看之前的统计信息"></a>2.3.5 查看之前的统计信息</h3><p>&emsp;&emsp;当然，到目前为止，我仅仅介绍了如何查看整天的信息。有时你会只想查看一天中部分时间段内的信息。想要获得指定时间范围内的信息，可以使用-s和-e参数分别指定你感兴趣的开始时间和结束时间。例如，如果想要查看8:00pm—8:30pm这个时间段内的CPU数据，需要输入:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sar -s <span class="token number">20</span>:00:00 -e <span class="token number">20</span>:30:00Linux <span class="token number">2.6</span>.24-22-server <span class="token punctuation">(</span>kickseed<span class="token punctuation">)</span>01/07/201208:05:01 PM CPU %user %nice %system %iowait %steal %idle08:15:01 PM all  <span class="token number">0.49</span>  <span class="token number">0.00</span>    <span class="token number">1.12</span>    <span class="token number">0.62</span>   <span class="token number">0.00</span> <span class="token number">97.77</span>08:25:01 PM all  <span class="token number">0.49</span>  <span class="token number">0.00</span>    <span class="token number">2.15</span>    <span class="token number">1.21</span>   <span class="token number">0.00</span> <span class="token number">96.16</span>Average:    all  <span class="token number">0.49</span>  <span class="token number">0.00</span>    <span class="token number">1.63</span>    <span class="token number">0.91</span>   <span class="token number">0.00</span> <span class="token number">96.96</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;如果想要获取非当天的数据，使用-f选项，后面输入存储在<code>/var/log/sysstat</code>或<code>/var/log/sa</code>文件夹内统计信息文件的完整路径。例如，想要获取本月第6天的统计信息，你需要输入:<br><code>$ sar -f /var/1og/sysstat/sa06</code><br>&emsp;&emsp;也可以正常混合使用任意其他sar选项，从而获得特定类型的统计信息。</p><h1 id="系统启动问题"><a href="#系统启动问题" class="headerlink" title="系统启动问题"></a>系统启动问题</h1><p>&emsp;&emsp;Linux系统可能会出很多问题，其中最让人感到崩溃的也许就是系统无法启动了。毕竟，服务器系统无法启动就意味着它停止了所有服务，直到这个问题得到解决为止。更重要的是，你想要获取的任何数据可能都依赖于系统备份和运行的能力。<br>&emsp;&emsp;有很多问题都可能会导致系统无法启动。为了让大家更好地查明系统为什么无法启动，本章首先会介绍启动过程。一旦明白了系统启动的流程，你就可以观察自己的系统，看看它卡在了哪一步。讲完启动流程之后，本章还会强调几类主要的启动问题，以及如何诊断并修复这些问题。<br>&emsp;&emsp;从传统意义上讲，处理启动问题是系统管理员的工作，不过，任何DevOps团队中的成员都有责任让系统中的软件包保持最新状态。当内核或者发行版的更新出现问题的时候，你自己就能够让系统恢复正常再好不过。</p><h2 id="3-1-Linux启动流程"><a href="#3-1-Linux启动流程" class="headerlink" title="3.1 Linux启动流程"></a>3.1 Linux启动流程</h2><p>&emsp;&emsp;第1章曾经提到过，如果你想要擅长故障排除工作，那么你最好清楚系统如何运行。这个道理也适用于处理启动问题，特别是因为有众多原因可以引发启动问题。</p><h3 id="3-1-1-BIOS"><a href="#3-1-1-BIOS" class="headerlink" title="3.1.1 BIOS"></a>3.1.1 BIOS</h3><p>&emsp;&emsp;启动过程中最先执行的程序是BIOS（基本输入输出系统）。系统启动的时候，首先会看到这个界面。尽管对于不同的系统来说，这个程序的界面不尽相同，但是BIOS都会初始化硬件，包括检测硬盘驱动器、USB磁盘、CD-ROM、网卡以及任何其他可以从中启动的硬件。然后BIOS会根据所配置的启动设备的顺序一步步检查，直到找到可以从中成功启动的设备。对于Linux服务器来说，这个过程通常意味着读取MBR（主引导记录，即硬盘上的前512字节）、载入并执行MBR中的启动代码，由此开始启动流程。</p><h3 id="3-1-2-GRUB和Linux启动载入程序"><a href="#3-1-2-GRUB和Linux启动载入程序" class="headerlink" title="3.1.2 GRUB和Linux启动载入程序"></a>3.1.2 GRUB和Linux启动载入程序</h3><p>&emsp;&emsp;BIOS将硬件初始化完毕，找到第一个可以启动的设备之后，启动载入程序将接管下面的工作。在一般的Linux服务器上，这个启动载入程序可能是GRUB，不过之前也有人用过一个名为LILO的程序。GRUB通常是系统从硬盘启动时需要用到的启动载入程序，当系统从USB、CD-ROM或网络启动的时候，分别会使用syslinux 、isolinux或pxelinux作为相应的启动载入程序。尽管syslinux及其他启动载入程序的细节与GRUB不尽相同，但是它们的功能都是载入各种软件并读取配置文件，从配置文件中能够得知启动什么操作系统，在哪里找到对应操作系统的内核以及当系统启动时应用什么样的配置。<br>&emsp;&emsp;当GRUB被载入之后，会在MBR中会执行一小部分代码（称之为第一阶段）。因为MBR中仅能容纳446字节的启动代码（其余部分用来保存分区表信息），这些代码仅仅够定位到其他代码，然后执行这些代码。GRUB代码的下一阶段可以让它访问Linux的文件系统、读取并载入配置文件，由此找出应该启动哪个操作系统和这些操作系统在硬盘的位置，以及应当传入哪些选项参数。对于Linux来说，这可能包含硬盘上很多不同的内核版本以及能帮助解决问题的特殊恢复模式。通常配置文件中也会描述可以用来查看并修改启动选项的各类菜单。<br>&emsp;&emsp;绝大多数现代操作系统中，GRUB都会显示一个非常友好的启动界面，有时带有一些图形，一般还会有一个倒计时。通常你会看到一个菜单，上面有一个可以选择启动哪个操作系统的列表（见图），不过有时需要按下类似于Esc的按键（在GRUB2中要按下Shift键）才能看到这个菜单。GRUB也允许查看和修改指定的启动时间设置，这一点在进行问题处理的时候非常方便，因为你可以在没有恢复盘的情况下，修正可能存在于GRUB配置文件中的错误。</p><p><img src="/medias/drawing-bed/oops/1.jpg"></p><h3 id="3-1-3-内核与初始RAM磁盘"><a href="#3-1-3-内核与初始RAM磁盘" class="headerlink" title="3.1.3 内核与初始RAM磁盘"></a>3.1.3 内核与初始RAM磁盘</h3><p>&emsp;&emsp;一旦在GRUB中选择了特定的内核（或者倒计时结束，系统会自动为你做出选择），GRUB会将Linux核心载入到RAM中并执行，同时传入启动时配置的所有参数。通常GRUB也会随着内核载入初始RAM磁盘（InitialRAM Disk，Initrd）。在现代Linux系统中，它通常是gzip格式压缩的备份文档，称为initramfs文件，一般包含一个基本的小型Linux根文件系统。在这个文件系统中，有一些重要的配置文件、内核模块以及内核需要用来寻找并挂载（mount）真实根文件系统的程序。<br>&emsp;&emsp;以前，启动时的这些功能都直接构建在 Linux内核中。但是，随着硬件开始支持很多不同类型的文件系统以及SCSI和IDE设备，并带有一些额外特性（如RAID、LVM和文件系统加密），内核变得越来越大。因此，这些特性被分拆到独立的模块中，这样就可以仅仅载入系统需要的模块。因为硬件驱动器和文件系统支持都分拆到了模块中，所以你会面临鸡和蛋的问题。如果模块处于根文件系统中，而你又需要用这些模块来读取根文件系统，怎样才能完成挂载?解决方法就是将这些重要的模块都放入初始RAM磁盘中。<br>&emsp;&emsp;随着内核的启动，它会将initramfs文件解压到RAM中，然后在initramfs文件的根目录中运行一段名为init的脚本。这仅仅是一段标准的shell脚本，用来先检测硬件，然后创建挂载点，之后再挂载根文件系统。因为这个路径是由GRUB在它首次加载内核的时候传入的一个启动参数（root=），所以系统内核知道根文件系统在哪里。在挂载了真正的根文件系统之后，initramfs文件的最后一步是执行<code>/sbin/init</code>程序，后者会接管启动流程中其余的工作。</p><h3 id="3-1-4-sbin-init"><a href="#3-1-4-sbin-init" class="headerlink" title="3.1.4 /sbin/init"></a>3.1.4 /sbin/init</h3><p>&emsp;&emsp;<code>/sbin/init</code>程序是系统中所有程序的父进程。这个进程的PID总是1，它负责启动组成Linux操作系统的其他进程。那些使用过一段时间Linux操作系统的用户都知道，Ubuntu服务器上的init程序与大家之前习惯使用的init程序不同。它们在如何初始化UNIX操作系统方面有一些不同的标准，但是绝大多数传统Linux发行版都使用著名的System V init模型（马上就会讲到），然而一些现代Linux发行版选择使用其他系统，如Upstart，或者最近的systemd例如，Ubuntu服务器选择使用Upstart，但它仍然保留了System V init程序的杰出结构，如运行等级（runlevel）和针对向后兼容的letc/rc?.d文件夹，而且 Upstart现在开始处理底层所有的工作。因为服务器上最常使用的两种init系统是Sytem V init和Upstart，所以下面就分别介绍它们。  </p><ol><li>传统的 System V lnit</li></ol><p>&emsp;&emsp;System V指的是由AT&amp;T开发的原始UNIX操作系统中的一个特定版本。在这种风格的init程序中，init进程会读取<code>/etc/inittab</code>的配置文件，通过它来查看默认的运行等级，下面会讨论到这点。然后进入这个运行等级，启动配置在这个运行等级下应该启动的进程。<br>&emsp;&emsp;System V init进程由很多称为运行等级的不同系统状态定义。运行等级用数字区分，从0到6，每个数字代表了一个完全不同的系统状态。例如，运行等级0留给了停止的系统状态。当你进入运行等级0，系统就会终止所有的运行进程，卸载所有的文件系统并断电。类似地，运行等级6代表重启机器。运行等级1代表单用户模式——仅有单个用户可以登录到系统中的状态。通常，没有几个进程能在单用户模式下启动，所以这个运行等级在处理系统无法完全启动的问题上非常有用。在默认的GRUB菜单中能看到一个恢复模式，它会启动进入运行等级为1的系统状态中。<br>&emsp;&emsp;运行等级2到5留给发行版使用，最终由用户来定义。定义诸多运行等级的想法是让你创建进入服务器的不同模式。很多Linux发行版都会为图形桌面设置一个运行等级（在Red Hat中，为运行等级5），并为非图形界面设置另一个运行等级（在Red Hat中，为运行等级3），这是一个传统的做法。你也可以定义其他的运行等级，例如，为启动不带网络访问的系统定义一个运行等级。然后在启动的时候，根据提示输入一个参数，用你指定的运行等级覆盖默认的运行等级。系统启动之后，你也可以用init命令后跟着运行等级的方式更改当前的运行等级。所以，想要更改为单用户模式，应该输入sudo init 1。<br>&emsp;&emsp;除了/etc/inittab，对于System V init系统启动和关闭脚本或者初始化脚本，以及系统的主要服务来说，还有很多其他重要的文件和文件夹。  </p><ul><li><input disabled="" type="checkbox"> /etc/init.d<br>该文件夹包含所有服务在各个运行等级中的全部启动脚本。一般来说，它们都是标准的shell脚本，遵守最基本的标准。每个脚本最少接受两个参数start和stop，它们分别代表启动和停止服务（如网页服务）。除此之外，init脚个通常还会接受一些额外的选项，如restart（重启服务器）、status（返回服务当前状态）、reload（告知服务从配置文件中重新载入配置）以及force-reload（强制服务重载它的配置）。当用不带参数的方式运行脚本的时候，一般应该返回一个它会接受的参数列表。  </li><li><input disabled="" type="checkbox"> /etc/rc0.d ~ /etc/rc6.d<br>这些文件夹分别包含每个运行等级对应的init脚本。在实际使用中，它们一般通过符号链接到/etc/init.d文件夹下的实际文件。不过要注意的是，这些文件卖下的init脚本都有一些特别的名字，命名都以S（start）、K（kill）或D（disable）开头，后面跟一个数字。当init进人一个运行等级的时候，它会按照数字顺序运行所有以K开头的脚本并传人stop参数，除非对应的init脚本在前一个运行等级中没有启动。然后init按照数字顺序运行所有以S开头的脚本并传人start参数。任何以D开头的init脚本都会被忽略——这让你可以在指定的运行等级禁止一个脚本，或者你也可以仅仅移除全部符号链接。所以如果你有两个脚本，S01foo和S05bar，init首先会运行S01foo start，当它进人特定的运行等级后再执行S05bar start。  </li><li><input disabled="" type="checkbox"> /etc/rcS.d<br>在这个文件卖中，你会找到在变更到特定的运行等级之前，运行的所有系统init脚本。修改这个文件夹中的脚本时要小心，因为如果它们停止工作，你将无法进人单用户模式。  </li><li><input disabled="" type="checkbox"> /etc/rc.local<br>并非所有的发行版都使用了rc.local，通常它是一个留给用户修改的shell脚本。一般会在init进程结束的时候运行它，所以你可以在这里放一些想要运行的额外脚本，而不用再创建自己的init脚本。<br>&emsp;&emsp;这里有一个标准的System V init系统的启动过程。首先init启动并读取/etc/inittab文件以确定默认的运行等级，在这个例子中.运行等级为2。然后init进入/etc/rcS.d文件夹，按照数字顺序用start作为参数运行所有以S开头的脚本文件。然后init在/etc/rc2.d文件夹中做相同的工作。最后init执行完毕，但是还会在后台运行，等待运行等级的更改。</li></ul><ol start="2"><li>Upstart</li></ol><p>&emsp;&emsp;System V init是一个非常优秀的系统，而且在Linux系统上也工作了很多年，不过，它并非完美无瑕。例如，当服务宕掉的时候，init脚本没有一个自动重启机制，你必须借助其他工具来监视和重启这些进程。<br>&emsp;&emsp;init脚本的另一个问题是它们通常仅受到根据运行等级更改或者系统启动的影响，除此之外，除非手动操作，这些脚本都不会运行。依赖网络连接的init脚本就是一个非常好的例子。在基于Red Hat和基于Debian系统中，名为network或networking 的init脚本分别用来建立网络连接。任何依赖于网络连接的init脚本与其他脚本相比都有一个很大的数字，这样才能保证网络脚本运行之后它们才运行。但是如果你拔掉服务器的网线，再启动会怎样呢?网络脚本还会执行，但是所有依赖网络连接的init脚本都会一个接一个地超时。最后你会得到一个登录提示并可以登录。等你登录之后，如果你插上网线，重启网络服务，你会连上网络，但是没有一个需要网络连接的服务会自动重启，你必须一个个地手动启动这些服务。<br>&emsp;&emsp;Upstart的设计初衷并不仅仅是为了弥补System V init的缺陷,而且还为了提供更加健壮的服务管理。Upstart的一大特性是它由事件驱动。Upstart持续监控系统中特定事件的发生，当这些事件发生的时候，Upstart就会基于这些事件做出相应的动作。事件可能是系统启动、系统关闭、按下Ctrl-Alt-Del组合键、运行等级更改或者Upstart脚本的启动或停止。要弄清楚事件驱动的系统如何改进了传统的init脚本，让我们以前面拔下网线启动服务器为例。你可以创建一个Upstart脚本，当插人网线的时候会触发这个脚本。接着，这个脚本会为你启动网络服务。然后，当网络服务成功启动之后，你就可以配置触发任何需要网络连接的服务。现在当系统启动的时候，插上网线即可，Upstart脚本会帮你完成剩下的工作。<br>&emsp;&emsp;Upstart并没有完全替代System V init，至少对于系统服务来说没能完全替代。目前，Upstart的确替代了int和/etc/inittab文件的功能，它管理运行等级的更改、系统启动和关闭以及控制ttysoUpstart脚本中移植了越来越多的功能，但是你仍然会在/etc/init.d中找到部分标准的init脚本，所有标准的symlink都在letc/rc?.d文件夹中。不同的是，当运行等级更改的时候，Upstart会开启或者停<br>止服务。<br>&emsp;&emsp;Upstart脚本在/etclinit文件夹中，它们与init脚本的区别很大，因为它们不是常规的shell脚本。为了帮助解释它的语法，下面是一个Upstart脚本(/etc/init/rc.conf）的例子，在运行等级更改的时候会触发这个脚本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#rc - System V runlevel compatibility</span><span class="token comment">#</span><span class="token comment"># This task runs the old Systen V-style rc script when changing</span><span class="token comment">#between runleve1s.</span><span class="token string">"System V runlevel compatibility"</span>descriptionauthor<span class="token string">"Scott James Remnant &lt;scott@netsplit.com>"</span>start on runleve1 <span class="token punctuation">[</span>0123456<span class="token punctuation">]</span>stop on runleve1<span class="token punctuation">[</span> <span class="token operator">!</span>SRUNLEVEL<span class="token punctuation">]</span><span class="token builtin class-name">export</span> RUNLEVEL<span class="token builtin class-name">export</span> PREVLEVELtask<span class="token builtin class-name">exec</span> /etc/init.d/rc <span class="token variable">$RUNLEVEL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="磁盘满、磁盘损坏问题"><a href="#磁盘满、磁盘损坏问题" class="headerlink" title="磁盘满、磁盘损坏问题"></a>磁盘满、磁盘损坏问题</h1><h1 id="服务器宕机、网络问题"><a href="#服务器宕机、网络问题" class="headerlink" title="服务器宕机、网络问题"></a>服务器宕机、网络问题</h1><h1 id="DNS服务器问题"><a href="#DNS服务器问题" class="headerlink" title="DNS服务器问题"></a>DNS服务器问题</h1><h1 id="邮件问题"><a href="#邮件问题" class="headerlink" title="邮件问题"></a>邮件问题</h1><h1 id="Web服务器问题"><a href="#Web服务器问题" class="headerlink" title="Web服务器问题"></a>Web服务器问题</h1><h1 id="MySQL数据库问题"><a href="#MySQL数据库问题" class="headerlink" title="MySQL数据库问题"></a>MySQL数据库问题</h1><h1 id="硬件问题"><a href="#硬件问题" class="headerlink" title="硬件问题"></a>硬件问题</h1><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 系统 </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mycat使用</title>
      <link href="/posts/dad9.html"/>
      <url>/posts/dad9.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="Mycat安装测试使用"><a href="#Mycat安装测试使用" class="headerlink" title="Mycat安装测试使用"></a>Mycat安装测试使用</h1><h2 id="Mycat简介："><a href="#Mycat简介：" class="headerlink" title="Mycat简介："></a>Mycat简介：</h2><p><code>MyCAT</code> 是一款开源的<code>Mysql</code>企业级集群应用，它是基于阿里的开源产品<code>Cobar</code>发展出来的。<code>MyCAT</code>提供了类似<code>Mysql</code>的接口，可以平滑的将单机<code>Mysql</code>迁移到<code>Mysql</code>集群上，解决数据存储和业务规模迅速增长情况下的数据瓶颈问题。  </p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>环境需要JDK1.8，mysql5.5-5.7版本之间（稳定版）<br><img src="/medias/drawing-bed/mycat/0.png"></p><p>下载安装mycat安装包  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz<span class="token function">wget</span>  http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>tar 解压mycat安装包  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz -C /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/drawing-bed/mycat/1.png"><br><img src="/medias/drawing-bed/mycat/2.png"></p><p>安装完成</p><h1 id="测试修改配置文件"><a href="#测试修改配置文件" class="headerlink" title="测试修改配置文件"></a>测试修改配置文件</h1><h2 id="主要配置文件："><a href="#主要配置文件：" class="headerlink" title="主要配置文件："></a>主要配置文件：</h2><p><code>schema.xml</code>中定义逻辑库，表、分片节点等内容；<br><code>rule.xml</code>中定义分片规则；<br><code>server.xml</code>中定义用户以及系统相关变量，如端口等<br><img src="/medias/drawing-bed/mycat/3.png"></p><p><code>wrapper.conf</code>是控制mycat jvm的一些启动参数。<br><code>server.xml</code>是Mycat服务器参数调整和用户授权的配置文件。<br><code>schema.xml</code>是逻辑库定义和表以及分片定义的配置文件。<br><code>rule.xml</code>是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改需要重启Mycat。  </p><p><code>server.xml</code>是MyCAT对外的”虚拟数据库”配置文件。所谓的”虚拟数据库”是说，MyCAT将多个Mysql集群整合起来对外提供服务，提供服务的接口仍然采用Mysql的形式，因此，通过仿造Mysql接口，让调用程序以为自己是在访问Mysql数据库，就是所谓的”虚拟数据库”。  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:server</span> <span class="token name">SYSTEM</span> <span class="token string">"server.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>server</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useSqlStat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 1为开启实时统计、0为关闭 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useGlobleTableCheck<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --></span>    <span class="token comment">&lt;!--配置id(序列)的生成方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sequnceHandlerType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--  &lt;property name="useCompression">1&lt;/property>--></span> <span class="token comment">&lt;!--1为开启mysql压缩协议--></span>    <span class="token comment">&lt;!-- &lt;property name="fakeMySQLVersion">5.6.20&lt;/property>--></span> <span class="token comment">&lt;!--设置模拟的MySQL版本号--></span>    <span class="token comment">&lt;!-- &lt;property name="processorBufferChunk">40960&lt;/property> --></span>    <span class="token comment">&lt;!-- &lt;property name="processors">1&lt;/property> --></span>    <span class="token comment">&lt;!--&lt;property name="processorExecutor">32&lt;/property>  --></span>    <span class="token comment">&lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>processorBufferPoolType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --></span>    <span class="token comment">&lt;!--&lt;property name="maxStringLiteralLength">65535&lt;/property>--></span>    <span class="token comment">&lt;!--&lt;property name="sequnceHandlerType">0&lt;/property>--></span>    <span class="token comment">&lt;!--&lt;property name="backSocketNoDelay">1&lt;/property>--></span>    <span class="token comment">&lt;!--&lt;property name="frontSocketNoDelay">1&lt;/property>--></span>    <span class="token comment">&lt;!--&lt;property name="processorExecutor">16&lt;/property>--></span>    <span class="token comment">&lt;!--&lt;property name="serverPort">8066&lt;/property> &lt;property name="managerPort">9066&lt;/property> --></span>    <span class="token comment">&lt;!--&lt;property name="idleTimeout">300000&lt;/property> &lt;property name="bindIp">0.0.0.0&lt;/property> --></span>    <span class="token comment">&lt;!--&lt;property name="frontWriteQueueSize">4096&lt;/property> &lt;property name="processors">32&lt;/property> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDistributedTransactions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useOffHeapForMerge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--单位为m--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memoryPageSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--单位为k--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spillsFileBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useStreamOutput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--单位为m--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>systemReserveMemorySize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>384m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--是否采用zookeeper协调切换  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useZKSwitch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 全局SQL防火墙设置 --></span>  <span class="token comment">&lt;!--     &lt;firewall>     &lt;whitehost>        &lt;host host="127.0.0.1" user="mycat"/>        &lt;host host="127.0.0.2" user="mycat"/>    &lt;/whitehost>    &lt;blacklist check="false">    &lt;/blacklist>    &lt;/firewall>  --></span>  <span class="token comment">&lt;!-- 配置mycat服务连接用户名密码 ,在项目中的数据源的用户名密码则使用这个，不再直连mysql--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TESTDB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 表级 DML 权限设置 --></span>    <span class="token comment">&lt;!--    &lt;privileges check="false">      &lt;schema name="TESTDB" dml="0110" >        &lt;table name="tb01" dml="0000">&lt;/table>        &lt;table name="tb02" dml="1111">&lt;/table>      &lt;/schema>    &lt;/privileges>         --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  &lt;user name="user">    &lt;property name="password">user&lt;/property>    &lt;property name="schemas">TESTDB&lt;/property>    &lt;property name="readOnly">true&lt;/property>  &lt;/user>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>server</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表明该虚拟数据库有一个<code>schema</code>，<code>TESTDB</code>；<br>有2个用户<code>test</code>和<code>user</code>，密码分别是<code>root</code>和<code>user</code>，<br><code>user</code>用户是只读的，<code>root</code>用户未设置只读,有增删改查权限；<br>默认的SQL解析器是<code>druidparser</code>。<br><code>schema.xml</code>逻辑库定义和表以及分片定义的配置文件  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:schema</span> <span class="token name">SYSTEM</span> <span class="token string">"schema.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- TESTDB为mycat的逻辑表,在server.xml中的指定,并与mycat的登录账户绑定在一起 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TESTDB<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    配置物理表在mycat中的逻辑关系,这里指定了mycat中有一张逻辑表名为user,这张表的实际数据分散在dn1,dn2,dn3中对应的不同数>据库里面,且分片规则采用了mod-long，当然可以指定不同的分片规则，分片规则在rile.xml配置    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1,dn2,dn3<span class="token punctuation">"</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rule1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    userInfo表是user表的关联表,用于关联查询的情况下,mycat的分片采用er模型,joinKey="userId"为userInfo表的字段，联user表的id,当然也不定非得是id,通过parentKey="xx"可以指定关联user表的字段    --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>childTable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span>  <span class="token attr-name">joinKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">parentKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 配置3个节点，该节点的三个属性依次为:节点的名称,服务器ip,数据库实例(MySQL真正的实例) --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bogon<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn2<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bogon<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dn3<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bogon<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment">&lt;!-- 配置连接的数据库,需配置好连接数据库的用户名和密码及ip,这个可以配置多个地址,且可分为读数据库和写数据库 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bogon<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 心跳,mycat服务每隔一段时间会发出该sql语句,验证该服务器是否被停掉 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">></span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 指定自己mysql的地址及用户名密码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bogon<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>192.168.10.142:3306<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>schema</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Schema</code>中主要配置<code>Mycat数据库</code>，<code>MySQL表</code>，<code>分片规则</code>，<code>分片类型</code>。  </p><h2 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h2><p>第1块是<code>schema</code>块，主要描述了虚拟数据库的<code>schemaTESTDB</code>中有哪些表，每个表分布在哪些数据节点上，分布的方法采用哪种算法。例如<code>&lt;table name=&quot;users&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;rule1&quot; /&gt;</code>，表示<code>user</code>表分布在<code>dn1</code>,<code>dn2</code>,<code>dn3</code>这3个节点上，分布的方法采用<code>rule1</code>算法（<code>rule.xml</code>文件中的配置）。  </p><h2 id="dataNode"><a href="#dataNode" class="headerlink" title="dataNode"></a>dataNode</h2><p>第2块是<code>dataNode</code>，表示该数据库有哪些数据节点，以及这些数据节点实际对应的数据服务器和数据库名，这里配置了3个节点<code>dn1</code>,<code>dn2</code>,<code>dn3</code>，都是在<code>bogon</code>服务器上，数据库名分别是<code>db0</code>,<code>db1</code>,<code>db2</code>，其实，这也正是前面<code>schema</code>块中用到的。  </p><h2 id="dataHost"><a href="#dataHost" class="headerlink" title="dataHost"></a>dataHost</h2><p>第3块是<code>dataHost</code>，这部分是实际的数据库服务器配置，这里测试配置了本地<code>Mysql</code>数据库，地址在<code>192.168.10.142:3306</code>，用户名都是<code>root</code>，密码是<code>123456</code>，并且指定了心跳是<code>select user()</code>。  </p><p>这里面有两个参数需要注意，<code>balance</code>和<code>switchType</code>。<br><code>balance</code>指的负载均衡类型，目前的取值有4种：<br><code>balance=&quot;0&quot;</code>, 不开启读写分离机制，所有读操作都发送到当前可用的<code>writeHost</code>上。<br><code>balance=&quot;1&quot;</code>，全部的<code>readHost</code>与<code>stand by writeHost</code>参与<code>select</code>语句的负载均衡，简单的说，当双主双从模式<code>(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)</code>，正常情况下，<code>M2</code>,<code>S1</code>,<code>S2</code>都参与<code>select</code>语句的负载均衡。<br><code>balance=&quot;2&quot;</code>，所有读操作都随机的在<code>writeHost</code>、<code>readhost</code>上分发。<br><code>balance=&quot;3&quot;</code>，所有读请求随机的分发到<code>wiriterHost</code>对应的<code>readhost</code>执行，<code>writerHost</code>不负担读压力  </p><p><code>switchType</code>指的是切换的模式，目前的取值也有4种：<br><code>switchType=&#39;-1&#39;</code> 表示不自动切换<br><code>switchType=&#39;1&#39;</code> 默认值，表示自动切换<br><code>switchType=&#39;2&#39;</code> 基于<code>MySQL主从同步</code>的状态决定是否切换,心跳语句为<code>show slave status</code><br><code>switchType=&#39;3&#39;</code> 基于<code>MySQL galary cluster</code>的切换机制（适合集群）（1.4.1），心跳语句为<code>show status like &#39;wsrep%&#39;</code>。  </p><p><code>rule.xml</code>定义分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件。  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:rule</span> <span class="token name">SYSTEM</span> <span class="token string">"rule.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>rule</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rule1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">></span></span>mod-long<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mod-long<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>io.mycat.route.function.PartitionByMod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- how many data nodes --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>rule</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据切分中作为表切分规则中最重要的配置，表的切分方式决定了数据切分后的性能好坏，因此也是最重要的配置。  </p><p>如上面例子配置了一个切分规则，名为<code>rule1</code>对应的切分方式（<code>function</code>）是按日期切分，该配置中： </p><h2 id="tableRule"><a href="#tableRule" class="headerlink" title="tableRule"></a>tableRule</h2><p><code>name</code> 为<code>schema.xml</code>中<code>table</code>标签中对应的<code>rule=&quot;rule1&quot;</code>,也就是配置表的分片规则，<br><code>columns</code> 是表的切分字段：<code>id</code>。<br><code>algorithm</code> 是规则对应的切分规则：<code>映射到function的name</code>。 </p><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p><code>function</code> 配置是分片规则的配置。<br><code>name</code> 为切分规则的名称，名字人员取，但是需要与<code>tableRule</code>中匹配。<br><code>class</code> 是切分规则对应的切分类，写死，需要哪种规则则配置哪种，例如本例是求模法：<code>io.mycat.route.function.PartitionByMod</code><br>（上面<code>columns</code>标识将要分片的表字段，<code>algorithm</code>分片函数，<br>此种配置非常明确即根据<code>id</code>与<code>count</code>（你的结点数）进行求模预算，相比方式1，此种在批量插入时需要切换数据源，<code>id不连续</code>）。<br><code>property</code> 标签是切分规则对应的不同属性，不同的切分规则配置不同。 </p><h1 id="登录演示mycat"><a href="#登录演示mycat" class="headerlink" title="登录演示mycat"></a>登录演示mycat</h1><p>登录方式类似于<code>mysql</code>的服务端登陆，目前<code>mycat</code>有两个端口，<code>8066</code>数据端口，<code>9066</code>管理端口。<br><code>mysql -h192.168.10.142 -uroot -p -P8066</code><br><code>-h</code> 后面是主机，即当前<code>mycat</code>按照的主机地址，本地可用<code>127.0.0.1</code>远程需要远程<code>ip</code><br><code>-u</code> <code>Mycat server.xml</code>中配置的逻辑库用户<br><code>-p</code> <code>Mycat server.xml</code>中配置的逻辑库密码<br><code>-P</code> 后面是端口默认<code>9066</code>，注意<code>P</code>是大写<br><code>-d</code> <code>Mycat server.xml</code>中配置的逻辑库  </p><p>数据端口与管理端口的配置端口修改：<br>数据端口默认<code>8066</code>，管理端口默认<code>9066</code>，如果需要修改需要配置<code>serve.xml</code><br><img src="/medias/drawing-bed/mycat/4.png"><br><img src="/medias/drawing-bed/mycat/5.png"><br><img src="/medias/drawing-bed/mycat/6.png"></p><p>登录查看真实数据库查看内容是否在<code>db0</code>,<code>db1</code>,<code>db2</code>库的<code>users</code>表中<br><img src="/medias/drawing-bed/mycat/7.png"><br><img src="/medias/drawing-bed/mycat/8.png"><br>成功！！！  </p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>启动<code>MyCAT</code>之前，需要先检查一些配置： </p><ol><li><code>java</code>的版本需要是<code>1.7</code>或以上；  </li><li><code>Mysql</code>的配置文件需要加一行<code>lower_case_table_names = 1</code>在<code>[mysqld]</code>栏目中，这个设置为<code>Mysql</code>大小写不敏感，否则可能会发生表找不到的问题； </li><li><code>ERROR 3009 (HY000): java.lang.IllegalArgumentException: Invalid DataSource:1</code><br>这个有可能是<code>Mycat</code>和<code>MySQL</code>部署在同一台机器上，而在<code>schema.xml</code>是使用了<code>IP</code>的，但是账号只能使用<code>localhost</code>登陆，所以会出现本地的<code>Mycat</code>无法连接<code>MySQL</code> </li><li>添加<code>MYCAT_HOME</code>环境变量指向解压的<code>mycat</code>目录，主要是为了一些<code>bin</code>目录下的脚本的使用。 </li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> mysql </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ntp服务器</title>
      <link href="/posts/d7b4.html"/>
      <url>/posts/d7b4.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p><strong>中国 | 域名：<font color=Blue>cn.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">120.25.115.20（深圳）</td><td>阿里云</td></tr><tr><td align="left">2</td><td align="center">182.92.12.11（北京）</td><td>阿里云</td></tr><tr><td align="left">3</td><td align="center">203.107.6.88（青岛）</td><td>阿里云</td></tr><tr><td align="left">4</td><td align="center">120.25.108.11（深圳）</td><td>阿里云</td></tr></tbody></table><p><strong>中国教科网 | 域名：<font color=Blue>edu.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">202.118.1.81（沈阳）</td><td>东北大学</td></tr><tr><td align="left">2</td><td align="center">202.118.1.130（沈阳）</td><td>东北大学</td></tr><tr><td align="left">3</td><td align="center">202.112.29.82（沈阳）</td><td>东北大学</td></tr><tr><td align="left">4</td><td align="center">202.112.31.197（沈阳）</td><td>东北大学</td></tr></tbody></table><p><strong>中国台湾 | 域名：<font color=Blue>tw.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">103.18.128.60（台北）</td><td>NtpPod</td></tr><tr><td align="left">2</td><td align="center">123.204.45.116（高雄）</td><td>NtpPod</td></tr></tbody></table><p><strong>中国香港 | 域名：<font color=Blue>hk.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">118.193.151.223（香港）</td><td>NtpPod</td></tr></tbody></table><p><strong>日本 | 域名：<font color=Blue>jp.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">133.100.11.8（福冈）</td><td>NtpPod</td></tr><tr><td align="left">2</td><td align="center">129.250.35.251（美国）</td><td>NtpPod</td></tr><tr><td align="left">3</td><td align="center">106.187.100.179（东京）</td><td>NtpPod</td></tr><tr><td align="left">4</td><td align="center">106.186.122.232（东京KDDI）</td><td>NtpPod</td></tr></tbody></table><p><strong>韩国 | 域名：<font color=Blue>kr.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">106.247.248.106（京畿道）</td><td>NtpPod</td></tr><tr><td align="left">2</td><td align="center">211.233.40.78（韩国）</td><td>NtpPod</td></tr></tbody></table><p><strong>新加坡 | 域名：<font color=Blue>sgp.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">218.186.3.36（新加坡）</td><td>NtpPod</td></tr><tr><td align="left">2</td><td align="center">128.199.134.40（新加坡）</td><td>NtpPod</td></tr><tr><td align="left">3</td><td align="center">188.166.245.58（新加坡）</td><td>NtpPod</td></tr><tr><td align="left">4</td><td align="center">202.73.57.107（新加坡）</td><td>NtpPod</td></tr><tr><td align="left">5</td><td align="center">103.11.143.248（新加坡）</td><td>NtpPod</td></tr></tbody></table><p><strong>美国 | 域名：<font color=Blue>us.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">208.53.158.34（芝加哥）</td><td>NtpPod</td></tr><tr><td align="left">2</td><td align="center">66.228.42.59（新泽西）</td><td>NtpPod</td></tr><tr><td align="left">3</td><td align="center">158.69.48.97（加拿大魁北克）</td><td>NtpPod</td></tr><tr><td align="left">4</td><td align="center">216.218.254.202（加利福尼亚）</td><td>NtpPod</td></tr></tbody></table><p><strong>德国 | 域名：<font color=Blue>de.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">131.188.3.220（巴伐利亚）</td><td>NtpPod</td></tr><tr><td align="left">2</td><td align="center">131.188.3.223（巴伐利亚）</td><td>NtpPod</td></tr></tbody></table><p><strong>印度尼西亚 | 域名：<font color=Blue>ina.ntppod.com</font></strong></p><table><thead><tr><th align="left">序号</th><th align="center">服务器IP地址</th><th>提供者</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">203.114.74.17（雅加达）</td><td>NtpPod</td></tr></tbody></table><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> ntp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix监控配置</title>
      <link href="/posts/8737.html"/>
      <url>/posts/8737.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="环境配置-server端和agent端"><a href="#环境配置-server端和agent端" class="headerlink" title="环境配置(server端和agent端)"></a>环境配置(server端和agent端)</h2><p>升级系统组件到最新的版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  yum -y update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭selinux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setenforce <span class="token number">0</span>       <span class="token comment">#临时关闭命令</span><span class="token function">vi</span> /etc/selinux/config    <span class="token comment">#将SELINUX=enforcing改为SELINUX=disabled 设置后需要重启才能生效</span>getenforce         <span class="token comment">#检测selinux是否关闭，Disabled 为关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关闭防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --state    <span class="token comment">#查看默认防火墙状态，关闭后显示not running，开启后显示running</span>systemctl stop firewalld.service    <span class="token comment">#临时关闭firewal</span>systemctl disable firewalld.service <span class="token comment">#禁止firewall开机启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="zabbix服务端配置-server端"><a href="#zabbix服务端配置-server端" class="headerlink" title="zabbix服务端配置(server端)"></a>zabbix服务端配置(server端)</h2><p>zabbix需要借助LAMP或者LNMP环境,LAMP比较方便配置所以先搭建LAMP环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装软件包和其他工具包</span> yum <span class="token function">install</span> -y httpd mariadb-server mariadb php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mhash <span class="token function">rpm</span> -qa httpd php   mariadb    <span class="token comment"># 或者  </span> <span class="token function">rpm</span> -qa httpd php mysql-community-server   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加首页支持格式　</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span>  /etc/httpd/conf/httpd.conf     DirectoryIndex index.html index.php  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置时区  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/php.ini      date.timezone <span class="token operator">=</span> PRC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动并加入开启自启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start httpd   <span class="token comment">#启动并加入开机自启动httpd</span>systemctl <span class="token builtin class-name">enable</span> httpdsystemctl start mysqld  <span class="token comment">#启动并加入开机自启动mysqld</span>systemctl <span class="token builtin class-name">enable</span> mysqldss -anplt <span class="token operator">|</span> <span class="token function">grep</span> httpd   <span class="token comment">#查看httpd启动情况，80端口监控表示httpd已启动</span>ss -naplt <span class="token operator">|</span> <span class="token function">grep</span> mysqld  <span class="token comment">#查看mysqld启动情况，3306端口监控表示mysqld已启动　</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个测试页测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  <span class="token function">sh</span> -c <span class="token string">'echo "&lt;?php echo phpinfo();?>"  > index.php '</span>  <span class="token comment"># 直接使用sudo echo 会提示权限不足   例如：sudo echo "&lt;?php echo phpinfo();?>"  > index.php </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/zabbix/1.png"></p><h2 id="数据库配置-server端"><a href="#数据库配置-server端" class="headerlink" title="数据库配置(server端)"></a>数据库配置(server端)</h2><p>初始化数据库设置数据库root密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysqladmin -u root password <span class="token number">123456</span>  <span class="token comment">#root用户登陆数据库</span>mysql -u root -p123456       <span class="token comment">#创建zabbix数据库（中文编码格式）</span>CREATE DATABASE zabbix character <span class="token builtin class-name">set</span> utf8 collate utf8_bin<span class="token punctuation">;</span>   <span class="token comment">#授予zabbix用户zabbix数据库的所有权限，密码admin123</span>GRANT all ON zabbix.* TO <span class="token string">'zabbix'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'admin123'</span><span class="token punctuation">;</span>  <span class="token comment">#刷新权限</span>flush privileges<span class="token punctuation">;</span>   <span class="token comment">#退出数据库 </span>quit                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/zabbix/2.png"></p><p>数据库连接测试页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /var/www/html/index.php     <span class="token operator">&lt;</span>?php    <span class="token variable">$link</span><span class="token operator">=</span>mysql_connect<span class="token punctuation">(</span><span class="token string">'172.18.20.224'</span>,<span class="token string">'zabbix'</span>,<span class="token string">'admin123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     if<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"&lt;h1>Success!!&lt;/h1>"</span><span class="token punctuation">;</span>   <span class="token comment">#显示Success表示连接数据库成功</span>    <span class="token keyword">else</span> <span class="token builtin class-name">echo</span> <span class="token string">"Fail!!"</span><span class="token punctuation">;</span>    mysql_close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/zabbix/3.png"></p><h2 id="安装zabbix-server端"><a href="#安装zabbix-server端" class="headerlink" title="安装zabbix(server端)"></a>安装zabbix(server端)</h2><p>安装依赖包和组件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  yum -y <span class="token function">install</span> net-snmp net-snmp-devel <span class="token function">curl</span> curl-devel libxml2 libxml2-devel libevent-devel.x86_64 javacc.noarch  javacc-javadoc.noarch javacc-maven-plugin.noarch javacc*<span class="token comment"># 安装php支持zabbix组件</span><span class="token function">sudo</span>  yum <span class="token function">install</span> php-bcmath php-mbstring -y <span class="token comment"># 会自动生成yum源文件，保证系统可以上网</span><span class="token function">sudo</span>  <span class="token function">rpm</span> -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm  <span class="token comment"># 清理yum缓存</span><span class="token function">sudo</span> yum clean all <span class="token comment"># 安装zabbix组件</span><span class="token function">sudo</span>  yum <span class="token function">install</span> zabbix-server-mysql zabbix-web-mysql -y    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装zabbix后会有一个数据库文件,需要把这个文件恢复到数据库中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span>   /usr/share/doc/zabbix-server-mysql-4.0.21/<span class="token comment">#导入数据到数据库zabbix中(最后一个zabbix是数据库zabbix)，且因为用户zabbix是%(任意主机)，所以登录时需要加上当前主机ip(-h 192.168.1.122),密码是用户zabbix登陆密码admin123</span><span class="token function">sudo</span>  zcat  create.sql.gz <span class="token operator">|</span> mysql -uzabbix -p -h <span class="token number">192.168</span>.1.122 zabbix   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在配置文件中配置数据库用户及密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span>  /etc/zabbix/zabbix_server.conf     <span class="token assign-left variable">DBHost</span><span class="token operator">=</span><span class="token number">192.168</span>.1.122    <span class="token assign-left variable">DBName</span><span class="token operator">=</span>zabbix    <span class="token assign-left variable">DBUser</span><span class="token operator">=</span>zabbix    <span class="token assign-left variable">DBPassword</span><span class="token operator">=</span>admin123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确定数据库用户及密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> -n <span class="token string">'^'</span><span class="token punctuation">[</span>a-Z<span class="token punctuation">]</span> /etc/zabbix/zabbix_server.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改时区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  <span class="token function">vim</span> /etc/httpd/conf.d/zabbix.conf  <span class="token comment"># 将# php_value date.timezone Europe/Riga 变更成php_value date.timezone Asia/Shanghai</span>    php_value date.timezone Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动并加入开机自启动zabbix-server</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> zabbix-server systemctl start zabbix-server<span class="token comment">#   监听在10051端口上,如果没监听成功，可重启zabbix-server服务试试</span><span class="token function">netstat</span> -anpt <span class="token operator">|</span> <span class="token function">grep</span> zabbix        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认用户和密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">默认账号Admin默认密码为zabbix  密码经过MD5加密后为5fce1b3e34b520afeffb37ce08c7cd66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="welcom-zabbix-后台"><a href="#welcom-zabbix-后台" class="headerlink" title="welcom zabbix(后台)"></a>welcom zabbix(后台)</h2><p>如果以上步骤无误，现在可以使用web打开   </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.122/zabbix　  <span class="token comment"># 注意这里IE浏览器打不开,使用其他浏览器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/drawing-bed/zabbix/5.png"><br>这里必须全部都是OK<br><img src="/medias/drawing-bed/zabbix/6.png"><br><img src="/medias/drawing-bed/zabbix/7.png"><br><img src="/medias/drawing-bed/zabbix/8.png"><br><img src="/medias/drawing-bed/zabbix/9.png"><br>安装成功<br><img src="/medias/drawing-bed/zabbix/10.png"><br>进入界面后设置语言<br><img src="/medias/drawing-bed/zabbix/11.png"><br>选择Chinese<br><img src="/medias/drawing-bed/zabbix/12.png"></p><h2 id="Agent端配置-agent端"><a href="#Agent端配置-agent端" class="headerlink" title="Agent端配置(agent端)"></a>Agent端配置(agent端)</h2><p>安装依赖包和组件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  yum -y <span class="token function">install</span> net-snmp net-snmp-devel <span class="token function">curl</span> curl-devel libxml2 libxml2-devel libevent-devel.x86_64 javacc.noarch  javacc-javadoc.noarch javacc-maven-plugin.noarch javacc*<span class="token comment"># 安装php支持zabbix组件</span><span class="token function">sudo</span>  yum <span class="token function">install</span> php-bcmath php-mbstring -y <span class="token comment"># 会自动生成yum源文件，保证系统可以上网</span><span class="token function">sudo</span>  <span class="token function">rpm</span> -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm  <span class="token comment"># 清理yum缓存</span><span class="token function">sudo</span> yum clean all <span class="token comment"># 安装zabbix-agent </span><span class="token function">sudo</span>   yum <span class="token function">install</span> zabbix-agent  -y   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改zabbix-agent的配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span>   /etc/zabbix/zabbix_agentd.conf    <span class="token comment"># 指定zabbix服务器的IP</span>    <span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.1.122        <span class="token comment"># 指定zabbix服务器的IP</span>    <span class="token assign-left variable">ServerActive</span><span class="token operator">=</span><span class="token number">192.168</span>.1.122      <span class="token comment"># 指定后台显示名称</span>    <span class="token assign-left variable">Hostname</span><span class="token operator">=</span>test         <span class="token comment"># 是否支持自定义key  默认为 0  不支持</span>    <span class="token assign-left variable">UnsafeUserParameters</span><span class="token operator">=</span><span class="token number">1</span>       <span class="token comment"># 自定义key  监控项</span>    <span class="token assign-left variable">UserParameter</span><span class="token operator">=</span>prod.redis,ps -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'redis'</span> <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'grep'</span><span class="token operator">|</span><span class="token function">wc</span> -l         <span class="token comment"># 自定义key  监控项</span>    <span class="token assign-left variable">UserParameter</span><span class="token operator">=</span>prod.mongo,ps -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'mongo'</span> <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'grep'</span><span class="token operator">|</span><span class="token function">wc</span> -l       <span class="token comment"># 自定义key  监控项  </span>    <span class="token assign-left variable">UserParameter</span><span class="token operator">=</span>prod.node,ps -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'node'</span> <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'grep'</span><span class="token operator">|</span><span class="token function">wc</span> -l       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动agent端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/zabbix_agentd  -c /etc/zabbix/zabbix_agentd.conf     <span class="token comment"># 启动agent端</span>systemctl  restart   zabbix-agent   <span class="token comment"># 重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="zabbix服务器上测试-server端"><a href="#zabbix服务器上测试-server端" class="headerlink" title="zabbix服务器上测试(server端)"></a>zabbix服务器上测试(server端)</h2><p>需要下载 zabbix-get</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span>  zabbix-get   -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sgsm@localhost zabbix-server-mysql-4.0.21<span class="token punctuation">]</span>$ zabbix_get -s <span class="token number">192.168</span>.1.220 -p <span class="token number">10050</span> -k prod.redis     <span class="token comment"># 显示数值 代表成功</span><span class="token number">1</span>  <span class="token punctuation">[</span>sgsm@localhost zabbix-server-mysql-4.0.21<span class="token punctuation">]</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="zabbix后台配置监控项-后台"><a href="#zabbix后台配置监控项-后台" class="headerlink" title="zabbix后台配置监控项(后台)"></a>zabbix后台配置监控项(后台)</h2><p>创建群组<br><img src="/medias/drawing-bed/zabbix/13.png"><br>设置组名<br><img src="/medias/drawing-bed/zabbix/14.png"><br><img src="/medias/drawing-bed/zabbix/15.png"><br>创建主机<br><img src="/medias/drawing-bed/zabbix/16.png"><br><img src="/medias/drawing-bed/zabbix/18.png"><br><img src="/medias/drawing-bed/zabbix/19.png"><br><img src="/medias/drawing-bed/zabbix/20.png"><br><img src="/medias/drawing-bed/zabbix/21.png"><br>创建监控项<br><img src="/medias/drawing-bed/zabbix/22.png"><br><img src="/medias/drawing-bed/zabbix/23.png"><br><img src="/medias/drawing-bed/zabbix/24.png"><br>创建触发器<br><img src="/medias/drawing-bed/zabbix/25.png"><br><img src="/medias/drawing-bed/zabbix/26.png"><br><img src="/medias/drawing-bed/zabbix/27.png"><br><img src="/medias/drawing-bed/zabbix/28.png"><br>可以在最新数据查看当前值<br><img src="/medias/drawing-bed/zabbix/29.png"><br><img src="/medias/drawing-bed/zabbix/30.png"></p><p>修改状态测试<br><img src="/medias/drawing-bed/zabbix/31.png"><br><img src="/medias/drawing-bed/zabbix/32.png"><br><img src="/medias/drawing-bed/zabbix/33.png"><br><img src="/medias/drawing-bed/zabbix/34.png"><br>至此监控配置完成,下面需要配置邮件服务,当有服务宕机发邮件告警</p><h2 id="配置媒介邮件-server端"><a href="#配置媒介邮件-server端" class="headerlink" title="配置媒介邮件(server端)"></a>配置媒介邮件(server端)</h2><p>首先需要在邮件获取授权码<br><img src="/medias/drawing-bed/zabbix/40.png"><br><img src="/medias/drawing-bed/zabbix/41.png"><br><img src="/medias/drawing-bed/zabbix/42.png"></p><p>本次测试使用mailx服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭当前postfix邮件</span><span class="token function">sudo</span>  systemctl stop postfix<span class="token function">chkconfig</span>  postfix  off<span class="token comment"># 安装mailx</span><span class="token function">sudo</span> yum <span class="token function">install</span> mailx  -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置邮件服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  <span class="token function">vim</span> /etc/mail.rc    <span class="token comment"># 发件人地址</span>    <span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>xxxxxx@qq.com <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtp.qq.com        <span class="token comment"># 收件人地址                       授权码(邮箱IMAP/SMTP服务的授权码)</span>    <span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>xxxxxx@qq.com smtp-auth-password<span class="token operator">=</span>xxxxxx          <span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试发送邮件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"zabbix test mail"</span> <span class="token operator">|</span>mail -s <span class="token string">"zabbix"</span> xxxxxx@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置发送邮件-后台"><a href="#配置发送邮件-后台" class="headerlink" title="配置发送邮件(后台)"></a>配置发送邮件(后台)</h2><p>管理—示警介类型—创建媒体类型<br>创建报警媒介类型 (脚本参数分别对应：收件人地址、主题、详细内容)<br><img src="/medias/drawing-bed/zabbix/50.png"><br>配置用户 选择admin用户<br><img src="/medias/drawing-bed/zabbix/51.png"><br>添加报警媒介<br><img src="/medias/drawing-bed/zabbix/52.png"><br>创建报警动作 配置-动作-创建动作,新建动作<br><img src="/medias/drawing-bed/zabbix/53.png"><br>新建操作<br><img src="/medias/drawing-bed/zabbix/54.png"><br><img src="/medias/drawing-bed/zabbix/55.png"><br>添加恢复操作<br><img src="/medias/drawing-bed/zabbix/56.png"></p><p>配置完成后测试(修改触发器或者关闭进程)<br><img src="/medias/drawing-bed/zabbix/57.png"><br><img src="/medias/drawing-bed/zabbix/58.png"><br><img src="/medias/drawing-bed/zabbix/59.png"><br><img src="/medias/drawing-bed/zabbix/60.png"><br><img src="/medias/drawing-bed/zabbix/61.png"><br><img src="/medias/drawing-bed/zabbix/62.png"><br>邮件内容以及在动作日志中查看发送记录<br><img src="/medias/drawing-bed/zabbix/63.png"></p><hr><h2 id="首先需要申请一个企业号"><a href="#首先需要申请一个企业号" class="headerlink" title="首先需要申请一个企业号"></a>首先需要申请一个企业号</h2><p>申请企业号，需要一个绑定你本人开户银行卡的微信号。<br>申请网址 <a href="https://qy.weixin.qq.com/">https://qy.weixin.qq.com/</a><br>点击“立即注册”。<br>根据提示注册企业号，到“选择类型”时，选择最右边的企业号。<br>注意：企业描述中：“报警”是敏感词不能使用。<br>登录之后，可以看到如下页面<br><img src="/medias/drawing-bed/zabbix/1/1.png"><br>按照下图依次点击。<br><img src="/medias/drawing-bed/zabbix/1/2.png"><br><img src="/medias/drawing-bed/zabbix/1/3.png"><br><img src="/medias/drawing-bed/zabbix/1/4.png"></p><h2 id="关注企业号的方法"><a href="#关注企业号的方法" class="headerlink" title="关注企业号的方法"></a>关注企业号的方法</h2><p>点击左侧的“设置”-二维码，使用微信扫一扫扫描二维码<br><img src="/medias/drawing-bed/zabbix/1/5.png"><br>点击左侧列的“应用中心”，点击“我的应用”下面的加号<br><img src="/medias/drawing-bed/zabbix/1/6.png"><br>填写应用名称，描述。一切正常的话，点击进入刚才创建的应用<br><img src="/medias/drawing-bed/zabbix/1/7.png"><br>这里的应用 id 号需要记住。后面需要填写</p><h2 id="设置管理员"><a href="#设置管理员" class="headerlink" title="设置管理员"></a>设置管理员</h2><p>设置-功能设置-权限管理-新建管理组<br><img src="/medias/drawing-bed/zabbix/1/8.png"><br><img src="/medias/drawing-bed/zabbix/1/9.png"><br><img src="/medias/drawing-bed/zabbix/1/10.png"><br>注意：这里要记录下来下面的 CorpID 和 Secret。</p><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>在/usr/lib/zabbix/alertscripts目录(配置文件定义)下新建一个名为 wechat.sh 的脚本文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">CropID</span><span class="token operator">=</span><span class="token string">'ww13d3c1c55e5d3414'</span>   <span class="token comment"># 企业id-在网页应用管理可以查到</span><span class="token assign-left variable">Secret</span><span class="token operator">=</span><span class="token string">'-qo7YckISjsL11u8kI5PF0gGJrjYKlk0ISF2ftAPuzQ'</span>   <span class="token comment"># SecretID-在网页应用管理可以查到</span><span class="token assign-left variable">GURL</span><span class="token operator">=</span><span class="token string">"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=<span class="token variable">$CropID</span>&amp;corpsecret=<span class="token variable">$Secret</span>"</span><span class="token assign-left variable">Gtoken</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/usr/bin/curl -s -G $GURL <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">'access_token":"'</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">'"'</span> <span class="token string">'&#123;print $1&#125;'</span> <span class="token variable">`</span></span><span class="token assign-left variable">PURL</span><span class="token operator">=</span><span class="token string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class="token variable">$Gtoken</span>"</span><span class="token keyword">function</span> <span class="token function-name function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token builtin class-name">local</span> int <span class="token assign-left variable">AppID</span><span class="token operator">=</span><span class="token number">1000002</span>  <span class="token comment"># 应用id-在网页应用管理可以查到</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">UserID</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">PartyID</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">Msg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">" "</span> -f3-<span class="token variable">)</span></span><span class="token builtin class-name">printf</span> <span class="token string">'&#123;\n'</span><span class="token builtin class-name">printf</span> <span class="token string">'\t"touser": "'</span>"<span class="token variable">$User</span><span class="token string">"<span class="token entity" title="\&quot;">\"</span>"</span>,<span class="token punctuation">\</span>n<span class="token string">"printf '<span class="token entity" title="\t">\t</span>"</span>toparty<span class="token string">": "</span><span class="token string">'"$PartyID"\"",\n"printf '</span><span class="token punctuation">\</span>t<span class="token string">"msgtype"</span><span class="token builtin class-name">:</span> <span class="token string">"text"</span>,<span class="token punctuation">\</span>n<span class="token string">'printf '</span><span class="token punctuation">\</span>t<span class="token string">"agentid"</span><span class="token builtin class-name">:</span> <span class="token string">"'"</span> <span class="token variable">$AppID</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>"</span>,<span class="token punctuation">\</span>n<span class="token string">"printf '<span class="token entity" title="\t">\t</span>"</span>text<span class="token string">": &#123;<span class="token entity" title="\n">\n</span>'printf '<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>"</span>content<span class="token string">": "</span><span class="token string">'"$Msg"\""\n"printf '</span><span class="token punctuation">\</span>t<span class="token punctuation">&#125;</span>,<span class="token punctuation">\</span>n<span class="token string">'printf '</span><span class="token punctuation">\</span>t<span class="token string">"safe"</span><span class="token builtin class-name">:</span><span class="token string">"0"</span><span class="token punctuation">\</span>n<span class="token string">'printf '</span><span class="token punctuation">&#125;</span><span class="token punctuation">\</span>n'<span class="token punctuation">&#125;</span>/usr/bin/curl --data-ascii <span class="token string">"<span class="token variable"><span class="token variable">$(</span>body $1 $2 $3<span class="token variable">)</span></span>"</span> <span class="token variable">$PURL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要设置权限不然调用的时候会报错没有权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  <span class="token function">chown</span> zabbix:zabbix   wechat.sh  -R <span class="token function">sudo</span>  <span class="token function">chmod</span> +x     wechat.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行./wechat.sh 1 1 test 看自己微信是否能收到信息，如果能的话，继续下一步。反之检查上面有什么问题。</p><h2 id="zabbix后台配置"><a href="#zabbix后台配置" class="headerlink" title="zabbix后台配置"></a>zabbix后台配置</h2><p>管理—示警介类型—创建媒体类型<br>创建报警媒介类型 (脚本参数分别对应：收件人地址、主题、详细内容)<br><img src="/medias/drawing-bed/zabbix/1/21.png"><br>配置用户 选择admin用户<br><img src="/medias/drawing-bed/zabbix/1/22.png"><br>添加报警媒介<br><img src="/medias/drawing-bed/zabbix/1/23.png"><br>创建报警动作 配置-动作-创建动作,新建动作<br><img src="/medias/drawing-bed/zabbix/1/24.png"><br>新建操作<br><img src="/medias/drawing-bed/zabbix/1/25.png"><br><img src="/medias/drawing-bed/zabbix/1/26.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">操作故障<span class="token punctuation">&#123;</span>TRIGGER.STATUS<span class="token punctuation">&#125;</span>,服务器:<span class="token punctuation">&#123;</span>HOSTNAME1<span class="token punctuation">&#125;</span>发生: <span class="token punctuation">&#123;</span>TRIGGER.NAME<span class="token punctuation">&#125;</span>故障<span class="token operator">!</span>告警主机:<span class="token punctuation">&#123;</span>HOSTNAME1<span class="token punctuation">&#125;</span>告警时间:<span class="token punctuation">&#123;</span>EVENT.DATE<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>EVENT.TIME<span class="token punctuation">&#125;</span>告警等级:<span class="token punctuation">&#123;</span>TRIGGER.SEVERITY<span class="token punctuation">&#125;</span>告警信息: <span class="token punctuation">&#123;</span>TRIGGER.NAME<span class="token punctuation">&#125;</span>告警项目:<span class="token punctuation">&#123;</span>TRIGGER.KEY1<span class="token punctuation">&#125;</span>问题详情:<span class="token punctuation">&#123;</span>ITEM.NAME<span class="token punctuation">&#125;</span>:<span class="token punctuation">&#123;</span>ITEM.VALUE<span class="token punctuation">&#125;</span>当前状态:<span class="token punctuation">&#123;</span>TRIGGER.STATUS<span class="token punctuation">&#125;</span>:<span class="token punctuation">&#123;</span>ITEM.VALUE1<span class="token punctuation">&#125;</span>事件 ID:<span class="token punctuation">&#123;</span>EVENT.ID<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加恢复操作<br><img src="/medias/drawing-bed/zabbix/1/27.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">恢复操作恢复<span class="token punctuation">&#123;</span>TRIGGER.STATUS<span class="token punctuation">&#125;</span>, 服务器:<span class="token punctuation">&#123;</span>HOSTNAME1<span class="token punctuation">&#125;</span>: <span class="token punctuation">&#123;</span>TRIGGER.NAME<span class="token punctuation">&#125;</span>已恢复<span class="token operator">!</span>告警主机:<span class="token punctuation">&#123;</span>HOSTNAME1<span class="token punctuation">&#125;</span>告警时间:<span class="token punctuation">&#123;</span>EVENT.DATE<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>EVENT.TIME<span class="token punctuation">&#125;</span>告警等级:<span class="token punctuation">&#123;</span>TRIGGER.SEVERITY<span class="token punctuation">&#125;</span>告警信息: <span class="token punctuation">&#123;</span>TRIGGER.NAME<span class="token punctuation">&#125;</span>告警项目:<span class="token punctuation">&#123;</span>TRIGGER.KEY1<span class="token punctuation">&#125;</span>问题详情:<span class="token punctuation">&#123;</span>ITEM.NAME<span class="token punctuation">&#125;</span>:<span class="token punctuation">&#123;</span>ITEM.VALUE<span class="token punctuation">&#125;</span>当前状态:<span class="token punctuation">&#123;</span>TRIGGER.STATUS<span class="token punctuation">&#125;</span>:<span class="token punctuation">&#123;</span>ITEM.VALUE1<span class="token punctuation">&#125;</span>事件 ID:<span class="token punctuation">&#123;</span>EVENT.ID<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后测试(修改触发器或者关闭进程)<br><img src="/medias/drawing-bed/zabbix/1/28.png"><br><img src="/medias/drawing-bed/zabbix/1/29.png"><br><img src="/medias/drawing-bed/zabbix/1/30.png"></p><h2 id="邮件内容以及在动作日志中查看发送记录"><a href="#邮件内容以及在动作日志中查看发送记录" class="headerlink" title="邮件内容以及在动作日志中查看发送记录"></a>邮件内容以及在动作日志中查看发送记录</h2><p><img src="/medias/drawing-bed/zabbix/1/35.png"></p><hr><h2 id="下载yum源报错"><a href="#下载yum源报错" class="headerlink" title="下载yum源报错"></a>下载yum源报错</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sgsm@localhost yum.repos.d<span class="token punctuation">]</span>$ <span class="token function">sudo</span>  <span class="token function">rpm</span> -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm 获取http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm准备中<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>        <span class="token function">file</span> /etc/yum.repos.d/zabbix.repo from <span class="token function">install</span> of zabbix-release-4.0-1.el7.noarch conflicts with <span class="token function">file</span> from package zabbix-release-3.2-1.el7.noarch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为服务器上已经部署了zabbix,卸载原来的zabbix就可以了 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum  remove   zabbix-release-3.2-1.el7.noarch   -y      <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="后台登录密码忘记"><a href="#后台登录密码忘记" class="headerlink" title="后台登录密码忘记"></a>后台登录密码忘记</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> use zabbixReading table information <span class="token keyword">for</span> completion of table and <span class="token function">column</span> namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql<span class="token operator">></span> update <span class="token function">users</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token string">'5fce1b3e34b520afeffb37ce08c7cd66'</span> where <span class="token assign-left variable">userid</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span>Query OK, <span class="token number">1</span> row affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>Rows matched: <span class="token number">1</span>  Changed: <span class="token number">1</span>  Warnings: <span class="token number">0</span><span class="token comment"># 由于密码是md5加密的，我们可以查看默认的zabbix密码的md5</span>mysql<span class="token operator">></span> use zabbix<span class="token punctuation">;</span>mysql<span class="token operator">></span> update <span class="token function">users</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token string">'5fce1b3e34b520afeffb37ce08c7cd66'</span> where <span class="token assign-left variable">userid</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新设置密码为zabbix,然后重新登陆 用户：Admin   密码：zabbix</p><h2 id="zabbix设置中文出现乱码"><a href="#zabbix设置中文出现乱码" class="headerlink" title="zabbix设置中文出现乱码"></a>zabbix设置中文出现乱码</h2><p>zabbix语言设置为中文后,有乱码如下：<br><img src="/medias/drawing-bed/zabbix/2/1.png"></p><p>1.从 windows 下控制面板-&gt;字体-&gt;选择一种中文字库例如“楷体”<br><img src="/medias/drawing-bed/zabbix/2/2.png"><br><img src="/medias/drawing-bed/zabbix/2/3.png"></p><p>2.将字体上传至/usr/share/zabbix/assets/fonts (根据zabbix的安装位置 可以使用find查找一下路径) 目录下<br><img src="/medias/drawing-bed/zabbix/2/99.png"><br>注意：查找到zabbix有两个fonts目录 就去配置文件看下使用的那个目录(版本不同 路径就不同)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sgsm@localhost fonts<span class="token punctuation">]</span>$ <span class="token function">cat</span> /usr/share/zabbix/include/defines.inc.php <span class="token operator">|</span> <span class="token function">grep</span> pathdefine<span class="token punctuation">(</span><span class="token string">'ZBX_FONTPATH'</span>,                          realpath<span class="token punctuation">(</span><span class="token string">'assets/fonts'</span><span class="token punctuation">))</span><span class="token punctuation">;</span> // where to search <span class="token keyword">for</span> font <span class="token punctuation">(</span>GD <span class="token operator">></span> <span class="token number">2.0</span>.18<span class="token punctuation">)</span><span class="token punctuation">[</span>sgsm@localhost fonts<span class="token punctuation">]</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用rz 拉取到服务器<br><img src="/medias/drawing-bed/zabbix/2/7.png"></p><p>3.修改 zabbix 页面管理的中文字体设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@zabbix-server zabbix-2.4.5<span class="token punctuation">]</span><span class="token comment"># vim /usr/share/zabbix/include/defines.inc.php</span><span class="token comment">#修改如下 2 行</span>define<span class="token punctuation">(</span><span class="token string">'ZBX_FONT_NAME'</span>, <span class="token string">'simkai'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>define<span class="token punctuation">(</span><span class="token string">'ZBX_GRAPH_FONT_NAME'</span>, <span class="token string">'simkai'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的 zabbix 界面<br><img src="/medias/drawing-bed/zabbix/2/5.png"><br>如果还不行就给字体权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  <span class="token function">chmod</span>   <span class="token number">777</span>    simkai.ttf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu一些配置</title>
      <link href="/posts/9fae.html"/>
      <url>/posts/9fae.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>此文章在Ubuntu 20.04 LTS Desktop验证通过。<br>不建议修改过多系统项，以免引起系统稳定性。  </p><h1 id="安装openssh"><a href="#安装openssh" class="headerlink" title="安装openssh"></a>安装openssh</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-serversystemctl start sshd<span class="token comment"># 按提示输入密码</span><span class="token comment"># xhsell链接</span><span class="token function">ssh</span> username@IP<span class="token comment"># ssh username:password@ip:port</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改apt为阿里云源"><a href="#修改apt为阿里云源" class="headerlink" title="修改apt为阿里云源"></a>修改apt为阿里云源</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup<span class="token function">sudo</span> <span class="token function">vi</span> /etc/apt/sources.list<span class="token comment">###</span>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<span class="token comment">###</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token function">sudo</span> <span class="token function">vi</span> /etc/profile<span class="token comment">### 增加</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">vi</span><span class="token operator">=</span>vim<span class="token comment">### source 文件生效</span><span class="token function">vi</span> /etc/vim/vimrc<span class="token comment">### 增加显示行号、tab设置4个空格</span><span class="token builtin class-name">set</span> number<span class="token builtin class-name">set</span> <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">set</span> expandtab<span class="token builtin class-name">set</span> autoindent<span class="token comment">### 立即生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="root权限"><a href="#root权限" class="headerlink" title="root权限"></a>root权限</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">user@user-virtual-machine:~$ <span class="token function">sudo</span> <span class="token function">passwd</span>新的 密码： 重新输入新的 密码： passwd：已成功更新密码user@user-virtual-machine:~$ <span class="token function">su</span> - root密码： root@user-virtual-machine:~<span class="token comment"># </span><span class="token comment"># 允许root远程登录</span><span class="token function">vi</span> /etc/ssh/sshd_config<span class="token comment">###</span>PermitRootLogin <span class="token function">yes</span><span class="token comment">###</span>systemctl restart sshd<span class="token comment"># 验证</span><span class="token punctuation">[</span>C:<span class="token punctuation">\</span>~<span class="token punctuation">]</span>$ <span class="token function">ssh</span> root:1@192.168.1.12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="bash修改"><a href="#bash修改" class="headerlink" title="bash修改"></a>bash修改</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -al /bin/sh<span class="token comment"># lrwxrwxrwx 1 root root 4 7月  27 17:20 /bin/sh -> dash</span>dpkg-reconfigure dash   <span class="token comment"># 选择 否/No</span><span class="token comment"># 正在删除 通过 dash 从 /bin/sh 到 /bin/sh.distrib 的转移</span><span class="token comment"># 正在添加 通过 bash 从 /bin/sh 到 /bin/sh.distrib 的转移</span><span class="token comment"># 正在删除 通过 dash 从 /usr/share/man/man1/sh.1.gz 到 /usr/share/man/man1/sh.distrib.1.gz 的转移</span><span class="token comment"># 正在添加 通过 bash 从 /usr/share/man/man1/sh.1.gz 到 /usr/share/man/man1/sh.distrib.1.gz 的转移</span><span class="token function">ls</span> -al /bin/sh<span class="token comment"># lrwxrwxrwx 1 root root 4 7月  28 17:02 /bin/sh -> bash</span><span class="token function">vi</span> .bashrc <span class="token comment"># PS1="\[\e]0;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h: \w\a\]$PS1" 修改为 PS1="[\u@\h \W]\\$ "</span><span class="token comment"># bash 生效，centos风格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="apache2"><a href="#apache2" class="headerlink" title="apache2"></a>apache2</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> apache2 <span class="token function">curl</span>systemctl start apache2update-rc.d -f apache2 defaults   <span class="token comment"># 开机自启</span><span class="token builtin class-name">echo</span> <span class="token string">"apache2 test page"</span> <span class="token operator">></span> /var/www/html/index.html <span class="token function">curl</span> localhost<span class="token comment"># apache2 test page</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认安装python3.8</span><span class="token function">apt</span> <span class="token function">install</span> python3-pippython3 -V<span class="token comment"># Python 3.8.2</span>pip3 -V<span class="token comment"># pip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8)</span><span class="token function">mkdir</span> .pip<span class="token function">vi</span> .pip/pip.conf   <span class="token comment"># 配置pip阿里云源</span><span class="token comment">###</span><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/trusted-host <span class="token operator">=</span> mirrors.aliyun.com<span class="token comment">###</span>pip3 <span class="token function">install</span> --upgrade pip   <span class="token comment"># 安装升级pip</span>pip -V<span class="token comment"># pip 20.1.1 from /usr/local/lib/python3.8/dist-packages/pip (python 3.8)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> default-jre default-jdk   <span class="token comment"># 安装默认版本</span><span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk openjdk-8-jre   <span class="token comment"># 安装指定版本</span>java -version   <span class="token comment"># java默认版本</span><span class="token comment"># openjdk version "11.0.8" 2020-07-14</span><span class="token comment"># OpenJDK Runtime Environment (build 11.0.8+10-post-Ubuntu-0ubuntu120.04)</span><span class="token comment"># OpenJDK 64-Bit Server VM (build 11.0.8+10-post-Ubuntu-0ubuntu120.04, mixed mode, sharing)</span>javac -version   <span class="token comment"># javac默认版本</span><span class="token comment"># javac 11.0.8</span>update-alternatives --config java   <span class="token comment"># 设置默认java</span><span class="token comment"># 有 2 个候选项可用于替换 java (提供 /usr/bin/java)。</span><span class="token comment">#   选择       路径                                          优先级  状态</span><span class="token comment"># ------------------------------------------------------------</span><span class="token comment"># * 0            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1111      自动模式</span><span class="token comment">#   1            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1111      手动模式</span><span class="token comment">#   2            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      手动模式</span><span class="token comment"># 要维持当前值[*]请按&lt;回车键>，或者键入选择的编号：2</span><span class="token comment"># update-alternatives: 使用 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java 来在手动模式中提供 /usr/bin/java (java)</span>update-alternatives --config javac   <span class="token comment"># 设置默认javac</span><span class="token comment"># 有 2 个候选项可用于替换 javac (提供 /usr/bin/javac)。</span><span class="token comment">#   选择       路径                                        优先级  状态</span><span class="token comment"># ------------------------------------------------------------</span><span class="token comment"># * 0            /usr/lib/jvm/java-11-openjdk-amd64/bin/javac   1111      自动模式</span><span class="token comment">#   1            /usr/lib/jvm/java-11-openjdk-amd64/bin/javac   1111      手动模式</span><span class="token comment">#   2            /usr/lib/jvm/java-8-openjdk-amd64/bin/javac    1081      手动模式</span><span class="token comment"># 要维持当前值[*]请按&lt;回车键>，或者键入选择的编号：2</span><span class="token comment"># update-alternatives: 使用 /usr/lib/jvm/java-8-openjdk-amd64/bin/javac 来在手动模式中提供 /usr/bin/javac (javac)</span>javac -version   <span class="token comment"># 验证</span><span class="token comment"># javac 1.8.0_252</span>java -version   <span class="token comment"># 验证</span><span class="token comment"># openjdk version "1.8.0_252"</span><span class="token comment"># OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1ubuntu1-b09)</span><span class="token comment"># OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量装机</title>
      <link href="/posts/33bd.html"/>
      <url>/posts/33bd.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="PXE批量装机"><a href="#PXE批量装机" class="headerlink" title="PXE批量装机"></a>PXE批量装机</h1><h2 id="PXE的工作过程"><a href="#PXE的工作过程" class="headerlink" title="PXE的工作过程"></a>PXE的工作过程</h2><ol><li>客户机从自己的PXE网卡启动，向本网络中的DHCP服务器索取IP  </li><li>DHCP服务器返回分给客户机IP以及bootstrap文件的放置位置(该文件一 般是放在一台TFTP服务器上)  </li><li>客户机向本网络中的TFTP服务器索取bootstrap文件  </li><li>客户机取得bootstrap文件后之执行该文件  </li><li>根据bootstrap的执行结果，通过TFTP服务器加载内核和文件系统  </li><li>进入安装画面, 此时可以通过选择FTP,HTTP,NFS方式之一进行安装  </li></ol><h2 id="PXE：预启动执行环境"><a href="#PXE：预启动执行环境" class="headerlink" title="PXE：预启动执行环境"></a>PXE：预启动执行环境</h2><p>&emsp;&emsp;PXE是由Intel公司开发的网络引导技术，工作在C/S架构，允许客户机通 过网络从远程服务器下载引导镜像，并加载安装文件或者整个操作系统。<br>若要搭建PXE网络体系，必须满足一下几个前提条件：  </p><ol><li>客户机的网卡支持pxe协议（集成BOOTROM芯片），且主板支持网 络引导，目前绝大多数服务器和大多数PC都能够提供此功能，只需要在BIOS设 置中允许从network或LAN启动即可。  </li><li>网络中有一台DHCP服务器以便为客户机自动分配地址，指定引导文 件位置（因为客户机没有操作系统无法配置ip，所以架设DHCP）。  </li><li>服务器通过TFTP（简单文件传输协议）提供引导镜像文件的下载 （为什么用TFTP呢？ 因为TFTP客户端工具比较小集成在了网卡上）。  </li></ol><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>准备centos6安装源<br><code>mount /dev/se0 /media</code><br>安装并启用TFTP（启动xinetd）、ftp（启动vsftpd）服务，<br><code>yum -y install tftp-server ftp*</code><br><img src="/medias/drawing-bed/pxe/0.png"></p><p><code>vim /etc/xinetd.d/tftp</code><br>修改<code>wait</code>为<code>no</code>，修改<code>disable</code>为<code>no</code><br><img src="/medias/drawing-bed/pxe/1.png"></p><p>启动<code>xinetd.d</code>，使用<code>netstat -nupl</code>查看<code>xinetd.d</code>的端口是否启动<br><img src="/medias/drawing-bed/pxe/2.png"></p><p>挂载光盘，复制<code>initrd.img</code>和<code>vmlinz</code>到<code>/var/lib/tftpboot/</code>目录下<br><img src="/medias/drawing-bed/pxe/3.png"></p><p>安装<code>syslinux</code><br><img src="/medias/drawing-bed/pxe/4.png"></p><p>复制<code>pxelinux.0</code>到<code>/var/lib/tftpboot/</code>目录下<br><img src="/medias/drawing-bed/pxe/5.png"></p><p>复制菜单文件<code>isolinux.cfg</code>到<code>/var/lib/tftpboot/pxelinux.cfg/default</code>修改权限为<code>644</code><br><img src="/medias/drawing-bed/pxe/6.png"></p><p>安装<code>DHCP</code><br><img src="/medias/drawing-bed/pxe/7.png"></p><p>复制并配置<code>DHCP</code><br><img src="/medias/drawing-bed/pxe/8.png"></p><p>在配置文件最后添加（<code>DHCP</code>配置和下载文件的主机、文件名）<br><img src="/medias/drawing-bed/pxe/9.png"></p><p>注：网卡配置为<code>192.168.0.33</code>静态；虚拟机里面调整<code>vmnet</code><br>将光盘挂载到<code>/var/ftp/pub/</code><br><img src="/medias/drawing-bed/pxe/10.png"></p><p>装机客户端：<br>进入<code>BIOS</code>将<code>Network</code>调整到第一个，<code>F10</code>回车，保存退出，等待开机。<br><img src="/medias/drawing-bed/pxe/11.png"><br>（下面按图，选择回车）<br><img src="/medias/drawing-bed/pxe/12.png"><br><img src="/medias/drawing-bed/pxe/13.png"><br><img src="/medias/drawing-bed/pxe/14.png"></p><p>在红色光标处按 <code>空格</code> 按<code>↓</code> 选择<code>OK</code> 回车下一步，等待一会。<br><img src="/medias/drawing-bed/pxe/15.png"></p><p>在最上面一行输入：<code>ftp://192.168.0.33/pub</code>，选择<code>OK</code><br><img src="/medias/drawing-bed/pxe/16.png"></p><p>出现以下界面就行啦<br><img src="/medias/drawing-bed/pxe/17.png"></p><p>读条完成出现以下界面：（熟悉的配方）<br><img src="/medias/drawing-bed/pxe/18.png"></p><hr><h1 id="无人值守安装"><a href="#无人值守安装" class="headerlink" title="无人值守安装"></a>无人值守安装</h1><h2 id="kickstart无人值守技术"><a href="#kickstart无人值守技术" class="headerlink" title="kickstart无人值守技术"></a>kickstart无人值守技术</h2><ol><li>创建应答文件，预先定义好各种安装设置  </li><li>免去交互设置过程，从而实现全自动化安装  </li><li>通过添加%post脚本，完成安装后的各种配置操作  </li></ol><h2 id="准备安装应答文件"><a href="#准备安装应答文件" class="headerlink" title="准备安装应答文件"></a>准备安装应答文件</h2><ol><li>配置安全应答参数  </li><li>保存自动应答文件  </li></ol><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p>安装应答文件需要<code>system-config-kickstart</code>这个软件包<br>挂载光盘到<code>/media/</code>，<code>cd /media/Packages/</code>，使用<code>localinstall</code>解决<code>yum</code>安装依赖包<br><code>yum –y localinstall system-config-kickstart-2.8.6.6-el6.noarch.rpm</code><br><img src="/medias/drawing-bed/pxe/19.png"></p><p>输入<code>system-config-kickstart</code>回车，等待一会<br><img src="/medias/drawing-bed/pxe/20.png"></p><p>弹出以下界面<br><img src="/medias/drawing-bed/pxe/21.png"><br><img src="/medias/drawing-bed/pxe/22.png"><br><img src="/medias/drawing-bed/pxe/23.png"></p><p>在 布局 选项下面，设置分区信息（不能超过客户机磁盘容量！）<br><code>/boot：200M</code><br><code>/swap：1200M</code><br><code>/：10000M</code><br><img src="/medias/drawing-bed/pxe/24.png"><br><img src="/medias/drawing-bed/pxe/25.png"><br><img src="/medias/drawing-bed/pxe/26.png"><br><img src="/medias/drawing-bed/pxe/27.png"><br><img src="/medias/drawing-bed/pxe/28.png"></p><p>保存之后关闭窗口即可<br><img src="/medias/drawing-bed/pxe/29.png"></p><p>复制光盘里的内容到<code>/var/ftp/pub</code>，复制<code>ks.cfg</code>到<code>pub</code>目录下<br><img src="/medias/drawing-bed/pxe/30.png"></p><p>编辑<code>default</code>文件<br><img src="/medias/drawing-bed/pxe/31.png"><br><img src="/medias/drawing-bed/pxe/32.png"></p><p>客户机开机进入<code>BIOS</code>，在<code>boot</code>项下，将<code>Network</code>调整到第一位，<code>F10</code>保存退出<br><img src="/medias/drawing-bed/pxe/33.png"><br><img src="/medias/drawing-bed/pxe/34.png"><br>（报错：无法下载文件，重启服务端<code>xinetd</code>，<code>vsftpd</code>等服务）<br><img src="/medias/drawing-bed/pxe/35.png"><br><img src="/medias/drawing-bed/pxe/36.png"><br><img src="/medias/drawing-bed/pxe/37.png"><br>输入<code>root</code>用户，密码是上面设置的<code>123456</code>  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> PXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙</title>
      <link href="/posts/459a.html"/>
      <url>/posts/459a.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><p>&emsp;&emsp;防火墙，其实说白了讲，就是用于实现Linux下访问控制的功能的，它分为<font color=red>硬件的或者软件的防火墙两种</font>。无论是在哪个网络中，防火墙工作的地方一定是在网络的边缘。而我们的任务就是需要去定义到底防火墙如何工作，这就是防火墙的策略/规则，以达到让它对出入网络的IP、数据进行检测。<br>&emsp;&emsp;目前市面上比较常见的有3、4层的防火墙，叫网络层的防火墙，还有7层的防火墙，其实是代理层的网关。<br>&emsp;&emsp;对于TCP/IP的七层模型来讲，我们知道第三层是网络层，三层的防火墙会在这层对源地址和目标地址进行检测。但是对于七层的防火墙，不管你源端口或者目标端口，源地址或者目标地址是什么，都将对你所有的东西进行检查。所以，对于设计原理来讲，七层防火墙更加安全，但是这却带来了效率更低。所以市面上通常的防火墙方案，都是两者结合的。而又由于我们都需要从防火墙所控制的这个口来访问，所以防火墙的工作效率就成了用户能够访问数据多少的一个最重要的控制，配置的不好甚至有可能成为流量的瓶颈。  </p><h1 id="iptables的历史以及工作原理"><a href="#iptables的历史以及工作原理" class="headerlink" title="iptables的历史以及工作原理"></a>iptables的历史以及工作原理</h1><h2 id="iptables的发展"><a href="#iptables的发展" class="headerlink" title="iptables的发展"></a>iptables的发展</h2><p><code>iptables</code>的前身叫<code>ipfirewall</code>（内核1.x时代）,这是一个作者从<code>freeBSD</code>上移植过来的，能够工作在内核当中的，对数据包进行检测的一款简易访问控制工具。但是<code>ipfirewall</code>工作功能极其有限(它需要将所有的规则都放进内核当中，这样规则才能够运行起来，而放进内核，这个做法一般是极其困难的)。当内核发展到2.x系列的时候，软件更名为<code>ipchains</code>，它可以定义多条规则，将他们串起来，共同发挥作用，而现在，它叫做<code>iptables</code>，可以将规则组成一个列表，实现绝对详细的访问控制功能。<br>他们都是工作在用户空间中，定义规则的工具，本身并不算是防火墙。它们定义的规则，可以让在内核空间当中的<code>netfilter</code>来读取，并且实现让防火墙工作。而放入内核的地方必须要是特定的位置，必须是<code>tcp/ip</code>的协议栈经过的地方。而这个<code>tcp/ip</code>协议栈必须经过的地方，可以实现读取规则的地方就叫做<code>netfilter</code>。(网络过滤器)<br>作者一共在内核空间中选择了5个位置，  </p><ol><li>内核空间中：从一个网络接口进来，到另一个网络接口去的<br><code>FORWARD</code>：转发  </li><li>数据包从内核流入用户空间的<br><code>INPUT</code>：进站  </li><li>数据包从用户空间流出的<br><code>OUTPUT</code>：出站  </li><li>进入/离开本机的外网接口<br><code>POSTROUTING</code>：路由后  </li><li>进入/离开本机的内网接口<br><code>PREROUTEING</code>：路由前  </li></ol><h2 id="iptables的工作机制"><a href="#iptables的工作机制" class="headerlink" title="iptables的工作机制"></a>iptables的工作机制</h2><p>&emsp;&emsp;从上面的发展我们知道了作者选择了5个位置，来作为控制的地方，但是你有没有发现，其实前三个位置已经基本上能将路径彻底封锁了，但是为什么已经在进出的口设置了关卡之后还要在内部卡呢？由于数据包尚未进行路由决策，还不知道数据要走向哪里，所以在进出口是没办法实现数据过滤的。所以要在内核空间里设置转发的关卡，进入用户空间的关卡，从用户空间出去的关卡。那么，既然他们没什么用，那我们为什么还要放置他们呢？因为我们在做NAT和DNAT的时候，目标地址转换必须在路由之前转换。所以我们必须在外网而后内网的接口处进行设置关卡。<br>这五个位置也被称为五个钩子函数（hook functions）,也叫五个规则链。  </p><ol><li><code>PREROUTING</code> (路由前)  </li><li><code>INPUT</code> (数据包流入口)  </li><li><code>FORWARD</code> (转发管卡)  </li><li><code>OUTPUT</code> (数据包出口)  </li><li><code>POSTROUTING</code> (路由后)  </li></ol><p>&emsp;&emsp;这是<code>NetFilter</code>规定的五个规则链，任何一个数据包，只要经过本机，必将经过这五个链中的其中一个链。   </p><h2 id="防火墙的策略"><a href="#防火墙的策略" class="headerlink" title="防火墙的策略"></a>防火墙的策略</h2><p>&emsp;&emsp;防火墙策略一般分为两种，一种叫“通”策略，一种叫“堵”策略，通策略，默认门是关着的，必须要定义谁能进。堵策略则是，大门是洞开的，但是你必须有身份认证，否则不能进。所以我们要定义，让进来的进来，让出去的出去，所以通，是要全通，而堵，则是要选择。当我们定义的策略的时候，要分别定义多条功能，其中：定义数据包中允许或者不允许的策略，filter过滤的功能，而定义地址转换的功能的则是nat选项。为了让这些功能交替工作，我们制定出了“表”这个定义，来定义、区分各种不同的工作功能和处理方式。  </p><p>我们现在用的比较多个功能有3个：  </p><ol><li><code>filter</code> 定义允许或者不允许的  </li><li><code>nat</code> 定义地址转换的  </li><li><code>mangle</code>功能:修改报文原数据  </li></ol><p>&emsp;&emsp;我们修改报文原数据就是来修改TTL的。能够实现将数据包的元数据拆开，在里面做标记/修改内容的。而防火墙标记，其实就是靠mangle来实现的。  </p><p>小扩展:<br>对于<code>filter</code>来讲一般只能做在3个链上：<code>INPUT</code> ，<code>FORWARD</code> ，<code>OUTPUT</code><br>对于<code>nat</code>来讲一般也只能做在3个链上：<code>PREROUTING</code> ，<code>OUTPUT</code> ，<code>POSTROUTING</code><br>而<code>mangle</code>则是5个链都可以做：<code>PREROUTING</code>，<code>INPUT</code>，<code>FORWARD</code>，<code>OUTPUT</code>，<code>POSTROUTING</code>  </p><p><code>iptables/netfilter</code>（这款软件）是工作在用户空间的，它可以让规则进行生效的，本身不是一种服务，而且规则是立即生效的。而我们<code>iptables</code>现在被做成了一个服务，可以进行启动，停止的。启动，则将规则直接生效，停止，则将规则撤销。<br><code>iptables</code>还支持自己定义链。但是自己定义的链，必须是跟某种特定的链关联起来的。在一个关卡设定，指定当有数据的时候专门去找某个特定的链来处理，当那个链处理完之后，再返回。接着在特定的链中继续检查。  </p><p>注意：规则的次序非常关键，谁的规则越严格，应该放的越靠前，而检查规则的时候，是按照从上往下的方式进行检查的。  </p><h1 id="规则的写法"><a href="#规则的写法" class="headerlink" title="规则的写法:"></a>规则的写法:</h1><p><code>iptables</code>定义规则的方式比较复杂：格式：<code>iptables [-t table] COMMAND chain CRETIRIA -j ACTION</code><br><code>-t table</code>：3个filter nat mangle<br><code>COMMAND</code>：定义如何对规则进行管理<br><code>chain</code>：指定你接下来的规则到底是在哪个链上操作的，当定义策略的时候，是可以省略的<br><code>CRETIRIA</code>：指定匹配标准<br><code>-j ACTION</code>：指定如何进行处理  </p><p>比如：不允许<code>172.16.0.0/24</code>的进行访问。<br><code>iptables -t filter -A INPUT -s 172.16.0.0/16 -p udp --dport 53 -j DROP</code>  </p><p>当然你如果想拒绝的更彻底：<br><code>iptables -t filter -R INPUT 1 -s 172.16.0.0/16 -p udp --dport 53 -j REJECT</code>  </p><p>查看定义规则的详细信息<br><code>iptables -L -n -v</code>  </p><h1 id="详解COMMAND"><a href="#详解COMMAND" class="headerlink" title="详解COMMAND:"></a>详解COMMAND:</h1><h2 id="链管理命令（这都是立即生效的）"><a href="#链管理命令（这都是立即生效的）" class="headerlink" title="链管理命令（这都是立即生效的）"></a>链管理命令（这都是立即生效的）</h2><p><code>-P</code>：设置默认策略的（设定默认门是关着的还是开着的）默认策略一般只有两种<br><code>iptables -P INPUT (DROP|ACCEPT)</code>  默认是关的/默认是开的  </p><p>比如：<code>iptables -P INPUT DROP</code> 这就把默认规则给拒绝了。并且没有定义哪个动作，所以关于外界连接的所有规则包括Xshell连接之类的，远程连接都被拒绝了。<br><code>-F</code>：FLASH，清空规则链的(注意每个链的管理权限)<br><code>iptables -t nat -F PREROUTING</code><br><code>iptables -t nat -F</code> 清空nat表的所有链<br><code>-N</code>：NEW 支持用户新建一个链<br><code>iptables -N inbound_tcp_web</code> 表示附在tcp表上用于检查web的。<br><code>-X</code>：用于删除用户自定义的空链，使用方法跟-N相同，但是在删除之前必须要将里面的链给清空昂了<br><code>-E</code>：用来Rename chain主要是用来给用户自定义的链重命名<br><code>-E oldname newname</code><br><code>-Z</code>：清空链，及链中默认规则的计数器的（有两个计数器，被匹配到多少个数据包，多少个字节）<br><code>iptables -Z</code>:清空  </p><h2 id="规则管理命令"><a href="#规则管理命令" class="headerlink" title="规则管理命令"></a>规则管理命令</h2><p><code>-A</code>：追加，在当前链的最后新增一个规则<br><code>-I num</code>：插入，把当前规则插入为第几条。<br><code>-I 3</code>：插入为第三条<br><code>-R num</code>：Replays替换/修改第几条规则，格式：<code>iptables -R 3 ...</code><br><code>-D num</code>：删除，明确指定删除第几条规则  </p><h2 id="查看管理命令-“-L”"><a href="#查看管理命令-“-L”" class="headerlink" title="查看管理命令 “-L”"></a>查看管理命令 “-L”</h2><p>附加子命令<br><code>-n</code>：以数字的方式显示ip，它会将ip直接显示出来，如果不加-n，则会将ip反向解析成主机名。<br><code>-v</code>：显示详细信息<br><code>-vv</code>，<code>-vvv</code>:越多越详细<br><code>-x</code>：在计数器上显示精确值，不做单位换算<br><code>--line-numbers</code>：显示规则的行号<br><code>-t nat</code>：显示所有的关卡的信息  </p><h1 id="详解匹配标准"><a href="#详解匹配标准" class="headerlink" title="详解匹配标准"></a>详解匹配标准</h1><h2 id="通用匹配：源地址目标地址的匹配"><a href="#通用匹配：源地址目标地址的匹配" class="headerlink" title="通用匹配：源地址目标地址的匹配"></a>通用匹配：源地址目标地址的匹配</h2><p><code>-s</code>：指定作为源地址匹配，这里不能指定主机名称，必须是IP<br><code>IP</code> <code>IP/MASK</code> <code>0.0.0.0/0.0.0.0</code>，而且地址可以取反，加一个”!”表示除了哪个IP之外<br><code>-d</code>：表示匹配目标地址<br><code>-p</code>：用于匹配协议的（这里的协议通常有3种，<code>TCP</code>/<code>UDP</code>/<code>ICMP</code>）<br><code>-i eth0</code>：从这块网卡流入的数据，流入一般用在<code>INPUT</code>和<code>PREROUTING</code>上<br><code>-o eth0</code>：从这块网卡流出的数据，流出一般在<code>OUTPUT</code>和<code>POSTROUTING</code>上  </p><h2 id="扩展匹配"><a href="#扩展匹配" class="headerlink" title="扩展匹配"></a>扩展匹配</h2><h3 id="隐含扩展：对协议的扩展"><a href="#隐含扩展：对协议的扩展" class="headerlink" title="隐含扩展：对协议的扩展"></a>隐含扩展：对协议的扩展</h3><p><code>-p tcp</code>：TCP协议的扩展。一般有三种扩展<br><code>--dport XX-XX</code>：指定目标端口,不能指定多个非连续端口,只能指定单个端口，比如<br><code>--dport 21</code> 或者 <code>--dport 21-23</code> (此时表示21,22,23)<br><code>--sport</code>：指定源端口<br><code>--tcp-flags</code>：TCP的标志位（<code>SYN</code>,<code>ACK</code>，<code>FIN</code>,<code>PSH</code>，<code>RST</code>,<code>URG</code>）<br>对于它，一般要跟两个参数：<code>检查的标志位</code>/<code>必须为1的标志位</code><br><code>--tcp-flags syn,ack,fin,rst</code>=<code>--syn</code><br>表示检查这4个位，这4个位中syn必须为1，其他的必须为0。所以这个意思就是用于检测三次握手的第一次包的。对于这种专门匹配第一包的<code>SYN</code>为1的包，还有一种简写方式，叫做<code>--syn</code><br><code>-p udp</code>：<code>UDP</code>协议的扩展<br><code>--dport</code><br><code>--sport</code><br><code>-p icmp</code>：<code>icmp</code>数据报文的扩展<br><code>--icmp-type</code>：<br><code>echo-request</code>(请求回显)，一般用8 来表示，所以 <code>--icmp-type 8</code> 匹配请求回显数据包<br><code>echo-reply</code> （响应的数据包）一般用0来表示  </p><h3 id="显式扩展（-m）"><a href="#显式扩展（-m）" class="headerlink" title="显式扩展（-m）"></a>显式扩展（-m）</h3><p>扩展各种模块<br><code>-m multiport</code>：表示启用多端口扩展<br>之后我们就可以启用比如<code>--dports 21,23,80</code>  </p><h1 id="详解-j-ACTION"><a href="#详解-j-ACTION" class="headerlink" title="详解-j ACTION"></a>详解-j ACTION</h1><p>常用的<code>ACTION</code>：<br><code>DROP</code>：悄悄丢弃，一般我们多用DROP来隐藏我们的身份，以及隐藏我们的链表<br><code>REJECT</code>：明示拒绝<br><code>ACCEPT</code>：接受<br><code>custom_chain</code>：转向一个自定义的链<br><code>DNAT</code><br><code>SNAT</code><br><code>MASQUERADE</code>：源地址伪装<br><code>REDIRECT</code>：重定向：主要用于实现端口重定向<br><code>MARK</code>：打防火墙标记的<br><code>RETURN</code>：返回<br>在自定义链执行完毕后使用返回，来返回原规则链。  </p><p>Q1：只要是来自于<code>172.16.0.0/16</code>网段的都允许访问我本机的<code>172.16.100.1</code>的<code>SSHD</code>服务<br>A1：首先肯定是在允许表中定义的。因为不需要做NAT地址转换之类的，然后查看我们<code>SSHD</code>服务，在22号端口上，处理机制是接受，对于这个表，需要有一来一回两个规则，如果我们允许也好，拒绝也好，对于访问本机服务，我们最好是定义在INPUT链上，而OUTPUT再予以定义就好。(会话的初始端先定义)，所以加规则就是：<br>&emsp;&emsp;定义进来的： <code>iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.100.1 -p tcp --dport 22 -j ACCEPT</code><br>&emsp;&emsp;定义出去的： <code>iptables -t filter -A OUTPUT -s 172.16.100.1 -d 172.16.0.0/16 -p tcp --dport 22 -j ACCEPT</code><br>&emsp;&emsp;将默认策略改成DROP:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -P INPUT DROPiptables -P OUTPUT DROPiptables -P FORWARD DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="状态检测："><a href="#状态检测：" class="headerlink" title="状态检测："></a>状态检测：</h1><p>&emsp;&emsp;什么是状态检测？对于整个TCP协议来讲，它是一个有连接的协议，三次握手中，第一次握手，我们就叫NEW连接，而从第二次握手以后的，ack都为1，这是正常的数据传输，和tcp的第二次第三次握手，叫做已建立的连接（<code>ESTABLISHED</code>）,还有一种状态，比较诡异的，比如：<code>SYN=1 ACK=1 RST=1</code>,对于这种我们无法识别的，我们都称之为<code>INVALID</code>无法识别的。还有第四种，FTP这种古老的拥有的特征，每个端口都是独立的，21号和20号端口都是一去一回，他们之间是有关系的，这种关系我们称之为<code>RELATED</code>。  </p><p>所以我们的状态一共有四种：<br>&emsp;&emsp;&emsp;&emsp;<code>NEW</code><br>&emsp;&emsp;&emsp;&emsp;<code>ESTABLISHED</code><br>&emsp;&emsp;&emsp;&emsp;<code>RELATED</code><br>&emsp;&emsp;&emsp;&emsp;<code>INVALID</code><br>所以我们对于刚才的QA1，可以增加状态检测。比如进来的只允许状态为<code>NEW</code>和<code>ESTABLISHED</code>的进来，出去只允许<code>ESTABLISHED</code>的状态出去，这就可以将比较常见的反弹式木马有很好的控制机制。  </p><p>对于QA1的扩展：<br>进来的拒绝出去的允许，进来的只允许ESTABLISHED进来，出去只允许ESTABLISHED出去。默认规则都使用拒绝<br><code>iptables -L -n --line-number</code>：查看之前的规则位于第几行<br>改写INPUT  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -R INPUT <span class="token number">2</span> -s <span class="token number">172.16</span>.0.0/16 -d <span class="token number">172.16</span>.100.1 -p tcp --dport <span class="token number">22</span> -m state --state NEW,ESTABLISHED -j ACCEPTiptables -R OUTPUT <span class="token number">1</span> -m state --state ESTABLISHED -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时如果想再放行一个80端口如何放行呢？  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -d <span class="token number">172.16</span>.100.1 -p tcp --dport <span class="token number">80</span> -m state --state NEW,ESTABLISHED -j ACCEPTiptables -R INPUT <span class="token number">1</span> -d <span class="token number">172.16</span>.100.1 -p udp --dport <span class="token number">53</span> -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Q2：假如我们允许自己ping别人，但是别人ping自己ping不通如何实现呢？<br>A2：对于ping这个协议，进来的为<code>8</code>（ping），出去的为<code>0</code>(响应).我们为了达到目的，需要8出去,允许<code>0</code>进来  </p><p>在出去的端口上：<code>iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT</code><br>在进来的端口上：<code>iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</code>  </p><p>小扩展：对于<code>127.0.0.1</code>比较特殊，我们需要明确定义它<br><code>iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</code><br><code>iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</code>  </p><h1 id="SNAT和DNAT的实现"><a href="#SNAT和DNAT的实现" class="headerlink" title="SNAT和DNAT的实现"></a>SNAT和DNAT的实现</h1><p>&emsp;&emsp;由于我们现在IP地址十分紧俏，已经分配完了，这就导致我们必须要进行地址转换，来节约我们仅剩的一点IP资源。那么通过iptables如何实现NAT的地址转换呢？  </p><h2 id="SNAT基于原地址的转换"><a href="#SNAT基于原地址的转换" class="headerlink" title="SNAT基于原地址的转换"></a>SNAT基于原地址的转换</h2><p>&emsp;&emsp;基于原地址的转换一般用在我们的许多内网用户通过一个外网的口上网的时候，这时我们将我们内网的地址转换为一个外网的IP，我们就可以实现连接其他外网IP的功能。  </p><p>所以我们在iptables中就要定义到底如何转换：  </p><p>定义的样式：<br>&emsp;&emsp;比如我们现在要将所有<code>192.168.10.0</code>网段的IP在经过的时候全都转换成<code>172.16.100.1</code>这个假设出来的外网地址：<br><code>iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j SNAT --to-source 172.16.100.1</code><br>&emsp;&emsp;这样，只要是来自本地网络的试图通过网卡访问网络的，都会被统统转换成172.16.100.1这个IP，那么，如果<code>172.16.100.1</code>不是固定的怎么办？<br>&emsp;&emsp;我们都知道当我们使用联通或者电信上网的时候，一般它都会在每次你开机的时候随机生成一个外网的IP，意思就是外网地址是动态变换的。这时我们就要将外网地址换成 MASQUERADE(动态伪装):它可以实现自动寻找到外网地址，而自动将其改为正确的外网地址。所以，我们就需要这样设置：<br><code>iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j MASQUERADE</code><br>这里要注意：地址伪装并不适用于所有的地方。  </p><h2 id="DNAT目标地址转换"><a href="#DNAT目标地址转换" class="headerlink" title="DNAT目标地址转换"></a>DNAT目标地址转换</h2><p>&emsp;&emsp;对于目标地址转换，数据流向是从外向内的，外面的是客户端，里面的是服务器端通过目标地址转换，我们可以让外面的ip通过我们对外的外网ip来访问我们服务器不同的服务器，而我们的服务却放在内网服务器的不同的服务器上。  </p><p>如何做目标地址转换呢？：<br><code>iptables -t nat -A PREROUTING -d 192.168.10.18 -p tcp --dport 80 -j DNAT --todestination 172.16.100.2</code><br>目标地址转换要做在到达网卡之前进行转换,所以要做在PREROUTING这个位置上  </p><h1 id="控制规则的存放以及开启"><a href="#控制规则的存放以及开启" class="headerlink" title="控制规则的存放以及开启"></a>控制规则的存放以及开启</h1><p>&emsp;&emsp;注意：你所定义的所有内容，当你重启的时候都会失效，要想我们能够生效，需要使用一个命令将它保存起来  </p><ol><li><p><code>service iptables save</code>命令<br>它会保存在<code>/etc/sysconfig/iptables</code>这个文件中  </p></li><li><p><code>iptables-save</code>命令<br><code>iptables-save &gt; /etc/sysconfig/iptables</code>  </p></li><li><p><code>iptables-restore</code>命令<br>开机的时候，它会自动加载<code>/etc/sysconfig/iptabels</code><br>如果开机不能加载或者没有加载，而你想让一个自己写的配置文件（假设为iptables.2）手动生效的话：<br><code>iptables-restore &lt; /etc/sysconfig/iptables.2</code><br>则完成了将iptables中定义的规则手动生效  </p></li></ol><hr><h1 id="防火墙firewall的基本概述"><a href="#防火墙firewall的基本概述" class="headerlink" title="防火墙firewall的基本概述"></a>防火墙firewall的基本概述</h1><p>&emsp;&emsp;现在的RedHat/CentOS7版本默认都使用firewall防火墙了，firewall的配方法大致可以分为图形化和命令行。firewalld跟iptables比起来，不好的地方是每个服务都需要去设置才能放行，因为默认是拒绝。而iptables里默认是每个服务是允许，需要拒绝的才去限制。<br>&emsp;&emsp;firewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和 iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结构以及使用方法不一样罢了。  </p><h1 id="防火墙使用区域管理"><a href="#防火墙使用区域管理" class="headerlink" title="防火墙使用区域管理"></a>防火墙使用区域管理</h1><p><img src="/medias/drawing-bed/others/2.jpg"></p><pre class="line-numbers language-none"><code class="language-none">阻塞区域（block）：任何传入的网络数据包都将被阻止。  工作区域（work）：相信网络上的其他计算机，不会损害你的计算机。  家庭区域（home）：相信网络上的其他计算机，不会损害你的计算机。  公共区域（public）：不相信网络上的任何计算机，只有选择接受传入的网络连接。  隔离区域（DMZ）：隔离区域也称为非军事区域，内外网络之间增加的一层网络，起到缓冲作用。对于隔离区域，只有选择接受传入的网络连接。  信任区域（trusted）：所有的网络连接都可以接受。  丢弃区域（drop）：任何传入的网络连接都被拒绝。  内部区域（internal）：信任网络上的其他计算机，不会损害你的计算机。只有选择接受传入的网络连接。  外部区域（external）：不相信网络上的其他计算机，不会损害你的计算机。只有选择接受传入的网络连接。    注：FirewallD的默认区域是public。  firewalld默认提供了九个zone配置文件：block.xml、dmz.xml、drop.xml、external.xml、 home.xml、internal.xml、public.xml、trusted.xml、work.xml，他们都保存在&quot;&#x2F;usr&#x2F;lib &#x2F;firewalld&#x2F;zones&#x2F;&quot;目录下。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/others/3.jpg"></p><h1 id="防火墙基本指令参数"><a href="#防火墙基本指令参数" class="headerlink" title="防火墙基本指令参数"></a>防火墙基本指令参数</h1><p><code>firewall-cmd</code> #是命令行配置<br><code>firewall-config</code> #是图形化配置 默认中文不支持福规则的动作设置需要<code>LANG=C</code>转一下英文ASCII环境  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall -cmd<span class="token comment"># 域zone相关的命令</span>--get-default-zone  查询默认的区域名称--set-default-zone<span class="token operator">=</span><span class="token operator">&lt;</span>区域名称<span class="token operator">></span>   设置默认的区域--get-active-zones  显示当前正在使用的区域与网卡名称--get-zones 显示总共可用的区域--new-zone<span class="token operator">=</span> 新增区域<span class="token comment"># services管理的命令</span>--get-services  显示预先定义的服务--add-service<span class="token operator">=</span><span class="token operator">&lt;</span>服务名<span class="token operator">></span> 设置默认区域允许该服务的流量--remove-service<span class="token operator">=</span><span class="token operator">&lt;</span>服务名<span class="token operator">></span>  设置默认区域不再允许该服务的流量<span class="token comment"># Port相关命令</span>--add-port<span class="token operator">=</span><span class="token operator">&lt;</span>端口号/协议<span class="token operator">></span> 设置默认区域允许该端口的流量--remove-port<span class="token operator">=</span><span class="token operator">&lt;</span>端口号/协议<span class="token operator">></span>  设置默认区域不再允许该端口的流量<span class="token comment"># 网卡相关的命令</span>--add-interface<span class="token operator">=</span><span class="token operator">&lt;</span>网卡名称<span class="token operator">></span>  将源自该网卡的所有流量都导向某个指定区域--change-interface<span class="token operator">=</span><span class="token operator">&lt;</span>网卡名称<span class="token operator">></span>   将某个网卡与区域进行关联<span class="token comment"># 查看所有规则的命令</span>--list-all  显示当前区域的网卡配置参数、资源、端口以及服务等信息加上--permanent 查看永久生效的配置参数、资源、端口以及服务等信息<span class="token comment"># 重载防火墙的策略</span>--reload    让“永久生效”的配置规则立即生效，并覆盖当前的配置规则<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="防火墙区域配置策略"><a href="#防火墙区域配置策略" class="headerlink" title="防火墙区域配置策略"></a>防火墙区域配置策略</h1><p><img src="/medias/drawing-bed/others/4.jpg"></p><p>开始之前确认防火墙是开启的状态  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># zone区域相关指令</span>//查看当前默认区域<span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --get-default-zone </span>public//查看当前活跃的区域<span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --get-active-zone</span>publicinterfaces: eth0 eth1 //将当前默认区域修改为dropfirewall-cmd --set-default-zone<span class="token operator">=</span>drop//将网络接口关联至drop区域firewall-cmd --permanent  --change-interface<span class="token operator">=</span>eth0 --zone<span class="token operator">=</span>drop//将192.168.122.0/24网段加入trusted白名单firewall-cmd --permanent --add-source<span class="token operator">=</span><span class="token number">192.168</span>.122.0/24 --zone<span class="token operator">=</span>trusted//重载防火墙firewall-cmd --reloadsuccess//查看当前处于活动的区域firewall-cmd --get-active-zonesdrop    <span class="token comment"># 默认区域, eth0接口流量都由drop区域过滤</span>interfaces: eth0trusted <span class="token comment"># 数据包的源IP是192.168.122.0/24网段走trusted区域</span>sources: <span class="token number">192.168</span>.122.0/24<span class="token comment"># 使用firewalld中各个区域的应用</span>//允许10.0.0.1IP地址能访问sshfirewall-cmd --add-source<span class="token operator">=</span><span class="token number">10.0</span>.0.0/24 --permanent --zone<span class="token operator">=</span>public <span class="token comment">#默认zone在public</span>firewall-cmd --reload//将192.168.20.0网段加入白名单firewall-cmd --add-source<span class="token operator">=</span><span class="token number">192.168</span>.20.0/24 --permanent --zone<span class="token operator">=</span>trustedfirewall-cmd --reload//查看设置项firewall-cmd --get-active-zonedropinterfaces: eth0 eth1publicsources: <span class="token number">10.0</span>.0.1/32trustedsources: <span class="token number">192.168</span>.20.0/24<span class="token comment"># 查询firewald指定区域的明细</span>firewall-cmd  --list-all --zone<span class="token operator">=</span>drop <span class="token comment">#指明要查的zone 加上--permanent查看永久生效的区域的明细</span>drop <span class="token punctuation">(</span>active<span class="token punctuation">)</span>target: DROPicmp-block-inversion: nointerfaces: eth0 eth1sources:services:ports:protocols:masquerade: noforward-ports:source-ports:icmp-blocks:rich rules:<span class="token comment"># 查询public区域是否允许请求SSH协议的流量 #对应服务对应状态</span>firewall-cmd --zone<span class="token operator">=</span>public --query-service<span class="token operator">=</span>ssh<span class="token function">yes</span><span class="token comment"># 恢复默认规则操作</span>firewall-cmd --set-default-zone<span class="token operator">=</span>publicfirewall-cmd --remove-source<span class="token operator">=</span><span class="token number">192.168</span>.1.0/24 --zone<span class="token operator">=</span>public --permanentfirewall-cmd --remove-source<span class="token operator">=</span><span class="token number">192.168</span>.1.0/24 --zone<span class="token operator">=</span>trusted --permanentfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="防火墙端口访问策略"><a href="#防火墙端口访问策略" class="headerlink" title="防火墙端口访问策略"></a>防火墙端口访问策略</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开放80端口</span>firewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token number">80</span>/udp --add-port<span class="token operator">=</span><span class="token number">80</span>/tcpfirewall-cmd --reload <span class="token comment">#重载配置生效</span>firewall-cmd --list-ports <span class="token comment">#检查开放的端口</span><span class="token comment"># 配置防火墙, 访问80udp的端口流量设置为永久拒绝，并立即生效</span>firewall-cmd --permanent --remove-port<span class="token operator">=</span><span class="token number">80</span>/udpfirewall-cmd --reload <span class="token operator">&amp;&amp;</span> firewall-cmd --list-ports <span class="token comment">#重载并查看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="防火墙服务访问策略"><a href="#防火墙服务访问策略" class="headerlink" title="防火墙服务访问策略"></a>防火墙服务访问策略</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开放httpd服务</span>firewall-cmd --permanent --add-service<span class="token operator">=</span>http --add-service<span class="token operator">=</span>httpsfirewall-cmd --reload <span class="token punctuation">;</span> firewall-cmd --list-services <span class="token comment"># 重载生效并查看</span><span class="token comment"># 配置防火墙, 请求https协议的流量设置为永久拒绝，并立即生效</span>firewall-cmd --permanent --remove-service<span class="token operator">=</span>https firewall-cmd --reload <span class="token punctuation">;</span> firewall-cmd --list-services <span class="token comment"># 重载生效并查看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="防火墙端口转发策略"><a href="#防火墙端口转发策略" class="headerlink" title="防火墙端口转发策略"></a>防火墙端口转发策略</h1><p>端口转发需要用到<code>forward-port</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">转发本机80/tcp端口的流量至8080/tcp端口，要求当前和长期有效firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token number">80</span>:proto<span class="token operator">=</span>tcp:to <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">8080</span>:toaddr<span class="token operator">=</span><span class="token number">10.0</span>.0.61移除转发firewall-cmd --remove-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token number">80</span>:proto<span class="token operator">=</span>tcp:toport<span class="token operator">=</span><span class="token number">8080</span>:toaddr<span class="token operator">=</span><span class="token number">10.0</span>.0.61开启IP伪装firewall-cmd --add-masquerade --permanent <span class="token comment">#IP地址转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="防火墙富规则策略"><a href="#防火墙富规则策略" class="headerlink" title="防火墙富规则策略"></a>防火墙富规则策略</h1><p>到重点了，这里上面的条目富规则都可实现<br>具体配置案例查询<code>firewalld.richlanguage</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//区里的富规则按先后顺序匹配，按先匹配到的规则生效。<span class="token comment">#firewall-cmd ↓</span>--add-rich-rule<span class="token operator">=</span><span class="token string">'&lt;RULE>'</span>    //在指定的区添加一条富规则--remove-rich-rule<span class="token operator">=</span><span class="token string">'&lt;RULE>'</span> //在指定的区删除一条富规则--query-rich-rule<span class="token operator">=</span><span class="token string">'&lt;RULE>'</span>  //找到规则返回0 ，找不到返回1--list-rich-rules       //列出指定区里的所有富规则--list-all 和 --list-all-zones 也能列出存在的富规则//在192.168.0.0/24这个段里可以访问tftp服务rule <span class="token assign-left variable">family</span><span class="token operator">=</span><span class="token string">"ipv4"</span> <span class="token builtin class-name">source</span> <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token string">"192.168.0.0/24"</span> <span class="token function">service</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"tftp"</span> log <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token string">"tftp"</span> accept//来自192.168.0.0/24这个段的8080端口数据转发到本地的80端口rule <span class="token assign-left variable">family</span><span class="token operator">=</span><span class="token string">"ipv4"</span> <span class="token builtin class-name">source</span> <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token string">"192.168.0.0/24"</span> forward-port to-addr<span class="token operator">=</span><span class="token string">"local"</span> to-port<span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"tcp"</span> <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"80"</span>//拒绝192.168.2.4这个ip访问rule <span class="token assign-left variable">family</span><span class="token operator">=</span><span class="token string">"ipv4"</span> <span class="token builtin class-name">source</span> <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token string">"192.168.2.4"</span> drop<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="防火墙开启内部上网"><a href="#防火墙开启内部上网" class="headerlink" title="防火墙开启内部上网"></a>防火墙开启内部上网</h1><p>firewalld防火墙开启ip伪装  </p><ol><li><p>网卡默认是在public的zones内，也是默认zones。永久添加源地址转换功能<br><code>firewall-cmd --add-masquerade --permanent</code><br><code>firewall-cmd --reload</code>  </p></li><li><p>共享上网<br>开启的ip转发后，相当了一台本地的nat服务器。<br>将client的网关指向你配置的ip转发服务器的IP。<br>只要你的ip转发服务器可以正常解析公网IP(dns可解析公网地址)。<br>Clent服务器就可以借助IP转发服务器实现上网（前提是中间路由可达）。  </p></li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dns域名解析</title>
      <link href="/posts/61ef.html"/>
      <url>/posts/61ef.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="DNS域名解析服务"><a href="#DNS域名解析服务" class="headerlink" title="DNS域名解析服务"></a>DNS域名解析服务</h1><h2 id="了解域名"><a href="#了解域名" class="headerlink" title="了解域名"></a>了解域名</h2><p>&emsp;&emsp;IP地址是Internet主机的作为路由寻址用的数字型标识，人不容易记忆。因而产生了域名，这一字符型标识。<br>&emsp;&emsp;域名，是由一串用”点”分割的字符组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名的目的是便于记忆和沟通的一组服务器的地址（网站，电子邮件，FTP等）。<br>域名组成：<br>&emsp;&emsp;顶级域：<br>&emsp;&emsp;&emsp;&emsp;组织域：<code>.com</code> <code>.net</code> <code>.org</code> <code>.edu</code><br>&emsp;&emsp;&emsp;&emsp;国家域：<code>.cn</code> <code>.jp</code> <code>.iq</code><br>&emsp;&emsp;二级域：就是个人申请的域名<br>&emsp;&emsp;三级域或主机名：自己添加的三级域名或标识此主机的主机名<br>DNS的命名方式：主机名.二级域名.顶级域名.<br>例如：<code>www.baidu.com.</code><br><code>www.baidu.com</code>：被称为：<code>FQDN</code>（完全合格域名）  </p><h2 id="客户端访问站点的步骤："><a href="#客户端访问站点的步骤：" class="headerlink" title="客户端访问站点的步骤："></a>客户端访问站点的步骤：</h2><p>&emsp;&emsp;客户机先访问本地的hosts文件（<code>/etc/hosts</code>）,如果没有，则访问本地的缓存，缓存再没有，就去网络中DNS服务器，然后DNS服务器返回结果以后，客户机拿到结果以后，首先将结果在自己的缓存中保存，然后在进行真正的访问。这里缓存起到了加速的作用。<br>在DNS整个查询解析过程中，其实分为两段，一段是用户指向的DNS服务器，第二阶段是指定的DNS服务器在网络上分布式查找的过程。这种对于用户来说，找自己指定的DNS服务器的查询方式就叫做递归查询。  </p><p>DNS查询类型：<br>&emsp;&emsp;<code>递归查询</code>：第一段都是递归查询<br>&emsp;&emsp;<code>迭代查询</code>：第二段就是迭代查询（迭代也不是绝对的，只是大多数是迭代的）  </p><h1 id="DNS系统的作用"><a href="#DNS系统的作用" class="headerlink" title="DNS系统的作用"></a>DNS系统的作用</h1><p>&emsp;&emsp;整个Internet大家庭中，连接了数以亿计的服务器，个人主机，其中大部分的网站、邮件等服务器都使用了域名形式的地址，例如：<code>www.google.com</code>、<code>mail.163.com</code>等，很显然这种地址形式要比使用<code>64.233.189.147</code>、<code>202.108.33.74</code>的IP地址形式更加直观，而且更容易被用户记住。<br>&emsp;&emsp;DNS系统在网络中的作用就是维护着一个”地址数据库”，其中记录了各种主机域名与ip地址的对应关系，以便为客户程序提供正式或反向的地址查询服务，即正向解析与反向解析。<br>&emsp;&emsp;正向解析：根据域名查ip地址，即将指定的域名解析为相对应的ip地址，域名的正向解析是DNS服务器最基本的功能，也是最常用的功能。<br>&emsp;&emsp;反向解析：根据ip地址查询域名，即将指定的ip地址解析为相对应的域名，域名的反向解析不是很常用，只在一些特殊场合才会用到，如可用于反垃圾邮件的验证。<br>每一台DNS服务器都只负责管理一个有限范围（一个或几个域）内的主机域名和ip地址的对应关系，这些特定的DNS域或ip地址段称为<code>zone</code>(区域)。<br>根据地址解析的方向不同，DNS区域响应地分为正向区域（包含域名到ip地址的解析记录）和反向区域（包含IP地址到域名的解析记录）。<br>&emsp;&emsp;根据所管理的区域地址数据的来源不同，DNS系统可分为不同的类型  </p><p>常见的DNS类型如下：<br>&emsp;&emsp;缓存域名服务器：只提供域名解析结构的缓存功能，目地在于提高查询速度和效率，但是没有自己控制的区域地址数据，构建缓存域名服务器时，必须设置根域或指定其他DNS服务器作为解析来源。<br>&emsp;&emsp;主域名服务器：维护某一个特定DNS区域的地址数据库，对其中的解析记录具有主控制权，是指定区域中唯一存在的权威服务器、官方服务器。构建主域名服务器时，需要自行建立所负责的地址数据文件。<br>&emsp;&emsp;从域名服务器：与主域名服务器提供完全相同的DNS解析服务，通常用于DNS服务器的热备份，对客户机来说，无论使用主域名服务器还是从域名服务器，查询结果都是一样的。<br>&emsp;&emsp;以上所述主、从服务器的角色只是针对某一个特定的DNS区域来说的，例如，同一台DNS服务器，可以是<code>exp.com</code>区域的主域名服务器，同时也可以是<code>itwangluo.com</code>区域的从域名服务器。  </p><h1 id="BIND的安装、配置"><a href="#BIND的安装、配置" class="headerlink" title="BIND的安装、配置"></a>BIND的安装、配置</h1><p>&emsp;&emsp;BIND不是唯一能够提供域名服务的DNS服务程序，但它却是应用最为广泛的，BIND可以运行在大多数Linux/Unix主机中，其官方站点位于<code>https://www.isc.org/</code><br>安装BIND软件系统光盘自带了BIND服务的安装文件，主要包括以下几个软件包：<br>&emsp;&emsp;<code>bind-9.8.2-0.62.rc1.el6.x86_64</code><br>&emsp;&emsp;<code>bind-utils-9.8.2-0.62.rc1.el6.x86_64</code><br>&emsp;&emsp;<code>bind-libs-9.8.2-0.62.rc1.el6.x86_64</code><br>&emsp;&emsp;<code>bind-chroot-9.8.2-0.62.rc1.el6.x86_64</code>  </p><p>各软件包的作用如下：<br>&emsp;&emsp;<code>bind</code>：提供了域名服务的主要程序及相关文件<br>&emsp;&emsp;<code>bind-utils</code>：提供了对<code>DNS</code>服务器的测试工具程序，如<code>nslookup</code>等<br>&emsp;&emsp;<code>bind-libs</code>：提供了<code>bind</code>、<code>bind-utils</code>需要使用的库函数<br>&emsp;&emsp;<code>bind-chroot</code>：为<code>BIND</code>服务提供一个伪装的根目录（将<code>/var/named/chroot/</code>文件夹作为<code>BIND</code>的根目录），以提供高安全性。<br><code>BIND</code>安装以后，会自动增加一个名为<code>named</code>的系统服务。  </p><h1 id="DNS服务器的类型（缓存服务器、主服务器、从服务器、分离解析服务器）"><a href="#DNS服务器的类型（缓存服务器、主服务器、从服务器、分离解析服务器）" class="headerlink" title="DNS服务器的类型（缓存服务器、主服务器、从服务器、分离解析服务器）"></a>DNS服务器的类型（缓存服务器、主服务器、从服务器、分离解析服务器）</h1><p>配置文件<code>/etc/named.conf</code>  </p><h2 id="缓存服务器配置"><a href="#缓存服务器配置" class="headerlink" title="缓存服务器配置"></a>缓存服务器配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/named.confoptions <span class="token punctuation">&#123;</span>  listen-on port <span class="token number">53</span> <span class="token punctuation">&#123;</span> <span class="token number">192.168</span>.0.5<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment"># 监听的地址和端口，也可以不指定 某一个，填写"any"表示监听所有接口的UDP 53端口。</span>  directory <span class="token string">"/var/named"</span><span class="token punctuation">;</span>  <span class="token comment"># 区域数据文件的默认存放位置。</span>  dump-file <span class="token string">"/var/named/data/cacke_dump.db"</span><span class="token punctuation">;</span>  <span class="token comment"># 设置域名缓存数 据库文件位置。</span>  memstatistics-file <span class="token string">"/var/named/data/named_mem_stats.txt"</span><span class="token punctuation">;</span>  <span class="token comment"># DNS 服务器输出的内存使用统计文件</span>  query-source port <span class="token number">53</span><span class="token punctuation">;</span>  <span class="token comment"># 指定客户端在提交DNS查询必须使用的 源端口</span>  allow-query <span class="token punctuation">&#123;</span> <span class="token number">192.168</span>.0.0/24<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment"># 为哪些客户端提供解析服务， 可指定一些，也可以写"any"表示所有的客户端。</span>  recursion <span class="token function">yes</span><span class="token punctuation">;</span>  <span class="token comment"># 定义递归式DNS，若不启用递归改为no</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>zone <span class="token string">"."</span> IN <span class="token punctuation">&#123;</span>   <span class="token comment"># 正向"."根区域</span>  <span class="token builtin class-name">type</span> hint<span class="token punctuation">;</span>   <span class="token comment"># 类型为根区域</span>  <span class="token function">file</span> <span class="token string">"named.ca"</span><span class="token punctuation">;</span>   <span class="token comment"># 区域数据文件命名为named.ca</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候为了提高解析效率，也可以不向根域查询，而是将来自客户端的查询请求转发给国内电信运营商的DNS服务器（如北京的<code>202.106.0.20/202.106.148.1</code>），缓存服务器收到返回的查询结果后再传递给客户端，只要去掉<code>zone &quot;.&quot; IN &#123;……&#125;; </code>的设置，并在全局配置中正确设置<code>forwarders</code>参数即可实现该功能  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">vim &#x2F;etc&#x2F;named.confoptions &#123;# …… 省略部分内容forwarders &#123; 202.106.0.20; 202.106.148.1; &#125;;&#125;;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>确认根域的区域数据文件<code>named.ca</code><br>&emsp;&emsp;根区域的区域数据文件默认位于文件<code>/var/named/named.ca</code>中，该文件记录了Internet中全球13台根域服务器的域名和ip地址等相关信息，要保证这个文件有读取的权限，如果没有此文件，可以从网上下载然后偶重命名成和配置文件中file后一样的名字即可。<br>&emsp;&emsp;用<code>named-checkzone</code>工具检查语法<br>&emsp;&emsp;格式：<code>named-checkzone . named-ca</code>  </p></li><li><p>启动named服务<br>&emsp;&emsp;<code>service named start</code> 启动named服务<br>&emsp;&emsp;<code>netstat -unpl</code> 通过netstat命令查看监听的UDP的53号端口是否开启  </p></li><li><p>验证缓存域名服务器<br>&emsp;&emsp;在局域网内的客户机中，将首选DNS服务器的地址设置为<code>192.168.0.5</code>，生效后，执行<code>nslookup www.baidu.com</code>命令对其进行解析，验证其是否能够获得该域名对应的ip地址信息。<br>一下操作在客户机中：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/resolv.conf  nameserver <span class="token number">192.168</span>.0.5  <span class="token comment"># 添加DNS服务器地址  </span><span class="token function">nslookup</span> www.baidu.com  <span class="token comment"># 验证  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>模拟排查错误<br>&emsp;&emsp;在<code>/etc/named.conf</code>文件中随便修改一处，制造错误，然后启动，报错后，去查看<code>/var/log/message</code>日志文件  </p></li></ol><p>练习：  </p><ol><li><p>编辑<code>named.conf</code><br><img src="/medias/drawing-bed/dns/0.png">  </p></li><li><p>编辑<code>resolv.conf</code><br><img src="/medias/drawing-bed/dns/1.png">  </p></li><li><p>使用<code>nslookup</code>验证<br><img src="/medias/drawing-bed/dns/2.png"><br><img src="/medias/drawing-bed/dns/3.png">  </p></li></ol><h2 id="主服务器的配置"><a href="#主服务器的配置" class="headerlink" title="主服务器的配置"></a>主服务器的配置</h2><h3 id="确认本机的网络地址、主机映射、默认DNS服务器地址"><a href="#确认本机的网络地址、主机映射、默认DNS服务器地址" class="headerlink" title="确认本机的网络地址、主机映射、默认DNS服务器地址"></a>确认本机的网络地址、主机映射、默认DNS服务器地址</h3><p>&emsp;&emsp;将主域名服务器的ip地址设为<code>192.168.0.123</code>，主机名设为<code>www.exp.com</code>，通过修改网络配置文件的方式进行，具体操作过程略。另外，为了提高域名解析效率，建议两台DNS服务器的地址映射直接写入到<code>/etc/hosts</code>文件中，并在<code>/etc/resolv.conf</code>文件中指定两个DNS服务器的地址。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hosts<span class="token number">192.168</span>.0.123 www.exp.com<span class="token number">192.168</span>.0.33 wap.exp.com<span class="token function">vim</span> /etc/resolv.confnameserver <span class="token number">192.168</span>.0.123nameserver <span class="token number">192.168</span>.0.33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立主配置文件named-conf"><a href="#建立主配置文件named-conf" class="headerlink" title="建立主配置文件named.conf"></a>建立主配置文件<code>named.conf</code></h3><p>&emsp;&emsp;新建的<code>named.conf</code>主配置文件，由于只需要提供<code>exp.com</code>域的正向解析和<code>192.168.0.0/24</code>网段的反向解析，因此相应地添加这两个区域即可，根区域，会环宇等其他配置内容可以省略。  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">vim &#x2F;etc&#x2F;named.confoptions &#123;  listen-on port 53 &#123; any ;&#125;;   # 也可写成192.168.0.123  directory &quot;&#x2F;var&#x2F;named&quot;;  allow-query &#123; 192.168.0.0&#x2F;24; &#125;; 也可以写&quot;any&quot; &#125;;zone &quot;exp.com&quot; IN &#123;  type master;   # 类型为主区域  file &quot;exp.com.zone&quot;;   # 区域数据文件为exp.com.zone  allow-transfer &#123; 192.168.0.33; &#125;;   # 允许从服务器下载正向区域数据 &#125;;zone &quot;0.168.192.in-addr.arpa&quot; IN &#123;  type master;  file &quot;192.168.0.arpa&quot;;   # 区域数据文件为192.168.0.arpa  allow-transfer &#123; 192.168.0.33; &#125;;   # 允许从服务器下载反向区域数据 &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;当不需要建立从域名服务器时，上述配置内容中的<code>allow-transfer……</code>部分可以不添加，当不需要提供反向解析时，<code>zone &quot;0.168.192.in-addr.arpa&quot;……</code>部分也可以去掉。<br>&emsp;&emsp;对配置文件进行语法检查用<code>named-checkconf</code>命令。  </p><h3 id="建立正、反向区域数据文件"><a href="#建立正、反向区域数据文件" class="headerlink" title="建立正、反向区域数据文件"></a>建立正、反向区域数据文件</h3><p>&emsp;&emsp;根据<code>named.conf</code>中的zone区域设置，分别建立正向区域数据文件<code>exp.com.zone</code>、反向区域数据文件<code>192.168.0.arpa</code>，并且修改两个文件的属组为<code>named</code>，配置内容可以参考区域数据文件<code>/var/named/named.localhost</code>。（建立完区域数据文件后要语法检查）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/named/<span class="token function">vim</span> exp.com.zone   <span class="token comment"># 打开文件进行修改（正向文件）</span><span class="token variable">$TTL</span> <span class="token number">86400</span>@ SOA exp.com. admin.exp.com. <span class="token punctuation">(</span>  <span class="token number">2017110822</span>  4H  30M  12H  1D <span class="token punctuation">)</span>@ IN NS www.exp.com.  IN NS wap.exp.com.  IN MX <span class="token number">10</span> mail.exp.com.www IN A <span class="token number">192.168</span>.0.123wap IN A <span class="token number">192.168</span>.0.33mail IN A <span class="token number">192.168</span>.0.35* IN A <span class="token number">192.168</span>.0.123<span class="token function">vim</span> <span class="token number">192.168</span>.0.arpa   <span class="token comment"># 打开文件进行修改</span><span class="token variable">$TTL</span> <span class="token number">86400</span>@ SOA exp.com. admin.exp.com. <span class="token punctuation">(</span>  <span class="token number">2017110823</span>  4H  30M  12H  1D <span class="token punctuation">)</span>  IN NS www.exp.com.  IN NS wap.exp.com.<span class="token number">123</span> IN PTR www.exp.com.<span class="token number">35</span> IN PTR mail.exp.com.<span class="token number">33</span> IN PTR wap.exp.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动named服务或重载配置"><a href="#启动named服务或重载配置" class="headerlink" title="启动named服务或重载配置"></a>启动named服务或重载配置</h3><p><code>service named reload/restart</code>  </p><h3 id="验证主域名服务器"><a href="#验证主域名服务器" class="headerlink" title="验证主域名服务器"></a>验证主域名服务器</h3><p>在客户端将DNS服务器指向<code>192.168.0.123</code>（主域名服务器的IP地址）<br>使用<code>nslookup</code>命令验证DNS查询结果<br>&emsp;&emsp;例如，在Linux客户机中验证，把<code>/etc/resolv.conf</code>文件中的首选DNS改为<code>192.168.0.123</code>就可以验证了  </p><p><code>nslookup wap.exp.com</code> 验证正向解析<br>&emsp;&emsp;server: 192.168.0.123<br>&emsp;&emsp;Address:  </p><p><code>nslookup x.exp.com</code> 验证泛域名解析<br>&emsp;&emsp;server: 192.168.0.123<br>&emsp;&emsp;Address:<br><code>nslookup 192.168.0.35</code> 验证反向解析  </p><p>练习：  </p><ol><li><p>编辑<code>named.conf</code>在缓存服务器的基础上添加：<br><img src="/medias/drawing-bed/dns/4.png">  </p></li><li><p><code>cd /var/named/</code>  </p></li></ol><ol><li>编辑<code>exp.com.zone</code>（正向解析文件）<br><img src="/medias/drawing-bed/dns/6.png">  </li><li>编辑<code>192.168.0.arpa</code>（反向解析文件）<br><img src="/medias/drawing-bed/dns/5.png">  </li></ol><ol start="3"><li>验证：<code>nslookup wap.exp.com</code><br><img src="/medias/drawing-bed/dns/7.png"><br><code>nslookup x.exp.com</code><br><img src="/medias/drawing-bed/dns/8.png"><br><code>nalookup 192.168.0.35</code><br><img src="/medias/drawing-bed/dns/9.png">  </li></ol><h2 id="从服务器配置"><a href="#从服务器配置" class="headerlink" title="从服务器配置"></a>从服务器配置</h2><h3 id="确认本机的网络地址、主机映射、默认DNS服务器地址-1"><a href="#确认本机的网络地址、主机映射、默认DNS服务器地址-1" class="headerlink" title="确认本机的网络地址、主机映射、默认DNS服务器地址"></a>确认本机的网络地址、主机映射、默认DNS服务器地址</h3><p>将从域名服务器的ip地址设为<code>192.168.0.10</code>，主机名设为<code>wap.exp.com</code>，通过修改网络配置文件的方式进行，具体操作过程略，另外主机映射文件<code>/etc/hosts</code>和<code>DNS</code>解析文件<code>/etc/resolv.conf</code>的内容与主服务器中的内容相同。  </p><h3 id="建立主配置文件named-conf-1"><a href="#建立主配置文件named-conf-1" class="headerlink" title="建立主配置文件named.conf"></a>建立主配置文件named.conf</h3><p>&emsp;&emsp;在从域名服务器中，<code>named.conf</code>文件的内容与主服务器的内容大部分相同，只是不需要再设置<code>allow-transfer……</code>;更关键的一点是，zone部分的区域类型应设置为<code>slave</code>，并添加<code>masters &#123;&#125;;</code>语句来指定主域名服务器的地址。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/named.confoptions <span class="token punctuation">&#123;</span>  listen-on port <span class="token number">53</span> <span class="token punctuation">&#123;</span> <span class="token number">192.168</span>.0.33<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  directory <span class="token string">"/var/named"</span><span class="token punctuation">;</span>  allow-query <span class="token punctuation">&#123;</span> <span class="token number">192.168</span>.0.0/24<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment"># 也可以写成"any"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>zone <span class="token string">"exp.com"</span> IN <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">type</span> slave<span class="token punctuation">;</span>   <span class="token comment"># 类型为从区域</span>  masters <span class="token punctuation">&#123;</span> <span class="token number">192.168</span>.0.123<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment"># 指定主服务器的IP地址</span>  <span class="token function">file</span> <span class="token string">"slaves/exp.com.zone"</span><span class="token punctuation">;</span>   <span class="token comment"># 下载的区域数据文件保存到slaves/ 目录中</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>zone <span class="token string">"0.168.192.in-addr.arpa"</span> IN <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">type</span> slave<span class="token punctuation">;</span>  masters <span class="token punctuation">&#123;</span> <span class="token number">192.168</span>.0.123<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">file</span> <span class="token string">"slaves/192.168.0.arpa"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;由于从服务器的区域数据文件是从主服务器中下载而来，因此，该文件保存的名称可以自行定义，不用非得与主域名服务器中的一致，但需要注意的是，named服务器默认以名为<code>named</code>的用户身份运行，因此要确认named用户对存放目录有写入权限。<br>&emsp;&emsp;建立完配置文件后用<code>named-checkconf</code>命令进行语法检查。  </p><h3 id="启动named服务，查看区域数据文件是否下载成功"><a href="#启动named服务，查看区域数据文件是否下载成功" class="headerlink" title="启动named服务，查看区域数据文件是否下载成功"></a>启动named服务，查看区域数据文件是否下载成功</h3><p>&emsp;&emsp;在从域名服务器中启动named服务，若配置无误，则named将会从主域名服务器中自行下载指定的区域数据文件，并保存到<code>slaves/</code>目录下，另外，通过系统日志文件<code>/var/log/messages</code>也可以观察到下载区域数据化文件的过程。<br>&emsp;&emsp;<code>service named start</code> 启动服务  </p><h3 id="验证从域名服务器"><a href="#验证从域名服务器" class="headerlink" title="验证从域名服务器"></a>验证从域名服务器</h3><p>&emsp;&emsp;对于客户机来说，从域名服务器与主域名服务器并没有什么区别，通过主服务器能够查询到的信息的，通过从服务器也同样能够查询到，验证从域名服务器时，只需要将客户端的首选DNS服务器地址设为<code>192.168.0.10</code>（从域名服务器的ip地址），使用<code>nslookup</code>命令进行正常测试即可。  </p><h3 id="测试主、从同步"><a href="#测试主、从同步" class="headerlink" title="测试主、从同步"></a>测试主、从同步</h3><p>&emsp;&emsp;在主服务器添加或删除主机名、ip对应条目，修改序列号（每次修改都要加1），从服务器等到更新的时间就会对比序列号，如果不同就会更新。<br>&emsp;&emsp;也可以在主服务器的配置文中添加全局配置项：<br>&emsp;&emsp;<code>also-notify &#123; 192.168.0.33; &#125;;</code> 主服务器更新完后通知<code>192.168.0.33</code>从服务器更新<br>&emsp;&emsp;添加完此项后，每当主服务器更新一次，就会通知从服务器更新。<br>&emsp;&emsp;在区域配置文件中（反向、正向都要加）加上一项主机与ip对应该关系（主域名服务器中添加）<br>&emsp;&emsp;正向解析：<code>ftp IN a 192.168.0.6</code><br>&emsp;&emsp;反向解析：<code>6 IN PRT ftp.exp.com.</code><br>&emsp;&emsp;添加完之后用客户机去测试从域名服务器。  </p><p>主服务器增加地址解析记录，修改序列号<br>&emsp;&emsp;配置<code>also-notify &#123; 192.168.0.33; &#125;;</code>此项的意思是主服务器每次更新完就会通知指定的从服务器。  </p><p>练习：  </p><ol><li><p>搭建从服务器，编辑配置文件（使用主机33）<br><img src="/medias/drawing-bed/dns/10.png"><br><img src="/medias/drawing-bed/dns/11.png">  </p></li><li><p>重启named服务，<code>cd /var/named/slaves/</code><br><img src="/medias/drawing-bed/dns/12.png"><br>从服务器生效会下载主服务器的配置文件！  </p></li><li><p>验证<br><img src="/medias/drawing-bed/dns/13.png"><br><img src="/medias/drawing-bed/dns/14.png"><br><img src="/medias/drawing-bed/dns/15.png">  </p></li></ol><h1 id="构建分离解析服务器"><a href="#构建分离解析服务器" class="headerlink" title="构建分离解析服务器"></a>构建分离解析服务器</h1><p>&emsp;&emsp;分离解析的域名服务器实际上还是主域名服务器，这里所说的分离解析主要是指根据不同的客户端提供不同的域名解析记录，来自不同地址的客户机请求解析同一域名时为其提供不同的解析结果。<br>&emsp;&emsp;例如，当DNS服务器面向Internet和企业内部局域网络提供服务时，可能需要将局域网用户访问公司域名的数据直接发往位于内网中的网站、邮件服务器，以减轻网关服务器的地址转换负担。<br>&emsp;&emsp;架设好分离解析域名服务器后，当公司内部的客户机访问公司的网站/邮件服务器时，直接访问就可以了，解析的结果是这两台服务器的IP地址。当外网的客户机访问公司的网站/域名服务器时，域名解析的结果是网关服务器外网的IP地址（这里会有地址解析技术，使得外网客户机也可能访问这两台服务器）<br>&emsp;&emsp;这就是分离解析服务器的作用，使得访问同一个用户得到不同的结果<br>基本配置步骤：  </p><ol><li>在named.conf主配置文件中为不同的客户机地址启用不同的zone区域设置，各自 使用独立的数据文件。  </li><li>分别建立不同的区域数据文件  </li><li>启动或重新加载named服务程序  </li><li>验证分离解析域名服务器  </li></ol><p>具体的操作步骤：  </p><ol><li><p>为不同的客户机分别设立<code>view</code>视图<br>在<code>named.conf</code>主配置文件中添加  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/named.conf……view <span class="token string">"LAN"</span> <span class="token punctuation">&#123;</span> 添加view视图，名称为<span class="token string">"LAN"</span>  match-clients <span class="token punctuation">&#123;</span> <span class="token number">192.168</span>.0.33<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment"># 这个视图对哪些客户端有效，可以写多个</span>  zone <span class="token string">"exp.com"</span> IN <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">type</span> master<span class="token punctuation">;</span>  <span class="token function">file</span> <span class="token string">"exp.com.zone.lan"</span><span class="token punctuation">;</span>   <span class="token comment"># 针对来自局域网客户机的区域 数据文件</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>view <span class="token string">"WAN"</span> <span class="token punctuation">&#123;</span>  match-clients <span class="token punctuation">&#123;</span> any<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token string">"any"</span>   <span class="token comment"># 表示任意，这里表示除了上面那个网 段以外的任意地址</span>  zone <span class="token string">"exp.com"</span> IN <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">type</span> master<span class="token punctuation">;</span>  <span class="token function">file</span> <span class="token string">"exp.com.zone.wan"</span><span class="token punctuation">;</span>   <span class="token comment"># 针对来自任意地址客户机的 区域数据文件</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>// include <span class="token string">"/etc/named.rfc1912.zones"</span><span class="token punctuation">;</span>   <span class="token comment"># 注释掉这行，不让其生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件修改完后使用<code>named-checkconf</code>命令检查语法<br>在配置文件中主要需要修改的地方是：<br>&emsp;&emsp;更改监听的端口<code>listen-on port 53 &#123; any; &#125;;</code>为<code>any</code><br>&emsp;&emsp;更改允许查询的<code>allow-query &#123; any; &#125;;</code>为<code>any</code><br>&emsp;&emsp;添加视图<code>view</code><br>&emsp;&emsp;注释掉<code>include &quot;/etc/named.rfc1912.zones&quot;;</code>这行  </p></li><li><p>分别建立不同的区域数据文件  </p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/named/exp.com.zone.lan<span class="token punctuation">..</span>.  NS www.exp.com.  MX <span class="token number">10</span> mail.exp.com.www A <span class="token number">192.168</span>.0.123wap A <span class="token number">192.168</span>.0.33mail A <span class="token number">192.168</span>.0.35<span class="token function">vim</span> /var/named/exp.com.zone.wan<span class="token punctuation">..</span>.  NS www.exp.com.  MX <span class="token number">10</span> mail.exp.com.www A <span class="token number">192.168</span>.0.124wap A <span class="token number">192.168</span>.0.34mail A <span class="token number">192.168</span>.0.36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立好两个文件后可使用<code>named-checkzone</code>命令进行语法检查  </p><ol><li><p>启动或重载named服务程序<br><code>service named reload</code>  </p></li><li><p>验证分离解析的域名服务器<br>使用<code>192.168.0.33</code>的客户机将默认DNS指向<code>192.168.0.123</code>解析<code>www.exp.com</code>，结果应该为<code>192.168.0.123</code><br>使用其他ip地址的客户机，将默认<code>DNS</code>指向<code>??</code>，解析<code>www.exp.com</code>，结果应该为<code>192.168.0.124</code><br><code>named</code>服务一般情况下都是用UDP的53端口，但是有时也会用tcp的53端口  </p></li></ol><p>&emsp;&emsp;注意：不管是主、从域名服务器还是分离解析域名服务器，架设时都要关闭<code>selinux</code>和<code>iptables</code>（等学习了iptables后就可以不用关闭了），还要把建立的区域数据文件的属组设为<code>named</code>（因为系统默认会以<code>named</code>用户读取文件内容）。  </p><p>&emsp;&emsp;可以为不同运营商的用户解析不同的ip地址，从而加快访问速度<br>例如：联通用户与其他用户（都是外网用户）都访问同一台分离解析服务器，返回的结果却不一样。  </p><p>练习：搭建分离解析服务器  </p><ol><li><p>分离解析服务器配置两块网卡（不同网段）<br><img src="/medias/drawing-bed/dns/16.png">  </p></li><li><p>编辑配置文件<code>named.conf</code><br><img src="/medias/drawing-bed/dns/17.png"><br><img src="/medias/drawing-bed/dns/18.png"><br><img src="/medias/drawing-bed/dns/19.png">  </p></li><li><p><code>cd /var/named</code>创建文件<code>exp.com.zone.lan &amp; exp.com.zone.wan</code>  </p></li></ol><p><img src="/medias/drawing-bed/dns/20.png"><br><img src="/medias/drawing-bed/dns/21.png"><br><img src="/medias/drawing-bed/dns/22.png">  </p><ol start="4"><li><p>重载named服务<code>service named restart</code>  </p></li><li><p>在客户机设置成网段为<code>192.168.1.</code><br><img src="/medias/drawing-bed/dns/23.png"><br>注：若<code>ping</code>不通分离解析服务器端的<code>1</code>网段<code>IP</code>  </p></li></ol><p>1)在网卡中添加<code>GETWAY</code>指向分离解析服务器同网段<code>IP</code><br>2)添加默认路由指向 分离解析服务器端的<code>1</code>网段<code>IP</code><br>3)将<code>客户机</code>和<code>服务端</code>的<code>wmnet</code>调成同一个<br><img src="/medias/drawing-bed/dns/24.png"><br>ping通 即可  </p><ol start="6"><li>验证  </li></ol><p>1)在客户机的<code>resolv.conf</code>配置文件中填入<code>192.168.0.39</code>DNS服务器IP<br><img src="/medias/drawing-bed/dns/25.png"><br><img src="/medias/drawing-bed/dns/26.png"><br>2)在客户机的<code>resolv.conf</code>配置文件中填入<code>192.168.1.123</code>NDS服务器IP<br><img src="/medias/drawing-bed/dns/27.png"><br><img src="/medias/drawing-bed/dns/28.png">  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync+inotify实时同步</title>
      <link href="/posts/7251.html"/>
      <url>/posts/7251.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="rsync-inotify实时同步"><a href="#rsync-inotify实时同步" class="headerlink" title="rsync+inotify实时同步"></a>rsync+inotify实时同步</h1><h1 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h1><p>&emsp;&emsp;rsync是Linux系统下的文件同步和数据传输工具，它采用”rsync算法”使客户机和服务器之间实现文件同步，可以执行完整备份或增量备份。  </p><h2 id="功能特性："><a href="#功能特性：" class="headerlink" title="功能特性："></a>功能特性：</h2><p>&emsp;&emsp;可以镜像保存整个目录树和文件系统<br>&emsp;&emsp;可以增量同步数据，文件传输效率高，因而同步时间短<br>&emsp;&emsp;可以保持原有文件的权限、时间等属性<br>&emsp;&emsp;加密传输数据，保证了数据的安全性<br>&emsp;&emsp;可以使用rcp、ssh等方式来传输文件，当然也可以直接通过socket连接传输文件<br>&emsp;&emsp;支持匿名传输  </p><h2 id="rsync的优点与不足"><a href="#rsync的优点与不足" class="headerlink" title="rsync的优点与不足"></a>rsync的优点与不足</h2><p>&emsp;&emsp;与传统的cp、tar备份方式相比，rsync具有安全性高、备份迅速、支持增量备份等优点，通过rsync可以解决对实时性要求不高的数据备份需求，例如，定期地备份文件服务器数据到远程服务器，对本地磁盘定期进行数据镜像等。<br>&emsp;&emsp;随着应用系统规模的不断扩大，对数据的安全性和可靠性提出了更高的要求，rsync在高端业务系统中暴露出很多不足，rsync同步数据时要扫描所有文件，然后再进行差量传输。如果文件数量达到百万或千万级，是非常耗时的，而且发生变化的往往是其中很少的一部分，因此rsync是非常低效的方式，其次rsync不能实时监测同步数据，虽然它可以通过Linux守护进程的方式触发同步，但两次触发动作一定会有时间差，可能导致服务器和客户端数据出现不一致，基于以上原因rsync+inotify组合就出现了  </p><h1 id="初识inotify"><a href="#初识inotify" class="headerlink" title="初识inotify"></a>初识inotify</h1><p>&emsp;&emsp;inotify是一种强大的、细粒度的、异步的文件系统时间监控机制，Linux内核从2.6.13版本起，加入了对inotify的支持。通过inotify可以监控文件系统中添加、删除、修改、移动等各种细微事件，利用这个内核接口，第三方软件可以监控文件系统下文件的各种变化情况，inotify-tools就是这样的一个第三方软件。<br>&emsp;&emsp;rsync可以实时触发式的文件同步，但是通过crontab守护进程进行触发，同步数据和实际数据会有差异，而inotify可以监控文件系统的各种变化，当文件有任何变动时，会触发rsync同步，这样刚好解决了同步数据的实时  </p><p>准备：<br>发布端：安装<code>inotify-tools</code>(epel)、<code>rsync</code>、<code>xinetd</code><br><code>ssh-keygen -t rsa -b 2048</code>(一路回车)<br><img src="/medias/drawing-bed/rsync/0.png">  </p><p><code>ssh-copy-id -i .ssh/id_rsa.pub 192.168.0.123</code>(发送给同步端)<br><img src="/medias/drawing-bed/rsync/1.png">  </p><p><code>ssh 192.168.0.123</code>(验证)<br><img src="/medias/drawing-bed/rsync/2.png">  </p><p><code>vim /etc/rsync.pass</code>(标记1、写入密码)(600)<br><img src="/medias/drawing-bed/rsync/3.png">  </p><p><code>mkdir -p /test/dir</code>(创建同步目录)<br><code>vim rsync.sh</code>(755)<br><img src="/medias/drawing-bed/rsync/4.png">  </p><p>（src指定发布出去的同步目录）<br><code>bash rsync.sh &amp;</code>(放入后台运行)<br><img src="/medias/drawing-bed/rsync/5.png">  </p><p>同步端：安装<code>rsync</code>、<code>xinetd</code>(启动服务)<br><code>vim /etc/xinetd.d/rsync</code>(no)<br><img src="/medias/drawing-bed/rsync/6.png">  </p><p><code>vim /etc/rsync.pass</code>(user:密码、同标记1对应)(600)<br><img src="/medias/drawing-bed/rsync/7.png">  </p><p><code>vim /etc/rsyncd.conf</code>（path指定从发布端目录 同步过来的内容 的存放目录）<br><img src="/medias/drawing-bed/rsync/8.png">  </p><p>验证：<br><img src="/medias/drawing-bed/rsync/9.png"><br><img src="/medias/drawing-bed/rsync/10.png">  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Git 减少存储库大小</title>
      <link href="/posts/7d7a.html"/>
      <url>/posts/7d7a.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="使用-BFG-存储库清洁剂"><a href="#使用-BFG-存储库清洁剂" class="headerlink" title="使用 BFG 存储库清洁剂"></a>使用 BFG 存储库清洁剂</h1><ol><li><p>从其开源社区存储库安装 BFG。</p></li><li><p>导航到存储库：<br><code>cd my_repository/</code></p></li><li><p>更改为要从中删除大文件的分支：<br><code>git checkout master</code></p></li><li><p>创建从分支中删除大文件的提交（如果该提交仍然存在）：<br><code>git rm path/to/big_file.mpg</code><br><code>git commit -m &#39;Remove unneeded large file&#39;</code></p></li><li><p>重写历史记录：<br><code>bfg --delete-files path/to/big_file.mpg</code><br>对象映射文件将写入。保持它周围你需要它的最后一步！<code>object-id-map.old-new.txt</code></p></li><li><p>强制将更改推送到 GitLab：<br><code>git push --force-with-lease origin master</code><br>如果此步骤失败，则有人在您重写历史记录时更改了分支。您可以还原分支并重新运行 BFG 以保留其更改，或使用来覆盖其更改。<code>mastergit push --force</code></p></li><li><p>导航到项目 &gt; 设置 &gt; 存储库 &gt; 存储库清理：<br><img src="/medias/drawing-bed/notes/0.png"><br>上传文件，然后按”开始清理”。这将删除对旧提交的任何内部 Git 引用，并针对存储库运行。完成后，您将收到一封电子邮件。<code>object-id-map.old-new.txtgit gc</code></p></li></ol><p>注意：此过程将从 GitLab 的缓存和数据库中删除一些重写的提交副本，但在覆盖范围上仍然存在许多差距目前，某些副本可能会无限期地保留。清除实例缓存可能有助于删除其中一些缓存，但出于安全考虑，不应依赖它！</p><h1 id="使用git-filter-branch"><a href="#使用git-filter-branch" class="headerlink" title="使用git filter-branch"></a>使用git filter-branch</h1><ol><li><p>导航到存储库：<br><code>cd my_repository/</code></p></li><li><p>更改为要从中删除大文件的分支：<br><code>git checkout master</code></p></li><li><p>用于删除大文件：filter-branch<br><code>git filter-branch --force --tree-filter &#39;rm -f path/to/big_file.mpg&#39; HEAD</code><br><code>git filter-branch --force --tree-filter &#39;rm -rf target/&#39; HEAD</code></p></li><li><p>指示 Git 清除不需要的数据：<br><code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code></p></li><li><p>最后，强制推送到存储库(去除保护分支再推送)：<br><code>git push --force origin master</code></p></li></ol><p>您的存储库现在应低于大小限制。</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ftp文件传输</title>
      <link href="/posts/ee41.html"/>
      <url>/posts/ee41.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="FTP文件传输服务"><a href="#FTP文件传输服务" class="headerlink" title="FTP文件传输服务"></a>FTP文件传输服务</h1><p>概述：FTP（文件传输协议）是典型的C/S架构的应用层协议，需要由服务端软件、客户端软件两部分共同实现文件传输功能<br>FTP连接及传输模式<br>&emsp;&emsp;FTP的两个端口：<br>&emsp;&emsp;控制连接：TCP的21号端口，用于控制连接，发送FTP命令信息。<br>&emsp;&emsp;数据连接：TCP的20号端口，用于上传、下载数据<br>一般观测FTP时，只观测21号端口即可，存在说明服务正在运行。<br>数据连接的建立类型：主动模式、被动模式（以服务器的角度）  </p><ol><li><p>主动模式：服务器主动发起数据连接<br>&emsp;&emsp;首先由客户机向服务端的21号端口建立FTP控制连接，当需要数据连接时，客户端以PORT命令告知服务器，”客户端打开了某个端口，请求服务端过来连接”，于是服务器从20号端口向客户端的该端口发送请求并建立数据连接。这其中的”某端口”是客户端任意挑选的一个未被使用的随机端口。  </p></li><li><p>被动模式：服务器被动等待数据连接<br>&emsp;&emsp;如果客户机所在网络的防火墙禁止主动模式连接，通常会使用被动模式，首先由客户端向服务端的21号端口建立FTP控制连接，当需要数据连接时，服务器以PASV命令告知客户端”服务端打开了某端口，请求客户端来连接”，于是客户端向服务器的该端口（非20号端口）发送请求并建立数据连接。<br>&emsp;&emsp;这其中的”某端口”是服务端任意的一个未被使用的随机端口<br>&emsp;&emsp;客户端与服务端建立好数据连接之后就可以根据控制连接中发送的FTP命令上传或下载文件了。<br>&emsp;&emsp;在传输文件时，根据是否进行字符转换，分为文本模式和二进制模式。使用二进制模式比文本模式更有效率，大多数FTP客户端工具可以根据文本类型自动选项文件传输模式，而无需用户手工指定  </p></li></ol><h2 id="FTP用户类型分三类："><a href="#FTP用户类型分三类：" class="headerlink" title="FTP用户类型分三类："></a>FTP用户类型分三类：</h2><ol><li><p>使用FTP客户端软件访问服务器时，通常要用到一类特殊的用户账号，其用户名为ftp或anonymous，提供任意密码（包括空密码）都可以通过FTP服务器的验证，这样的用户成为”匿名用户”<br>匿名用户一般用于提供公共文件的下载，如，提供一些免费软件、学习资料下载的站点。  </p></li><li><p>除了不需要密码验证的匿名用户以外，FTP服务器还可以直接使用本机的系统用户账号进行验证，这些用户通常被称为”本地用户”  </p></li><li><p>有些FTP服务器软件还可以维护一份独立的用户数据库文件，而不是直接使用系统用户账号，这些位于独立数据库文件中的FTP用户账号，通常被称为”虚拟用户”，通过使用虚拟用户将FTP账户与Linux系统账户的关联性将至最低，增加了系统的安全性。  </p></li></ol><h2 id="FTP服务器软件的种类"><a href="#FTP服务器软件的种类" class="headerlink" title="FTP服务器软件的种类"></a>FTP服务器软件的种类</h2><p>在windows系统中，常见的FTP服务器软件包括File zilla service、serv-U等<br>在Linux系统中，vsftpd是目前在Linux/Unix领域应用十分广泛的一款FTP服务软件。<br>vsftpd服务的全名来源于”Very Secure FTP Daemon”，该软件针对安全方面做了大量的设计，除了安全性外，vsftpd在速度和稳定性方面的表现也相当突出。  </p><h2 id="FTP客户端工具的种类"><a href="#FTP客户端工具的种类" class="headerlink" title="FTP客户端工具的种类"></a>FTP客户端工具的种类</h2><p>最简单的FTP客户端工具莫过于”ftp”命令程序了，除此之外还有大量的图形化FTP客户端工具，Windows中比较常用的包括”Cuter FTP”、”FlashFXP”、”LeapFTP”、”Filezilla”等等。<br>还有一些下载工具软件，如”Flash Get”、”wget”等，包括大多数网页浏览器程序，都支持通过FTP协议下载文件，但因不具备FTP上传等管理功能，通常不称为FTP客户端工具。  </p><h1 id="vsftpd服务基础"><a href="#vsftpd服务基础" class="headerlink" title="vsftpd服务基础"></a>vsftpd服务基础</h1><h2 id="vsftpd的配置文件"><a href="#vsftpd的配置文件" class="headerlink" title="vsftpd的配置文件"></a>vsftpd的配置文件</h2><ol><li>用户列表文件<code>ftpusers</code>和<code>user_list</code><br>在<code>ftpusers</code>、<code>user_list</code>文件中，各自记录了若干个FTP用户的账号名称，两个文件都用于<code>FTP</code>登录控制，但是控制方式存在一些差别。<br><code>ftpusers</code>文件：此文件中列出的用户将禁止登录<code>vsftpd</code>服务器，不管该用户是否在<code>user_list</code>文件中出现，默认已经包括<code>root</code>、<code>bin</code>、<code>daemon</code>等用于系统运行的特殊用户（就如同黑名单）。  </li></ol><p><code>user_list</code>文件：此文件中包含的用户可能被禁止登录，也可能被允许登录，具体取决去主配置文件<code>vsftpd.conf</code>中的设置，当存在<code>userlist_enable=YES</code>的配置项时，<code>user_list</code>列表文件方可生效；若指定<code>userlist_deny=YES</code>则仅禁止此文件列表中的用户等录；若指定<code>userlist_deny=NO</code>，则仅允许此文件列表中的用户等录。  </p><ol start="2"><li>主配置文件<code>vsftpd.conf</code><br>在vsftpd的主配置文件中，配置行采用”配置项=参数”的形式，例：  <pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 用于匿名用户配置项：anonymous_enable&#x3D;YES   # 设置是否允许匿名访问anon_umask&#x3D;022   # 设置匿名用户所上传文件的默认umask值anon_mkdir_write_enable&#x3D;YES   # 是否允许匿名用户有创建目录的写入权限。anon_other_write_enable&#x3D;YES   # 是否允许匿名用户对文件改名、覆盖及删除文件等操作。# 用于本地用户验证配置项：local_enable&#x3D;YES   # 是否允许本地系统用户访问local_umask&#x3D;022   # 设置本地用户所上传文件的默认umask值chroot_local_user&#x3D;YES   # 是否将FTP本地用户禁锢在家目录中# 全局配置项：listen&#x3D;YES   # 是否以独立运行的方式监听服务listen_sddress&#x3D;0.0.0.0   # 设置监听FTP服务的IP地址listen_port&#x3D;21   # 设置监听FTP服务的端口号write_enable&#x3D;YES   # 启用任何形式的写入权限，如上传、删除文件等download_enable&#x3D;YES   # 是否允许下载文件（建立仅限于浏览、上传的FTP服务器时可将其设置为&quot;NO&quot;）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>vsftpd服务可以使用Linux主机中的系统用户账号作为登录FTP的账号，包括匿名访问和用户验证两种形式。<br>匿名访问的FTP服务器时，不需要密码，任何人都可以使用，非常方便，当需要提供公开访问的文件下载资源或者让用户上传一些不需要保密的数据资料时，可以选择搭建匿名FTP服务器  </li></ol><h1 id="匿名访问的FTP服务"><a href="#匿名访问的FTP服务" class="headerlink" title="匿名访问的FTP服务"></a>匿名访问的FTP服务</h1><p>设置匿名访问的FTP服务器需要三步：  </p><ol><li>准备匿名FTP访问的目录  </li><li>开放匿名用户配置并启动vsftpd服务  </li><li>测试匿名FTP访问  </li></ol><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p>准备匿名访问的目录默认<code>/var/ftp</code><br><code>/var/ftp/</code>目录下默认设置了一个名为<code>pub</code>的子目录，可以给匿名访问FTP时提供上传文件使用。<br>将<code>/var/ftp/pub</code>目录赋予匿名用户<code>ftp</code>写入权限<br><code>chown ftp /var/ftp/pub</code>  </p><h2 id="开放匿名用户配置并启动vsftpd服务"><a href="#开放匿名用户配置并启动vsftpd服务" class="headerlink" title="开放匿名用户配置并启动vsftpd服务"></a>开放匿名用户配置并启动vsftpd服务</h2><p>配置vsftpd服务时，是否开放匿名FTP访问取决于配置项”anonymous_enable”，只要将其设置为”YES”即可<br>启用此项后默认只有读取权限，只能查看和下载文件，若要允许匿名用户有上传文件的权限，就需要开放更多的配置，主要有以下几项：  </p><blockquote><p>write_enable=YES<br>anon_upload_enable=YES<br>anon_mkdir_write_enable=YES<br>anon_other_write_enable=YES  </p></blockquote><p>这些配置项应根据实际需要选择设置<br>例如：若要设置vsftpd服务提供匿名访问、允许匿名用户上传、下载，但禁止删除操作，可以如下设置：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/vsftpd/vsftpd.conf  <span class="token assign-left variable">anonymous_enable</span><span class="token operator">=</span>YES  <span class="token assign-left variable">write_enable</span><span class="token operator">=</span>YES  <span class="token assign-left variable">anon_umask</span><span class="token operator">=</span>022  <span class="token assign-left variable">anon_upload_enable</span><span class="token operator">=</span>YES  <span class="token assign-left variable">anon_mkdir_write_enable</span><span class="token operator">=</span>YES  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/ftp/0.png"><br><img src="/medias/drawing-bed/ftp/1.png"><br>重启vsftpd服务<br><code>service vsftpd restart</code><br><img src="/medias/drawing-bed/ftp/2.png"></p><h2 id="测试匿名FTP访问"><a href="#测试匿名FTP访问" class="headerlink" title="测试匿名FTP访问"></a>测试匿名FTP访问</h2><p>在Windows主机中可以直接在”我的电脑”地址栏中输入URL地址访问，如<a href="ftp://192.168.0.123/">ftp://192.168.0.123</a><br><img src="/medias/drawing-bed/ftp/3.png"></p><p>在Linux的字符界面中，可以使用ftp命令进行测试<br>安装ftp命令：<code>yum -y install ftp</code><br>例如：执行以下操作可以匿名登录到FTP服务器192.168.0.123  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ftp</span> <span class="token number">192.168</span>.0.123……name<span class="token punctuation">(</span><span class="token number">192.168</span>.0.123:root<span class="token punctuation">)</span>:用户名passwd:密码……ftp<span class="token operator">></span>登录成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/ftp/4.png"><br><img src="/medias/drawing-bed/ftp/5.png"><br><img src="/medias/drawing-bed/ftp/6.png"><br>登录成功后执行”?”或者”help”会显示出很多类似于samba登录环境中的命令可用<br>常用的命令：ls、cd、<br>&emsp;&emsp;<code>cd</code>：切换本地目录<br>&emsp;&emsp;<code>get</code> <code>wget</code>：将文件下载到本地<br><img src="/medias/drawing-bed/ftp/7.png"><br>&emsp;&emsp;<code>put</code> <code>mput</code>：将本地文件上传到服务器<br><img src="/medias/drawing-bed/ftp/8.png"><br><img src="/medias/drawing-bed/ftp/9.png"><br>&emsp;&emsp;<code>quit</code> <code>exit</code>：断开ftp连续连接并退出  </p><p>在已经知道要下载文件的完整URL地址的情况下，用户也可以使用wget工具直接下载文件。<br>例如：要下载<code>/var/ftp/pub/testfile</code>文件<br>执行：<code>wget ftp://192.168.0.123/pub/testfile</code>  </p><p>lftp命令：lftp支持tab键补全，显示内容带有颜色<br>用法：<code>lftp 用户名：密码@ip：端口</code>（默认21）<br>例如：<code>lftp 192.168.0.123</code><br><img src="/medias/drawing-bed/ftp/10.png"></p><h1 id="用户验证的FTP服务"><a href="#用户验证的FTP服务" class="headerlink" title="用户验证的FTP服务"></a>用户验证的FTP服务</h1><p>vsftpd可以直接使用Linux主机的系统用户作为FTP账号，提供基于用户名，密码的登录验证。用户使用系统用户账号登录FTP服务器后将默认位于自己家的家目录中，且在家目录中拥有读写权限  </p><ol><li>基于本地用户验证（修改<code>anonymous_enable=NO</code>）  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/vsftpd/vsftpd.conf添加<span class="token assign-left variable">local_enable</span><span class="token operator">=</span>YES<span class="token assign-left variable">write_enable</span><span class="token operator">=</span>YES<span class="token assign-left variable">local_umask</span><span class="token operator">=</span>077<span class="token assign-left variable">chroot_local_user</span><span class="token operator">=</span>YESreload重载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>Windows访问 输入<code>ftp://用户:密码@192.168.0.123</code> 直接进入共享<br><img src="/medias/drawing-bed/ftp/11.png"></p><p>Linux系统访问共享 输入<code>ftp 192.168.0.123</code><br><img src="/medias/drawing-bed/ftp/12.png"><br><img src="/medias/drawing-bed/ftp/13.png"></p><h2 id="设置用户”白名单”"><a href="#设置用户”白名单”" class="headerlink" title="设置用户”白名单”"></a>设置用户”白名单”</h2><p>只要一些用户登录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/vsftpd/user_list 添加：queenkingwang<span class="token function">vim</span> /etc/vsftpd/vsftpd.conf 添加：<span class="token assign-left variable">userlist_enable</span><span class="token operator">=</span>YES<span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span>开启user_list用户列表<span class="token assign-left variable">userlist_deny</span><span class="token operator">=</span>NO<span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span>禁用user_list列表中的用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置”虚拟用户”"><a href="#设置”虚拟用户”" class="headerlink" title="设置”虚拟用户”"></a>设置”虚拟用户”</h2><p>vsftpd服务的其它常用配置  </p><ol><li><p>修改vsftpd服务的监听地址、端口  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">listen&#x3D;YES   # 允许独立监听服务，也可以使用xinetd服务进行管控vsftpd服务，若使用修改YES为NOlisten_address&#x3D;192.168.0.123listen_port&#x3D;2121# 重载生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>允许使用FTP服务的被动模式  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">pasv_enable&#x3D;YESpasv_min_port&#x3D;24500pasv_max_port&#x3D;24600   # 重启生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>限制FTP的并发连接数、传输速率  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.confmax_clients&#x3D;20   # 限制最多连接20个用户max_per_ip&#x3D;2   # 限制每个ip最多连接2个anon_max_rate&#x3D;50000   # 限制匿名用户传输速率为50KB&#x2F;slocal_max_rate&#x3D;200000   # 限制本地用户传输速率为200KB&#x2F;s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>建立虚拟用户步骤：  </p><ol><li><p>创建文本格式的用户名和密码表（格式：奇数行写假的用户名；偶数行写用户名对应的密码）<br>例如：<code>vim /etc/vsftpd/xnyh_list</code>(文件名随意)  </p><pre class="line-numbers language-none"><code class="language-none">abc  123  xyz  456  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立DB数据库，安装<code>db4-utils</code>包<br>执行：<code>db_load -T -t hash -f xnyh_list xnyh.db</code><br><code>db_load</code>命令选项意义：<br>&emsp;&emsp;<code>-T</code>：制作数据库（允许将文本文件转译载入数据库）<br>&emsp;&emsp;<code>-t</code>：指定转译载入的数据库类型，hash为使用hash码加密<br>&emsp;&emsp;<code>-f</code>：指定要转译的文件<br><code>file xnyh.db</code>查看文件的文件类型<br><img src="/medias/drawing-bed/ftp/14.png"></p></li><li><p>添加虚拟用户映射账号，创建<code>FTP</code>根目录<br><code>useradd -s /sbin/nologin xnyh</code><br><code>mkdir /etc/vsftpd/xnyh_dir</code>  </p></li><li><p>为虚拟用户建立<code>PAM</code>认证文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/pam.d/vsftpd_xnyh<span class="token comment">#%PAM-1.0</span>auth required pam_userdb.so <span class="token assign-left variable">db</span><span class="token operator">=</span>/etc/vsftpd/xnyh   <span class="token comment"># （指向为创建的虚拟用户数据库，省略.db）</span>account required pam_userdb.so <span class="token assign-left variable">db</span><span class="token operator">=</span>/etc/vsftpd/xnyh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改vsftpd配置、添加虚拟用户支持  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/vsftpd/vsftpd.conf<span class="token assign-left variable">local_enable</span><span class="token operator">=</span>YES   <span class="token comment"># 需要映射本地用户，所有启用此项</span><span class="token assign-left variable">write_enable</span><span class="token operator">=</span>YES<span class="token assign-left variable">anon_umask</span><span class="token operator">=</span>022<span class="token assign-left variable">guest_enable</span><span class="token operator">=</span>YES   <span class="token comment"># 启用用户映射功能</span><span class="token assign-left variable">guest_username</span><span class="token operator">=</span>xnyh   <span class="token comment"># 指定映射的系统用户</span><span class="token assign-left variable">pam_service_name</span><span class="token operator">=</span>vsftpd_xnyh   <span class="token comment"># 指定新的PAM认证文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为不同的虚拟用户建立独立的配置文件<br><code>vim /etc/vsftpd/vsftpd.conf</code><br>添加：<code>user_config_dir=/etc/vsftpd/xnyh_dir</code><br><code>cd /etc/vsftpd/xnyh_dir</code>  </p></li></ol><p><code>vim abc</code><br><code>anon_upload_enable=YES</code><br><code>anon_mkdir_write_enable=YES</code>  </p><p><code>touch xyz</code><br>(<code>abc</code>虚拟用户可以上传，读写；<code>xyz</code>虚拟用户只能读、下载)<br>重载<code>vsftpd</code>服务  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 文件上传/下载 </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba共享</title>
      <link href="/posts/647e.html"/>
      <url>/posts/647e.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h1><p>&emsp;&emsp;<code>samba</code>：指<code>Linux</code>系统中的一种文件共享程序<br>&emsp;&emsp;在window网络环境中，主机之间进行文件和打印机共享是通过微软公司自己的SMB/CIFS网络协议实现的，是微软的私有协议，在samba项目出现之前，并不能直接与Linux/Unix系统进行通信，samba在Linux/Unix系统中实现了微软的SMB/CIFS网络协议，从而使得跨平台的文件共享变的更加容易，在部署Windows，Linux/Unix混合平台的企业环境时，选用samba可以很好地解决不同系统之间的文件互访问题。  </p><h2 id="samba软件构成"><a href="#samba软件构成" class="headerlink" title="samba软件构成"></a>samba软件构成</h2><ol><li><p>samba软件包的构成<br>在光盘的安装包中，可以找到与samba相关的几个软件包，主要包括服务端软件<code>samba</code>，客户端软件<code>samba-client</code>，用于提供服务端和客户端程序的公共组件<code>samba-common</code><br><img src="/medias/drawing-bed/samba/0.png"></p></li><li><p>samba服务的程序组件<br><code>samba</code>服务器提供<code>smbd</code>、<code>nmbd</code>两个服务程序<br>smbd负责为客户机提供服务器中共享资源的访问（目录文件等）<br><code>nmbd</code>负责提供基于NetBIOS协议的名字解析、浏览服务<br>NetBIOS协议：由IBM公司开发，使用户软件能使用局域网的资源，自从诞生，NetBIOS成为许多其他网络应用程序的基础，严格意义上，NetBIOS是接入网络服务的接口标准  </p></li><li><p>使用<code>netstat</code>查看状态（<code>-atunp</code>）（-a可以查看所有连线中的socket）<br><code>smbd</code>：负责监听TCP协议的139（SMB协议）和445（CIFS协议）端口<br><code>nmbd</code>：负责监听UDP协议的137和138（NetBIOS协议）端口  </p></li></ol><h1 id="samba服务基础"><a href="#samba服务基础" class="headerlink" title="samba服务基础"></a>samba服务基础</h1><p>启动服务<br>&emsp;&emsp;<code>service smb restart</code><br>&emsp;&emsp;启动服务时，只要启动smbd程序就可以了，因为默认也会把nmbd程序启动起来，但是如果nmbd程序没有跟着启动起来，那就再启动一下nmbd<br>&emsp;&emsp;<code>service nmb restart</code>  </p><p>samba配置<br>日志文件<code>/var/log/samba/</code>目录中<br>主配置文件<code>/etc/samba/smb.conf</code><br>配置文件中<code>#</code>开头的表示注释信息，<code>;</code>开头的表示配置样例<br>&emsp;&emsp;samba的主配置文件分为三个部分：<br>&emsp;&emsp;<code>[global]</code>全局配置，对整个samba配置文件都生效<br>&emsp;&emsp;<code>[homes]</code>宿主目录共享设置，设置Linux用户的默认共享，对应用户的宿主目录，这部分很少设置、默认就可以<br>&emsp;&emsp;<code>[printers]</code>打印机共享设置  </p><p>若需要在<code>smb.conf</code>文件中设置新的共享文件夹，只需要增加一段：<br>&emsp;&emsp;<code>[samba]</code>自定义共享名，新的共享文件夹设置可以参考<code>[homes]</code>和<code>[printers]</code>部分的内容  </p><p>samba服务器的常见配置项及含义说明：<br>&emsp;&emsp;<code>workgroup</code>：设置服务器所在的工作组名称<br>&emsp;&emsp;<code>service string</code>：设置服务器的说明文字，用于描述samba服务器<br>&emsp;&emsp;<code>security</code>：设置服务器的安全级别，可设为：share（可匿名，任何人都可以访问）；user需要本服务器验证用户名及密码；server需要指定另一台服务器来验证用户名及密码；domain由windows域控制器验证用户名及密码<br>&emsp;&emsp;<code>log file</code>：设置samba服务器的日志文件，默认设置为/var/log/samba/log.%m表示将日志文件保存到/var/log/samba/目录中，按每个客户机建立一个目录文件，其中”%m”变量表示客户端主机名或ip地址<br>&emsp;&emsp;<code>max log size</code>：日志文件的最大容量，单位为KB（默认50KB，超过会产生一个新的文件），若网络内拥有LDAP目录认证，这里可以改用ldapsam数据库文件；另外，若要兼容旧版的samba密码文件也可以将类型设为smbpasswd  </p><p>对某个共享目录的配置项（对这些目录控制一些特性、属性）<br>&emsp;&emsp;<code>comment</code>：设置对应共享目录的注释、说明信息<br>&emsp;&emsp;<code>path</code>：设置对应共享目录在服务器中的文件夹路径（绝对路径）<br>&emsp;&emsp;<code>browseable</code>：设置该共享目录在”网上邻居”中是否看的到，设置为no时相当于隐藏共享目录<br>&emsp;&emsp;<code>guest ok</code>：设置是否所有人都可以访问共享目录，与”public”配置项作用相同<br>&emsp;&emsp;<code>writable</code>：设置该共享目录是否可写，samba服务设置的读取、写入权限，优先级要低于文件系统中设置的权限&emsp;&emsp;<br>&emsp;&emsp;<code>read only</code>：设置是否只读<br>&emsp;&emsp;<code>valid users</code>：指定有效用户<br>&emsp;&emsp;<code>write list</code>：指定用户可写  </p><p>语法检查：<code>samba</code>服务器提供了一个配置文件检查工具<br><code>testparm</code>程序，使用<code>testparm</code>工具可以对<code>smb.conf</code>配置文件的正确性进行检查，如果发现有错误将会进行提醒  </p><h1 id="设置可匿名访问共享"><a href="#设置可匿名访问共享" class="headerlink" title="设置可匿名访问共享"></a>设置可匿名访问共享</h1><p>可匿名访问的共享适用于公开的资源分享，一般只建议提供只读访问<br>设置可匿名共享文件夹时，在主配置文件<code>samba.conf</code>中主要调整两个地方即可<br>&emsp;&emsp;1.将默认安全级别修改为share<br>&emsp;&emsp;2.添加一段共享目录配置  </p><p>例如：将本地目录<code>/testdir/dir</code>发布为共享文件夹，共享名为<code>samba</code>  </p><ol><li>修改配置文件<code>/etc/samba/smb.conf</code>  </li></ol><p>把安全级别<code>security=user</code>改为<code>security=share</code><br><img src="/medias/drawing-bed/samba/1.png"><br>添加配置<br><img src="/medias/drawing-bed/samba/2.png"><br><code>comment</code>注释，<code>path</code>共享目录的绝对路径，<code>guest ok</code>允许所有人访问，<code>read only</code>只读，<code>writable</code>写入  </p><ol start="2"><li>开启samba共享服务  </li></ol><p>&emsp;&emsp;<code>service smb start</code><br><img src="/medias/drawing-bed/samba/3.png"></p><ol start="3"><li>用<code>testparm</code>工具检查一下语法  </li></ol><p>&emsp;&emsp;直接执行<code>testparm</code>即可，显示<code>ok</code>字样表示没有错误<br>&emsp;&emsp;也可以再回车一下查看刚添加的共享文件<br><img src="/medias/drawing-bed/samba/4.png"><br>&emsp;&emsp;用Windows访问共享文件<br><img src="/medias/drawing-bed/samba/5.png"><br>&emsp;&emsp;打开计算机，在输入框输入：<code>\\共享服务器ip地址</code>  </p><p>&emsp;&emsp;用Linux访问共享文件<br>&emsp;&emsp;安装<code>samba-client</code>工具<br>&emsp;&emsp;匿名访问 ：<code>smbclient //IP地址/共享名</code>（一路回车）<br><img src="/medias/drawing-bed/samba/6.png"></p><h1 id="设置需要用户验证的共享"><a href="#设置需要用户验证的共享" class="headerlink" title="设置需要用户验证的共享"></a>设置需要用户验证的共享</h1><p>&emsp;&emsp;匿名共享虽然用起来非常方便，但因为任何人都可以访问到共享的文件数据，在某些时候可能会导致信息的泄露  </p><p>用户验证的共享实现步骤  </p><ol><li>建立samba用户数据库<br>&emsp;&emsp;使用pdbedit工具可以对共享用户进行管理<br>&emsp;&emsp;执行<code>pdbedit -a -u 用户名</code><br>&emsp;&emsp;可以添加一个用户为<code>samba</code>共享用户  </li></ol><p>选项<br>&emsp;&emsp;<code>-a</code>：添加<br>&emsp;&emsp;<code>-u</code>：指定用户名<br>&emsp;&emsp;<code>-L</code>：列出所有samba共享用户<br>&emsp;&emsp;<code>-v</code>：输出详细信息<br>&emsp;&emsp;<code>-x</code>：删除samba用户，指定用户名即可<br>&emsp;&emsp;<code>-vL user</code>：只列出某个用户的详细信息<br>&emsp;&emsp;<code>-xu user</code>：删除指定samba用户  </p><p>&emsp;&emsp;为了区别于Linux主机中的系统用户，通常将用于访问samba共享资源的用户称为<code>共享用户</code>samba服务器使用独立的共享账号数据库文件，其中的账号名称必须有与它同名的系统用户相对应，以便主机对共享访问的读写权限进行控制，但共享用户的密码是额外设置的，可以与系统用户的密码不一样<br>&emsp;&emsp;samba共享用户的账号数据库文件默认位于<code>/var/lib/samba/private/passdb.tdb</code>是一个经过加密的文件，其中保存了samba用户的账号名称、登录密码、账号可用状态等信息。  </p><ol start="2"><li>设置用户访问授权<br>&emsp;&emsp;若使用用户验证的samba共享，应将security安全级别提升为<code>user</code>，共享用户授权主要由<code>valid users(指定有效用户)</code>，<code>write list(指定用户可写)</code><br>配置项指定，当需要授权多个共享用户时，以逗号或空格进行分割，如果需要授权一个用户组，可以使用<code>@组名</code>的形式，但需要为组内的每个系统用户都创建对应的samba共享用户  </li></ol><p>例如：<br>&emsp;&emsp;将本地目录<code>/testdir</code>发布为共享文件夹，共享名为<code>date</code>，要求只有共享用户<code>queen</code>和<code>king</code>能够访问，其中<code>queen</code>用户具有写入权限<br>1)创建共享用户<code>queen</code>和<code>king</code>  </p><p><code>pdbedit -a -u queen;pdbedit -a -u king</code><br><img src="/medias/drawing-bed/samba/7.png"><br><img src="/medias/drawing-bed/samba/8.png"></p><p>2)创建共享目录<br><code>mkdir /testdir;chmod 777 /testdir</code><br><img src="/medias/drawing-bed/samba/9.png"></p><ol start="3"><li><p>修改<code>/tec/samba/smb.conf</code>配置文件<br>其中<code>security=user</code><br><img src="/medias/drawing-bed/samba/10.png"><br>添加名为<code>samba</code>的共享目录配置段<br><img src="/medias/drawing-bed/samba/11.png"></p></li><li><p>重新加载<code>/etc/samba/smb.conf</code>配置文件，或重启smb服务<br><img src="/medias/drawing-bed/samba/12.png"><br>（可能需要重启nmb服务）  </p></li></ol><p>确定目录访问授权<br>&emsp;&emsp;通过samba服务器共享文件夹时，用户最终是否拥有读取、写入权限除了需要设置用户授权以外，还要满足一个前提条件那就是在服务器中与共享用户同名的系统用户对发布为共享本地文件夹必须有相应的读取、写入权限<br>&emsp;&emsp;另，当通过共享目录上传文档时，对于共享用户所上传的文件、创建的子目录的默认权限可以分别使用配置项<code>create mask</code> <code>directory mask</code>进行指定<br>编辑<code>/etc/samba/smb.conf</code><br><img src="/medias/drawing-bed/samba/13.png"><br>查看是否成功<br><img src="/medias/drawing-bed/samba/14.png"><br><img src="/medias/drawing-bed/samba/15.png"><br><img src="/medias/drawing-bed/samba/16.png"><br><img src="/medias/drawing-bed/samba/17.png"></p><h1 id="用户映射及访问地址限制"><a href="#用户映射及访问地址限制" class="headerlink" title="用户映射及访问地址限制"></a>用户映射及访问地址限制</h1><p>用户映射及访问地址限制<br>&emsp;&emsp;为了进一步提高samba共享服务的安全性，除了可以对指定的共享目录设置用户授权以外，可以采用用户映射、访问地址限制等措施<br>&emsp;&emsp;1.共享账号映射（别名）<br>&emsp;&emsp;在使用samba共享账号时，通常情况下，一个共享用户账号都有一个同名的系统用户账号，一些人可能会使用网络中泄露的共享用户账号作为samba服务的系统用户登录，对Linux主机带来了安全隐患<br>&emsp;&emsp;鉴于此，samba服务为我们提供了<code>用户名称映射</code>机制，可以将一个共享用户映射为多个不同的名称（别名），这样一来，只需要通过共享用户的别名和密码就可以访问授权的资源了，而不需要知道真实的共享用户（系统用户）名称<br>&emsp;&emsp;samba共享账号的映射文件默认为<code>/etc/samba/smbusers</code>，文件中的配置记录使用<code>共享用户名 = 别名1 别名2 ...</code>的格式，在该文件中默认已经添加了两条兼容Windows客户机的别名映射  </p><p>具体操作<br><code>vim /etc/samba/smbusers</code><br>添加 <code>queen = abc xyz</code> 保存退出即可<br><img src="/medias/drawing-bed/samba/18.png"><br>以后就可以使用abc或xyz用户来代替queen用户登录了，密码还是queen的密码配置文件<code>/etc/samba/smb.conf</code>添加全局配置项（global）<br>&emsp;&emsp;<code>username map = /etc/samba/smbusers</code>  </p><p>然后重新加载配置使其生效<br>&emsp;&emsp;2.访问地址限制<br>针对访问samba服务的客户机，可以通过（黑 白名单，二者选其一）<br><code>hosts allow</code>（白名单）允许访问共享客户机的ip地址<br><code>hosts deny</code>（黑名单）拒绝访问共享客户机的ip地址<br>访问地址限制一般用于<code>[global]</code>全局配置部分，也可以应用于某个具体的配置部分，限制的对象可以是主机名、ip地址或者网段地址（省去主机部分），多个地址之间以逗号或空格进行分割<br>例如：<code>vim /etc/samba/smb.conf</code><br>&emsp;&emsp;<code>[global]</code><br>&emsp;&emsp;增加<code>hosts allow = 192.168.0.  192.168.1.</code>（允须192.168的1网段和2网段访问）<br>保存退出，重载服务即可<br><img src="/medias/drawing-bed/samba/19.png"><br>注意：添加地址显示时的格式，如果是<code>192.168.1.0/24</code>网段，要写成<code>192.168.1.</code>这种格式，<code>172.16.0.0/24</code>网段，要写成<code>173.16.</code>这种格式  </p><h1 id="访问共享文件夹"><a href="#访问共享文件夹" class="headerlink" title="访问共享文件夹"></a>访问共享文件夹</h1><ol><li><p>使用<code>smbclient</code>访问共享文件夹<br>&emsp;&emsp;安装<code>samba-client</code>这个包<br>查询目标主机的共享资源列表<br>使用<code>smbclient</code>命令查询<br>选项：<br>&emsp;&emsp;<code>-U</code>：指定目标主机ip或主机名<br>&emsp;&emsp;<code>-L</code>：指定以某用户账号列表查看<br>格式：<code>smbclient -L ip/主机名 -U 用户名/别名</code><br>查询共享资源时，一般不需要用户验证，提示输入密码时直接回车即可。<br>例如：匿名查询samba服务器<code>192.168.0.123</code>中提供共享资源列表，使用queen用户<br>&emsp;&emsp;<code>smbclient -L 192.168.0.123 -U queen</code><br><img src="/medias/drawing-bed/samba/20.png"></p></li><li><p>登录并访问共享文件夹<br>匿名访问共享文件夹时提示输入密码时直接回车即可<br>匿名登录访问格式<br>&emsp;&emsp;<code>smbclient //主机地址/共享名</code><br>例如：以下操作可以连接到samba服务器192.168.0.123中名为test的匿名共享目录<br>&emsp;&emsp;<code>smbclient //192.168.0.123/test</code>  </p></li></ol><p>若访问需要用户验证的共享文件夹，则必须结合-U选项指定经过授权的共享用户名称（或映射的别名）并输入正确的密码进行验证<br>用户验证登录格式<br>&emsp;&emsp;<code>smbclient -U 用户名/别名 //主机地址/共享名 [-U 用户名/别名]</code>  </p><p>例如：对于上面讲到的date共享，使用queen或其别名都可以进行访问<br><code>smbclient -U queen //192.168.0.123/date</code><br>通过<code>smbclient</code>工具成功登录samba服务器以后，会出现<code>smb:\&gt;</code>提示符，提供了一个命令程序的环境，在<code>smb:\&gt;</code>环境中使用特定的命令可以对共享目录进行列表、上传、下载等操作  </p><p>例如：<code>ls</code>、<code>cd</code>、<code>pwd</code>、<br><code>get</code>、<code>wget</code>：下载文件<br><code>put</code>、<code>mput</code>：用于上传文件<br><code>？</code>、<code>help</code>：查看帮助信息<br><code>exit</code>、<code>quit</code>：退出共享目录  </p><ol start="3"><li>使用mount挂载共享文件夹<br>smbclient客户端工具可以非常方便地登录到samba服务器中，但只有将文件下载到本地以后才能查看文件内容，若使用mount命令将共享文件夹挂载到本地，则通过本地的挂载点目录即可直接使用共享文件夹的内容，使文件共享更加方便。<br>使用mount命令挂载共享资源时，只需要通过”//主机地址/共享名”的形式指定共享文件夹的位置（视为设备资源），并指定本地的挂载点即可，如果要以某个共享用户进行验证，就要用到-o选项指定”username=用户名”的形式指定  </li></ol><p>格式：<br>&emsp;&emsp;<code>mount -o username=共享用户名 //主机地址/共享名 /挂载点</code>  </p><p>如果不能挂载查看<code>cifs-utils</code>工具是否安装<br>例如：（对客户端来说）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /media/date<span class="token function">mount</span> -o <span class="token assign-left variable">username</span><span class="token operator">=</span>queen //192.168.0.123/test /media/date<span class="token function">mount</span>   <span class="token comment"># 查看结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>挂载成功后可以对samba服务器设置权限进行测试（mkdir;touch）<br><img src="/medias/drawing-bed/samba/21.png"></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nfs共享</title>
      <link href="/posts/98ae.html"/>
      <url>/posts/98ae.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="NFS共享服务"><a href="#NFS共享服务" class="headerlink" title="NFS共享服务"></a>NFS共享服务</h1><p>NFS简介：<br>&emsp;&emsp;NFS：Network FileSystem（网络文件系统）是一种基于TCP/IP传输的网络文件系统协议，最初由SUN公司开发<br>&emsp;&emsp;作用：通过使用NFS协议，客户机可以挂载NFS共享出来的目录，然后像访问本地目录一样访问远程服务器中的共享资源<br>&emsp;&emsp;特点及适用范围：NFS没有客户端认证机制，而且数据在网络上明文传输，所以安全性很差，一般只能在局域网中使用<br>NFS服务的实现依赖于RPC机制（远程过程调用），以完成远程到本地的映射过程<br>由于nfs各项功能都必须向RPC服务注册一个合法的端口用来给客户端提供服务，所以启动nfs服务时，要先保证RPC服务已经启动，否则nfs服务不能正常提供服务；</p><ol><li>客户端会向服务器端的RPC（port 111）发出NFS服务请求  </li><li>服务器端找到对应的已注册的NFS daemon端口后，会回报给客户端  </li><li>客户端知道正确的端口后，就可以直接与NFS daemon服务连线（daemon守护进程）  </li></ol><p>在CentOS6系统中，需要安装nfs-utils,rpcbind软件包来提供NFS共享服务，前者用于NFS共享发布和访问，后者用于RPC支持  </p><h2 id="使用NFS发布共享资源："><a href="#使用NFS发布共享资源：" class="headerlink" title="使用NFS发布共享资源："></a>使用NFS发布共享资源：</h2><h3 id="安装nfs-utils、rpcbind软件包"><a href="#安装nfs-utils、rpcbind软件包" class="headerlink" title="安装nfs-utils、rpcbind软件包"></a>安装nfs-utils、rpcbind软件包</h3><p><code>yum -y install nfs-utils rpcbind</code><br>手动加载NFS共享服务时，应该先启动rpcbind 再启动nfs  </p><h3 id="设置共享目录"><a href="#设置共享目录" class="headerlink" title="设置共享目录"></a>设置共享目录</h3><p>NFS的配置文件为<code>/etc/exports</code><br>在exports文件中设置共享资源时，记录格式为：<br><code>目录路径（绝对路径）  客户机地址（权限选项）</code><br>（客户机地址可以是主机名、IP地址、网段地址、可以使用”通配符”）<br>例如：<br><code>/testdir/dir   192.168.0.0/24(rw,sync,no_root_squash)</code> </p><p>权限选项的含义：<br>&emsp;&emsp;<code>rw</code>：读写<br>&emsp;&emsp;<code>ro</code>：只读<br>&emsp;&emsp;<code>sync</code>：同步写进内存和磁盘<br>&emsp;&emsp;<code>async</code>：先写进内存再写进磁盘<br>&emsp;&emsp;<code>no_root_squash</code>：表示当客户机以<code>root</code>身份访问时赋予本地<code>root</code>权限<br>（默认是<code>root_squash</code>，将作为<code>nfsnobody</code>用户降权对待）<br>&emsp;&emsp;当需要将同一个目录共享给不同的客户机，且分配不同的特权时，只要以空格分割指定多个”客户机（特权选项）”即可  </p><h3 id="启动NFS服务程序"><a href="#启动NFS服务程序" class="headerlink" title="启动NFS服务程序"></a>启动NFS服务程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start rpcbindsystemctl start nfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看NFS的启动状况"><a href="#查看NFS的启动状况" class="headerlink" title="查看NFS的启动状况"></a>查看NFS的启动状况</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpcinfo  -p  localhost <span class="token operator">|</span> <span class="token function">grep</span> nfsss -anptl<span class="token operator">|</span><span class="token function">grep</span> rpcind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/nfs/0.gif"><br>NFS服务使用的111和2049端口是固定的，mountd端口是动态的，需要固定，然后在防火墙放行。<br><em>防火墙关闭就不必执行了</em>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 固定端口</span><span class="token function">tee</span> <span class="token operator">>></span> /etc/sysconfig/nfs <span class="token operator">&lt;&lt;</span> <span class="token string">EOFRQUOTAD_PORT=30001LOCKD_TCPPORT=30002LOCKD_UDPPORT=30002MOUNTD_PORT=30003STATD_PORT=30004EOF</span><span class="token comment"># 重启nfs和rpcbind：</span>systemctl restart rpcbindsystemctl restart nfs<span class="token comment"># （端口并未修改，reboot系统后才修改）</span><span class="token comment"># 防火墙放行端口</span><span class="token comment"># 查看防火墙是否开启：</span>firewall-cmd --state<span class="token comment"># 设置防火墙</span>firewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token number">2049</span>/tcpfirewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token number">2049</span>/udpfirewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token number">111</span>/tcpfirewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token number">111</span>/udpfirewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token string">"30001-30004"</span>/udpfirewall-cmd --permanent --add-port<span class="token operator">=</span><span class="token string">"30001-30004"</span>/tcpfirewall-cmd --reload   <span class="token comment"># 加载规则生效</span>firewall-cmd --zone<span class="token operator">=</span>public --list-ports   <span class="token comment"># 列出所有规则</span><span class="token comment"># 2049/tcp 2049/udp 111/tcp 111/udp 30001-30004/udp 30001-30004/tcp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看本机发布的NFS共享目录"><a href="#查看本机发布的NFS共享目录" class="headerlink" title="查看本机发布的NFS共享目录"></a>查看本机发布的NFS共享目录</h3><p><code>showmount -e IP地址（localhost）</code></p><p>exportfs如果修改了<code>/etc/exports</code>文件后，不需要重新启动nfs服务，只需要重新扫描一次<code>/etc/exports</code>文件夹，并重新加载即可  </p><blockquote><p>exportfs命令  </p><blockquote><p>-a加载exportfs文件中的设置<br>-r重新挂载文件中的设置<br>-u卸载某一目录<br>-v详细信息  </p></blockquote></blockquote><h2 id="在客户机中访问NFS共享资源"><a href="#在客户机中访问NFS共享资源" class="headerlink" title="在客户机中访问NFS共享资源"></a>在客户机中访问NFS共享资源</h2><h3 id="安装rpcbind软件包，并启动rpcbind服务"><a href="#安装rpcbind软件包，并启动rpcbind服务" class="headerlink" title="安装rpcbind软件包，并启动rpcbind服务"></a>安装rpcbind软件包，并启动rpcbind服务</h3><p>如果已经安装了<code>nfs-utils</code>软件包，则客户机也可以使用<code>showmount</code>查看NFS服务器共享了哪些目录，查看格式为：<br><code>showmount -e 服务器ip地址</code> </p><h3 id="手动挂载NFS共享目录"><a href="#手动挂载NFS共享目录" class="headerlink" title="手动挂载NFS共享目录"></a>手动挂载NFS共享目录</h3><p>将NFS服务器共享的 目录 挂载到本地 目录<br>查看：<br><code>mount 或 tail -1 /etc/mtab</code><br><img src="/medias/drawing-bed/nfs/1.gif"></p><h3 id="fstab自动挂载设置"><a href="#fstab自动挂载设置" class="headerlink" title="fstab自动挂载设置"></a>fstab自动挂载设置</h3><p>注意将文件系统类型设置为nfs，挂载参数建议添加<code>_netdev</code>（设备需要网络）<br><code>vi /etc/fstab</code><br>添加：<br><code>192.168.0.123:/共享目录 /挂载点 nfs default,_netdev 0 0</code> </p><p>多台客户机都可以访问同一个挂载目录，但不允许修改同一文件  </p><h1 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h1><p><code>/etc/fstab</code>是用来存放文件系统的静态信息的文件。<code>less /etc/fstab</code>查看，<code>vi /etc/fstab</code>修改。<br>当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># &lt;file system>        &lt;dir>         &lt;type>    &lt;options>             &lt;dump> &lt;pass></span>tmpfs                  /tmp          tmpfs     nodev,nosuid          <span class="token number">0</span>      <span class="token number">0</span>/dev/sda1              /             ext4      defaults,noatime      <span class="token number">0</span>      <span class="token number">1</span>/dev/sda2              none          swap      defaults              <span class="token number">0</span>      <span class="token number">0</span>/dev/sda3              /home         ext4      defaults,noatime      <span class="token number">0</span>      <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段定义  </p><p><code>&lt;file system&gt;    &lt;dir&gt;    &lt;type&gt;    &lt;options&gt;    &lt;dump&gt;    &lt;pass&gt;</code><br><code>&lt;file systems&gt;</code>：要挂载的分区或存储设备.<br><code>&lt;dir&gt;</code>：<code>&lt;file systems&gt;</code>的挂载位置。<br><code>&lt;type&gt;</code>：要挂载设备或是分区的文件系统类型，支持许多种不同的文件系统：<code>ext2</code>,<code>ext3</code>,<code>ext4</code>,<code>reiserfs</code>,<code>xfs</code>,<code>jfs</code>,<code>smbfs</code>,<code>iso9660</code>,<code>vfat</code>,<code>ntfs</code>,<code>swap</code>及<code>auto</code>。 设置成<code>auto</code>类型，<code>mount</code>命令会猜测使用的文件系统类型，对<code>CDROM</code>和<code>DVD</code>等移动设备是非常有用的。<br><code>&lt;options&gt;</code>：挂载时使用的参数，注意有些<code>mount</code>参数是特定文件系统才有的。一些比较常用的参数有：<br>-<code>auto</code>：在启动时或键入了<code>mount -a</code>命令时自动挂载。<br>-<code>noauto</code>：只在你的命令下被挂载。<br>-<code>exec</code>：允许执行此分区的二进制文件。<br>-<code>noexec</code>：不允许执行此文件系统上的二进制文件。<br>-<code>ro</code>：以只读模式挂载文件系统。<br>-<code>rw</code>：以读写模式挂载文件系统。<br>-<code>user</code>：允许任意用户挂载此文件系统，若无显示定义，隐含启用<code>noexec</code>,<code>nosuid</code>,<code>nodev</code>参数。<br>-<code>users</code>：允许所有<code>users</code>组中的用户挂载文件系统.<br>-<code>nouser</code>：只能被<code>root</code>挂载。<br>-<code>owner</code>：允许设备所有者挂载.<br>-<code>sync</code>：I/O 同步进行。<br>-<code>async</code>：I/O 异步进行。<br>-<code>dev</code>：解析文件系统上的块特殊设备。<br>-<code>nodev</code>：不解析文件系统上的块特殊设备。<br>-<code>suid</code>：允许<code>suid</code>操作和设定<code>sgid</code>位。这一参数通常用于一些特殊任务，使一般用户运行程序时临时提升权限。<br>-<code>nosuid</code>：禁止<code>suid</code>操作和设定<code>sgid</code>位。<br>-<code>noatime</code>：不更新文件系统上<code>inode</code>访问记录，可以提升性能(参见<code>atime</code>参数)。<br>-<code>nodiratime</code>：不更新文件系统上的目录<code>inode</code>访问记录，可以提升性能(参见<code>atime</code>参数)。<br>-<code>relatime</code>：实时更新<code>inode</code> <code>access</code>记录。只有在记录中的访问时间早于当前访问才会被更新。（与<code>noatime</code>相似，但不会打断如<code>mutt</code>或其它程序探测文件在上次访问后是否被修改的进程。），可以提升性能(参见<code>atime</code>参数)。<br>-<code>flush</code>：<code>vfat</code>的选项，更频繁的刷新数据，复制对话框或进度条在全部数据都写入后才消失。<br>-<code>defaults</code>：使用文件系统的默认挂载参数，例如<code>ext4</code>的默认参数为:<code>rw</code>,<code>suid</code>,<code>dev</code>,<code>exec</code>,<code>auto</code>,<code>nouser</code>,<code>async</code>.  </p><p><code>&lt;dump&gt;</code>：<code>dump</code>工具通过它决定何时作备份.<code>dump</code>会检查其内容，并用数字来决定是否对这个文件系统进行备份。 允许的数字是<code>0</code>和<code>1</code>。<code>0</code>表示忽略，<code>1</code>则进行备份。大部分的用户是没有安装<code>dump</code>的，对他们而言<code>&lt;dump&gt;</code>应设为<code>0</code>。<br><code>&lt;pass&gt;</code>：<code>fsck</code>读取<code>&lt;pass&gt;</code>的数值来决定需要检查的文件系统的检查顺序。允许的数字是<code>0</code>,<code>1</code>,和<code>2</code>。根目录应当获得最高的优先权<code>1</code>,其它所有需要被检查的设备设置为<code>2</code>.<code>0</code>表示设备不会被<code>fsck</code>所检查。  </p><p>文件系统标识<br>在<code>/etc/fstab</code>配置文件中你可以以三种不同的方法表示文件系统：内核名称、<code>UUID</code>或者<code>label</code>。使用<code>UUID</code>或是<code>label</code>的好处在于它们与磁盘顺序无关。如果你在<code>BIOS</code>中改变了你的存储设备顺序，或是重新拔插了存储设备，或是因为一些<code>BIOS</code>可能会随机地改变存储设备的顺序，那么用<code>UUID</code>或是<code>label</code>来表示将更有效。参见 持久化块设备名称 。  </p><p>要显示分区的基本信息请运行：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ lsblk -fNAME   FSTYPE LABEL      UUID                                 MOUNTPOINTsda                                                         ├─sda1 ext4   Arch_Linux 978e3e81-8048-4ae1-8a06-aa727458e8ff /├─sda2 ntfs   Windows    6C1093E61093B594                     └─sda3 ext4   Storage    f838b24e-3a66-4d02-86f4-a2e73e454336 /media/Storagesdb                                                           ├─sdb1 ntfs   Games      9E68F00568EFD9D3                     └─sdb2 ext4   Backup     14d50a6c-e083-42f2-b9c4-bc8bae38d274 /media/Backupsdc                                                           └─sdc1 vfat   Camera     47FA-4071                            /media/Camera<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内核名称<br>你可以使用<code>fdisk -l</code>来获得内核名称，前缀是<code>dev</code>.  </p><p>标签<br>注意: 使用这一方法，每一个标签必须是唯一的.<br>要显示所有设备的标签，可以使用<code>lsblk -f</code>命令。在<code>/etc/fstab</code>中使用<code>LABEL=</code>作为设备名的开头:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># &lt;file system>        &lt;dir>         &lt;type>    &lt;options>             &lt;dump> &lt;pass></span>tmpfs                  /tmp          tmpfs     nodev,nosuid   <span class="token number">0</span>      <span class="token number">0</span><span class="token assign-left variable">LABEL</span><span class="token operator">=</span>Arch_Linux       /             ext4      defaults,noatime      <span class="token number">0</span>      <span class="token number">1</span><span class="token assign-left variable">LABEL</span><span class="token operator">=</span>Arch_Swap        none          swap      defaults              <span class="token number">0</span>      <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>UUID<br>所有分区和设备都有唯一的 UUID。它们由文件系统生成工具<code>(mkfs.*)</code>在创建文件系统时生成。  </p><p><code>lsblk -f</code>命令将显示所有设备的 UUID 值。<code>/etc/fstab</code>中使用<code>UUID=</code>前缀:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># &lt;file system>                           &lt;dir>         &lt;type>    &lt;options>             &lt;dump> &lt;pass></span>tmpfs                                     /tmp          tmpfs     nodev,nosuid          <span class="token number">0</span>      <span class="token number">0</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>24f28fc6-717e-4bcd-a5f7-32b959024e26 /     ext4              defaults,noatime      <span class="token number">0</span>      <span class="token number">1</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>03ec5dd3-45c0-4f95-a363-61ff321a09ff /home ext4              defaults,noatime      <span class="token number">0</span>      <span class="token number">2</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>4209c845-f495-4c43-8a03-5363dd433153 none  swap              defaults              <span class="token number">0</span>      <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动挂载<br>如果<code>/home</code>分区较大，可以让不依赖<code>/home</code>分区的服务先启动。把下面的参数添加到<code>/etc/fstab</code>文件中<code>/home</code>项目的参数部分即可：<br><code>noauto,x-systemd.automount</code><br>这样<code>/home</code>分区只有需要访问时才会被挂载。内核会缓存所有的文件操作，直到<code>/home</code>分区准备完成。  </p><p>注意: 这样做会使<code>/home</code>的文件系统类型被识别为<code>autofs</code>，造成<code>mlocate</code>查询时忽略该目录。实际加速效果因配置而异，所以请自己权衡是否需要。<br>挂载远程文件系统也是同理。如果你仅想在需要的时候才挂载，也可以添加<code>noauto,x-systemd.automount</code>参数。另外，可以设置<code>x-systemd.device-timeout=#</code>参数，设置超时时间，以防止网络资源不能访问的时候浪费时间。<br>如果你的加密文件系统需要密钥，则需要添加<code>noauto</code>参数到<code>/etc/crypttab</code>文件中的对应位置。systemd 开机的时候就不会打开这个加密设备，会一直等待到设备被访问时再使用密钥文件挂载。比如在使用加密RAID设备的时候可以节省一定的时间，因为 systemd 不必等到设备可用后才能访问。例如：<code>/etc/crypttab</code><br><code>data /dev/md0 /root/key noauto</code> </p><p>交换分区 UUID<br>如果交换分区没有 UUID，可以手动加入。如果使用<code>lsblk -f</code>命令没有列出交换分区的 UUID 就说明发生了这种情况。下面是为交换分区指定 UUID 的步骤：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 确定交换分区：  </span><span class="token function">swapon</span> -s<span class="token comment"># 禁用交换分区：</span>swapoff /dev/sda7<span class="token comment"># 用新 UUID 重新创建交换分区：</span><span class="token function">mkswap</span> -U random /dev/sda7<span class="token comment"># 激活交换分区:</span><span class="token function">swapon</span> /dev/sda7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路径名有空格<br>如果挂载的路径中有空格，可以使用<code>\040</code>转义字符来表示空格（以三位八进制数来进行表示）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/fstab<span class="token assign-left variable">UUID</span><span class="token operator">=</span>47FA-4071     /home/username/Camera<span class="token punctuation">\</span>040Pictures   vfat  defaults,noatime      <span class="token number">0</span>  <span class="token number">2</span>/dev/sda7          /media/100<span class="token punctuation">\</span>040GB<span class="token punctuation">\</span>040<span class="token punctuation">(</span>Storage<span class="token punctuation">)</span>       ext4  defaults,noatime,user  <span class="token number">0</span>  <span class="token number">0</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/nowiki<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>外部设备<br>外部设备在插入时挂载，在未插入时忽略。这需要 nofail 选项，可以在启动时若设备不存在直接忽略它而不报错.  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/fstab /dev/sdg1    /media/backup    jfs    defaults,nofail    <span class="token number">0</span>  <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>atime</code>参数<br>使用<code>noatime</code>,<code>nodiratime</code>或<code>relatime</code>可以提升<code>ext2</code>，<code>ext3</code>及<code>ext4</code>格式磁盘的性能。<code>Linux</code>在默认情况下使用<code>atime</code>选项，每次在磁盘上读取（或写入）数据时都会产生一个记录。这是为服务器设计的，在桌面使用中意义不大。默认的<code>atime</code>选项最大的问题在于即使从页面缓存读取文件(从内存而不是磁盘读取)，也会产生磁盘写操作！<br>使用<code>noatime</code>选项阻止了读文件时的写操作。大部分应用程序都能很好工作。只有少数程序如<code>Mutt</code>需要这些信息。<code>Mutt</code>的用户应该使用<code>relatime</code>选项。使用<code>relatime</code>选项后，只有文件被修改时才会产生文件访问时间写操作。<code>nodiratime</code>选项仅对目录禁用了文件访问时间。<code>relatime</code>是比较好的折衷，<code>Mutt</code>等程序还能工作，但是仍然能够通过减少访问时间更新提升系统性能。<br>注意:<code>noatime</code>已经包含了<code>nodiratime</code>。不需要同时指定。  </p><p><code>tmpfs</code><br><code>tmpfs</code>是一个临时文件系统，驻留于你的交换分区或是内存中（取决于你的使用情况）。使用它可以提高文件访问速度，并能保证重启时会自动清除这些文件。<br>经常使用<code>tmpfs</code>的目录有<code>/tmp</code>,<code>/var/lock</code>and<code>/var/run</code>. 不要将之使用于<code>/var/tmp</code>, 因为这一目录中的临时文件在重启过程中需要被保留。使用<code>tmpfs</code> <code>/run</code>目录，<code>/var/run</code>和<code>/var/lock</code>是为了兼容老版本建立的链接。默认<code>/etc/fstab</code>中的的<code>/tmp</code>也是<code>tmpfs</code>.<br>默认情况下，<code>tmpfs</code>分区被设置为你总的内存的一半，当然你可以自由设定这一值。注意实际中内存和交换分区的使用情况取决于你的使用情况，而<code>tmpfs</code>分区在其真正使用前是不会占用存储空间的。<br>要将<code>/tmp</code>放到<code>tmpfs</code>，将下行加入<code>/etc/fstab</code>：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/fstab<span class="token punctuation">..</span><span class="token punctuation">..</span>.tmpfs /tmp      tmpfs nodev,nosuid                 <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以指定大小，但不要修改<code>mode</code>选项，以保证文件具有正确的访问权限<code>1777</code>。在上例中<code>/tmp</code>将最多使用一半内存，要指定最大空间，使用<code>size</code>挂载选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/fstab<span class="token punctuation">..</span><span class="token punctuation">..</span>.tmpfs /tmp      tmpfs nodev,nosuid,size<span class="token operator">=</span>2G          <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个更高级的例子，展示如何为用户添加<code>tmpfs</code>挂载。这对于网站、<code>mysql</code>临时文件,<code>~/.vim/</code>, 和其他情况很有用。尝试并获得理想的挂载选项来完成目标是很重要的。目标是尽量采用安全的策略来防止滥用。限制大小，同时指定<code>uid</code>和<code>gid</code>加上<code>mode</code>是非常安全的。更多信息.  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/fstab</span>tmpfs /www/cache tmpfs rw,size<span class="token operator">=</span>1G,nr_inodes<span class="token operator">=</span>5k,noexec,nodev,nosuid,uid<span class="token operator">=</span><span class="token number">648</span>,gid<span class="token operator">=</span><span class="token number">648</span>,mode<span class="token operator">=</span><span class="token number">1700</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启后方能生效。注意不要直接执行<code>mount -a</code>命令，因为可能造成无法访问当前目录中的文件（比如你应该保证<code>lockfiles</code>的正常存在）。然而，如果它们都是空的，那么就可以直接执行<code>mount -a</code>而不必重启电脑。  </p><p>应用更改后，可以通过<code>findmnt</code>检查是否生效：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ findmnt --target /tmpTARGET SOURCE FSTYPE OPTIONS/tmp   tmpfs  tmpfs  rw,nosuid,nodev,relatime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<br>一般需要大量读写操作的程序在使用<code>tmpfs</code>时都会提升性能。有些程序把共享内存放到<code>tmpfs</code>上时性能会大幅提升，例如将 Firefox Profile 文件夹放到内存后，Firefox 性能大幅提升。  </p><p><code>Note</code>:<code>tmpfs</code>目录<code>/tmp</code>挂载时需要去掉<code>noexec</code>参数，否则有些编译程序无法执行，此外，<code>tmpfs</code>的默认大小是内存的一般，可能会产生空间不够的问题。  </p><p>下面命令可以让<code>makepkg</code>在<code>tmpfs</code>目录进行编辑，也可以在在<code>/etc/makepkg.conf</code>中进行设置:<code>BUILDDIR=/tmp/makepkg makepkg</code> </p><p>普通用户读写<code>FAT32</code><br>为了取得对<code>FAT32</code>分区的写权限，你必须修改<code>/etc/fstab</code>文件。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/fstab/dev/sdxY    /mnt/some_folder  vfat   user,rw,umask<span class="token operator">=</span>000              <span class="token number">0</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>users</code>标签的意思是任何用户（甚至非 root 用户）都可以挂载或卸载分区<code>/dev/sdX</code>。”rw”标签则分配读写的使用权。<code>umask</code>是权限掩码命令<code>umask=000</code>指任何人没有特权，且权限为<code>777</code>，即所有人都可以读、写、执行。  </p><p>比如你的<code>FAT32</code>分区在<code>/dev/sda9</code>，你想将其挂载到<code>/mnt/fat32</code>，那么你需要输入并运行  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/fstab/dev/sda9    /mnt/fat32        vfat   user,rw,umask<span class="token operator">=</span><span class="token number">111</span>,dmask<span class="token operator">=</span>000    <span class="token number">0</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elk</title>
      <link href="/posts/f07c.html"/>
      <url>/posts/f07c.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是一篇理想文档，包含了作者所有心思<br>几乎是完美的，但是此风格类型的文档并不适用于拿来主义者<br>你可以通过文档来学习elk，从初学乍练到渐入佳境<br>你也想不到，此篇未经过实践检验，处于理论和测试环境  </p><h1 id="还是简介"><a href="#还是简介" class="headerlink" title="还是简介"></a>还是简介</h1><p>这里比较几个东西：</p><ol><li><code>kafka</code>，应用在消息、行为跟踪、日志收集方面（吞吐量巨大，内置分区，冗余和容错性）  </li><li><code>mqtt</code>，在物联网系统应用广泛（工作在低宽带，不可靠的网络远程通讯系统中）  </li><li><code>redis</code>，key-value的nosql数据库，可作为队列使用（小数据入队性能要优于rabbitmq，rabbitmq的出队性能则远低于redis）  </li><li><code>rabbitmq</code>，吞吐量不如kafka，可用性优于kafka（rabbitmq支持miror的queue，主queue失效，miror queue接管）</li></ol><p>这里总结一下：<br><code>kafka</code>：可用于峰值数亿级的日志收集，常用于分布式架构，对性能要求高的可以考虑kafka<br><code>RocketMQ</code>：思路来源于KAFKA，改成了主从结构，在事务性可靠性方面做了优化，广泛来说，电商、金融等对事务性要求很高，可以考虑RabbitMQ和RocketMQ；<br><code>mqtt</code>：在物联网中任然是不可取代的存在。遥感数据，汽车，智能家居，智慧城市，医疗医护等；<br><code>redis</code>：key-value的nosql数据库，还是做数据库、缓存使用吧；<br><code>rabbitmq</code>：消息队列，在对数据完整性要求高的场景使用吧，增加集群装机量来弥补吞吐量的不足。  </p><h1 id="一些ELK的架构图"><a href="#一些ELK的架构图" class="headerlink" title="一些ELK的架构图"></a>一些ELK的架构图</h1><p><img src="/medias/drawing-bed/elk/0.jpg"><br><img src="/medias/drawing-bed/elk/0.png"><br><img src="/medias/drawing-bed/elk/1.jpg"><br><img src="/medias/drawing-bed/elk/1.png"></p><p>这里展示了4张包含kafka日志收集的ELK架构，我的理解是：<br><code>filebeat(web logs)</code> –&gt; <code>[+logstash]kafka</code> –&gt; <code>logstash</code> –&gt; <code>elasticsearch</code> –&gt; <code>kibana</code> –&gt; <code>nginx</code><br>解释：<br>Q1：filebeat和logstash为什么分离？<br>Q2：为什么两层logstash？<br>Q3：kafka有什么用？why kafka？  </p><p>A1：原因很简单，资源消耗比较大。<br>由于 Logstash 是跑在 JVM 上面，资源消耗比较大，后来作者用 GO 写了一个功能较少但是资源消耗也小的轻量级的 Agent 叫 Logstash-forwarder。<br>后来作者加入 elastic.co 公司， Logstash-forwarder 的开发工作给公司内部 GO 团队来搞，最后命名为 Filebeat。<br>Filebeat 需要部署在每台应用服务器上，可以通过 Salt 来推送并安装配置。  </p><p>A2：你可以在kafka前面增加0-多台logstash，因为在大量的日志数据写入时，容易导致数据的丢失和混乱，为了解决这一问题，增加logstash通过类型进行汇总分类，降低数据传输的臃肿。在elasticsearch前增加一层logstash仅作转发处理，既可以通过kibana监控实时数据流，又能将kafka数据源源不断的存储到elasticsearch磁盘中。<br>当然你可以配置将filebeat收集到的日志直接导入到kafka集群中。  </p><p>A3：Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。<br>你也可以使用别的日志收集工具，甚至是只用ELK。<br>你必须要知道这是根据你的业务场景来决定的，如果你在金融部门，Kafka并不是你的第一选择。  </p><p>补充：<br>整个架构加入Kafka，是为了让整个系统更好的分层，Kafka作为一个消息流处理与持久化存储软件，能够帮助我们在主节点上屏蔽掉多个从节点之间不同日志文件的差异，负责管理日志端（从节点）的人可以专注于向 Kafka里生产数据，而负责数据分析聚合端的人则可以专注于从 Kafka内消费数据。所以部署时要把Kafka加进去。<br>而且使用Kafka进行日志传输的原因还在于其有数据缓存的能力，并且它的数据可重复消费，Kafka本身具有高可用性，能够很好的防止数据丢失，它的吞吐量相对来说比较好并且使用广泛。可以有效防止日志丢失和防止logsthash挂掉。综合来说：它均衡了网络传输，从而降低了网络闭塞，尤其是丢失数据的可能性。  </p><p>这里为什么要在Kafka前面增加二台logstash呢？<br>如果只有一层的Logstash，它将处理来自不同客户端Filebeat收集的日志信息汇总，并且进行处理分析，在一定程度上会造成在大规模日志数据下信息的处理混乱，并严重加深负载，所以有二层的结构进行负载均衡处理，并且职责分工，一层汇聚简单分流，一层分析过滤处理信息，并且内层都有二台Logstash来保障服务的高可用性，以此提升整个架构的稳定性。  </p><h1 id="安装ELK"><a href="#安装ELK" class="headerlink" title="安装ELK"></a>安装ELK</h1><p>采用kafka+ELK采集log。</p><h2 id="服务器和角色"><a href="#服务器和角色" class="headerlink" title="服务器和角色"></a>服务器和角色</h2><table><thead><tr><th align="left">IP</th><th align="left">主机名</th><th align="left">角色</th></tr></thead><tbody><tr><td align="left">192.168.1.90</td><td align="left">node0</td><td align="left">web log+filebeat</td></tr><tr><td align="left">192.168.1.91</td><td align="left">node1</td><td align="left">kafka+zookeeper</td></tr><tr><td align="left">192.168.1.92</td><td align="left">node2</td><td align="left">kafka+zookeeper</td></tr><tr><td align="left">192.168.1.93</td><td align="left">node3</td><td align="left">kafka+zookeeper</td></tr><tr><td align="left">192.168.1.94</td><td align="left">node4</td><td align="left">logstash</td></tr><tr><td align="left">192.168.1.95</td><td align="left">node5</td><td align="left">elasticsearch kibana nginx</td></tr></tbody></table><h2 id="导入密钥"><a href="#导入密钥" class="headerlink" title="导入密钥"></a>导入密钥</h2><p><code>rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</code></p><h2 id="配置yum仓库安装"><a href="#配置yum仓库安装" class="headerlink" title="配置yum仓库安装"></a>配置yum仓库安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>elasticsearch<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Elasticsearch repository <span class="token keyword">for</span> <span class="token number">7</span>.x packages<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://artifacts.elastic.co/packages/7.x/yum<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://artifacts.elastic.co/GPG-KEY-elasticsearch<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">autorefresh</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">type</span><span class="token operator">=</span>rpm-md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="直接下载rpm包安装"><a href="#直接下载rpm包安装" class="headerlink" title="直接下载rpm包安装"></a>直接下载rpm包安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># https://elasticsearch.cn/download/   # 中文社区下载地址，建议使用迅雷等工具下载。</span><span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.0-x86_64.rpm<span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.0-x86_64.rpm.sha512shasum -a <span class="token number">512</span> -c elasticsearch-7.8.0-x86_64.rpm.sha512 <span class="token function">rpm</span> --install elasticsearch-7.8.0-x86_64.rpm<span class="token function">wget</span> https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-x86_64.rpm<span class="token function">wget</span> https://artifacts.elastic.co/downloads/logstash/logstash-7.8.0.rpm<span class="token function">wget</span> https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.8.0-x86_64.rpm<span class="token function">wget</span> https://mirrors.aliyun.com/apache/kafka/2.5.0/kafka_2.13-2.5.0.tgz<span class="token function">wget</span> https://mirrors.aliyun.com/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装步骤略-想不到吧🥴🧐"><a href="#安装步骤略-想不到吧🥴🧐" class="headerlink" title="安装步骤略(想不到吧🥴🧐)"></a>安装步骤略(想不到吧🥴🧐)</h2><p>你可以参考服务器和角色安装配置  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># node0节点</span>hostnamectl set-hostname node0   <span class="token comment"># 设置主机名</span>systemctl stop firewalld   <span class="token comment"># 关闭防火墙</span>setenforce <span class="token number">0</span>   <span class="token comment"># 关闭selinux</span><span class="token function">tee</span> <span class="token operator">>></span> /etc/hosts <span class="token operator">&lt;&lt;</span> <span class="token string">EOF192.168.1.90 node0192.168.1.91 node1192.168.1.92 node2192.168.1.93 node3192.168.1.94 node4192.168.1.95 node5EOF</span>   <span class="token comment"># 设置主机名</span>yum -y <span class="token function">install</span> nginx filebeat <span class="token comment"># node123安装zookeeper+kafka</span><span class="token builtin class-name">cd</span> /home<span class="token function">tar</span> xf apache-zookeeper-3.6.1-bin.tar.gz<span class="token function">mv</span> apache-zookeeper-3.6.1-bin/ zookeeper<span class="token builtin class-name">cd</span> zookeeper/<span class="token function">mkdir</span> -p tmp/zookeeper<span class="token builtin class-name">echo</span> <span class="token string">"1"</span> <span class="token operator">></span> tmp/zookeeper/myid<span class="token comment"># node上安装配置kafka</span><span class="token function">tar</span> xf kafka_2.13-2.5.0.tgz<span class="token function">mv</span> kafka_2.13-2.5.0/ kafka<span class="token function">mkdir</span> -p /tmp/kafka-logs<span class="token comment"># 生成zookeeper配置文件</span><span class="token builtin class-name">cd</span> conf<span class="token function">cp</span> zoo_sample.cfg zoo.cfg<span class="token comment"># node4</span>yum -y <span class="token function">install</span> java java-devel logstash<span class="token comment"># node5</span>yum -y <span class="token function">install</span> elasticsearch kibana nginx httpd-tools   <span class="token comment"># epel-release</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p><code>/etc/nginx/nginx.conf</code><br>修改Nginx配置文件添加以下内容  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">log_format json &#39;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&quot;@version&quot;:&quot;1&quot;,&quot;client_ip&quot;:&quot;$remote_addr&quot;,&quot;status&quot;:&quot;$status&quot;,&quot;host&quot;:&quot;$server_addr&quot;,&quot;url&quot;:&quot;$request_uri&quot;,&quot;domain&quot;:&quot;$host&quot;,&quot;size&quot;:&quot;$body_bytes_sent&quot;,&quot;responsetime&quot;:&quot;$request_time&quot;,&quot;referer&quot;:&quot;$scheme:&#x2F;&#x2F;$server_addr$request_uri&quot;,&quot;user_agent&quot;:&quot;$http_user_agent&quot;&#125;&#39;;access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log json;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h3><p><code>/etc/filebeat/filebeat.yml</code>详细配置在解释末<br>filebeat支持很多种输入和输出.具体可看input,output.<br>项目中用到的输入是log,输出的kafka.在这只讲这两种配置.<br>输入配置log<br>log输入是从文件中按行读取.在paths指定需要监视的文件.<br>例子:  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">filebeat.inputs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /var/log/nginx    <span class="token punctuation">-</span> /var/log/<span class="token important">*.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要有以下几个配置项.<br><code>paths</code>：需要监视的文件路径.支持Go Glab的所有模式.例如: /var/log/<em>.log.这个配置将监视/var/log文件夹下所有以.log结尾的文件.可以用recursive_glob来递归子文件夹.<br><code>recursive_glob.enabled</code>：允许扩展 * * 为递归的glob模式.启用此功能后. /foo/</em> * 扩展到/foo, /foo/* ,/foo/* /* ,等等,它会将单个扩展 * * 为8级深度*模式.<br>默认情况下启用此功能.设置false禁用.<br><code>exclude_lines</code>：正则表达式列表,用于匹配您希望Filebeat排除的行.Filebeat会删除与列表中的正则表达式匹配的所有行.默认情况下,不会删除任何行.空行被忽略.<br>以下示例将Filebeat配置为删除任何以DBG开头的行:  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">filebeat.inputs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token punctuation">...</span>  <span class="token key atrule">exclude_lines</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'^DBG'</span><span class="token punctuation">]</span>include_lines<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正则表达式列表,用于匹配您希望Filebeat包含的行.Filebeat仅导出与列表中的正则表达式匹配的行.默认情况下,将导出所有行.空行被忽略.<br>以下示例将Filebeat配置为导出以ERR或WARN开头的所有行:  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">filebeat.inputs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token punctuation">...</span>  <span class="token key atrule">include_lines</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'^ERR'</span><span class="token punctuation">,</span> <span class="token string">'^WARN'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PS: 如果include_lines和exclude_lines两个配置同时出现,优先执行inlcude_lines再执行exclude_lines.和配置项放的位置没有关系.<br><code>json</code>：filebeat支持json格式的消息日志.它将逐行处理日志,因此只有每行有一个json对象时,json解码才有效.<br>配置示例:  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">json.keys_under_root</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">json.add_error_key</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">json.message_key</span><span class="token punctuation">:</span> logenabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入开关.默认true打开.<br>输出配置kafka<br>kafka将输出流发送到Apache Kafka.<br>配置示例:  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">output.kafka</span><span class="token punctuation">:</span>  <span class="token comment"># initial brokers for reading cluster metadata</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"kafka1:9092"</span><span class="token punctuation">,</span> <span class="token string">"kafka2:9092"</span><span class="token punctuation">,</span> <span class="token string">"kafka3:9092"</span><span class="token punctuation">]</span>  <span class="token comment"># message topic selection + partitioning</span>  <span class="token key atrule">topic</span><span class="token punctuation">:</span> <span class="token string">'%&#123;[fields.log_topic]&#125;'</span>  <span class="token key atrule">partition.round_robin</span><span class="token punctuation">:</span>    <span class="token key atrule">reachable_only</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">required_acks</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">compression</span><span class="token punctuation">:</span> gzip  <span class="token key atrule">max_message_bytes</span><span class="token punctuation">:</span> <span class="token number">1000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要以下几个配置项<br><code>enabled</code>：是否打开输出配置项.true打开,false关闭.默认是true.<br><code>hosts</code>：kafka的broker地址.<br><code>topic</code>：kafka的topic.<br><code>worker</code>：并发负载均衡Kafka输出工作线程的数量.<br><code>timeout</code>：kafka返回应答的等待时间.默认30(秒).<br><code>keep_alive</code>：连接的存活时间.如果为0,表示短连,发送完就关闭.默认为0秒.<br><code>required_acks</code>：ACK的可靠等级.0=无响应,1=等待本地消息,-1=等待所有副本提交.默认1.<br>PS：如果设为0,kafka无应答返回时,消息将丢失.<br>配置例子  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">filebeat.inputs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log   <span class="token comment"># 日志类型</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">json.keys_under_root</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 可以让字段位于根节点</span>  <span class="token key atrule">json.overwrite_keys</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 对于同名的key，覆盖原有key值</span>  <span class="token key atrule">fields_under_root</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 可以让字段位于根节点</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /var/log/nginx/access.log   <span class="token comment"># 日志文件路径</span>  <span class="token key atrule">fields</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> log    <span class="token key atrule">log_topic</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>nginx<span class="token punctuation">-</span>access   <span class="token comment"># 指定日志topic名称</span><span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>nginx<span class="token key atrule">output.kafka</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"192.168.1.91:9092"</span><span class="token punctuation">,</span><span class="token string">"192.168.1.92:9092"</span><span class="token punctuation">,</span><span class="token string">"192.168.1.93:9092"</span><span class="token punctuation">]</span>   <span class="token comment"># kafka集群地址</span>  <span class="token key atrule">topic</span><span class="token punctuation">:</span> <span class="token string">'%&#123;[log_topic]&#125;'</span>   <span class="token comment"># fileds.log_topic 定义的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="zookeeper-kafka"><a href="#zookeeper-kafka" class="headerlink" title="zookeeper+kafka"></a>zookeeper+kafka</h3><p>node1编辑zookeeper配置文件zoo.cfg  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">dataDir&#x3D;&#x2F;home&#x2F;zookeeper&#x2F;tmp&#x2F;zookeeperserver.1&#x3D;192.168.1.91:2888:3888server.2&#x3D;192.168.1.92:2888:3888server.3&#x3D;192.168.1.93:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置node2和node3的zookeeper<br>依照node1的配置配置node2和node3，注意下面的参数三个节点各有差异<br>Node2：<code>echo &quot;2&quot; &gt; tmp/zookeeper/myid</code><br>Node3：<code>echo &quot;3&quot; &gt; tmp/zookeeper/myid</code><br>依次启动三个节点的服务<code>./bin/zkServer.sh start conf/zoo.cfg</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Using config:/usr/local/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfg  Starting zookeeper <span class="token punctuation">..</span>. STARTED  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>错误: 找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain<br>解决：下载apache-zookeeper-3.6.1-bin.tar.gz包运行</p><p>2020-07-05 19:43:54,474 [myid:] - ERROR [main:QuorumPeerMain@98] - Invalid config, exiting abnormally<br>org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException: Address unresolved: 192.168.1.91:3888<br>解决：myid文件的路径不对，我的后面有两个空格删掉就好了</p><hr><p>查看三个节点的状态  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Node1：  <span class="token comment"># ./bin/zkServer.sh status  </span><span class="token punctuation">[</span>root@localhost zookeeper<span class="token punctuation">]</span><span class="token comment"># ./bin/zkServer.sh status</span>/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /home/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgClient port found: <span class="token number">2181</span>. Client address: localhost.Mode: follower   Node2：  <span class="token punctuation">[</span>root@localhost zookeeper<span class="token punctuation">]</span><span class="token comment"># ./bin/zkServer.sh status</span>/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /home/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgClient port found: <span class="token number">2181</span>. Client address: localhost.Mode: leader   Node3：  <span class="token punctuation">[</span>root@localhost zookeeper<span class="token punctuation">]</span><span class="token comment"># ./bin/zkServer.sh status</span>/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /home/zookeeper/bin/<span class="token punctuation">..</span>/conf/zoo.cfgClient port found: <span class="token number">2181</span>. Client address: localhost.Mode: follower<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>node1配置kafka<br>/kafkaconfig/server.properties  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">broker.id<span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">9092</span>host.name<span class="token operator">=</span>node1log.dirs<span class="token operator">=</span>/home/kafka/tmp/kafka-logsnum.partitions<span class="token operator">=</span><span class="token number">2</span>zookeeper.connect<span class="token operator">=</span><span class="token number">192.168</span>.1.91:2181,192.168.1.92:2181,192.168.1.93:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Node2和node3的kafka<br>依照node1的配置配置node2和node3，注意下面的参数三个节点各有差异  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Node2：  broker.id<span class="token operator">=</span><span class="token number">1</span>  host.name<span class="token operator">=</span>node2     node3：  broker.id<span class="token operator">=</span><span class="token number">2</span>  host.name<span class="token operator">=</span>node3     说明：  host.name是节点的主机名  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依次启动三个节点的kafka<code>./bin/kafka-server-start.sh config/server.properties</code><br>创建topic验证集群是否正常  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Node1上创建topic</span>./bin/kafka-topics.sh --create --zookeeper <span class="token number">192.168</span>.1.91:2181 --replication-factor <span class="token number">3</span> --partitions <span class="token number">2</span> --topic test1Created topic <span class="token string">"test1"</span><span class="token builtin class-name">.</span><span class="token comment"># Node2上发送消息至kafka（2节点模拟producer）</span>./bin/kafka-console-producer.sh --broker-list <span class="token number">192.168</span>.1.91:9092 --topic test1hello world<span class="token comment"># Node3显示消息的消费（3节点模拟consumer）</span>./bin/kafka-console-consumer.sh --zookeeper  <span class="token number">192.168</span>.1.91:2181 --topic test1 --from-beginninghello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在node2节点的输入的信息可以在nide3节点显示，说明集群正常使用。  </p><hr><p>./bin/kafka-console-consumer.sh –zookeeper  192.168.1.91:2181 –topic test1 –from-beginning<br>报错：zookeeper is not a recognized option<br>这个是0.9之后的打开方式<br>/usr/java/kafka_2.12-2.2.0/bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic test –from-beginning<br>这个是0.9之前的打开方式<br>/usr/java/kafka_2.12-2.2.0/bin/kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning<br>解决：./bin/kafka-console-consumer.sh –bootstrap-server 192.168.1.91:9092 –topic test1 –from-beginning</p><hr><h3 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h3><p>/etc/logstash/conf.d/kafka.conf</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">input <span class="token punctuation">&#123;</span>    kafka <span class="token punctuation">&#123;</span>        bootstrap_servers =<span class="token punctuation">></span> "192.168.1.91<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.1.92<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.1.93<span class="token punctuation">:</span>9092"   <span class="token comment"># kafka集群地址</span>        topics =<span class="token punctuation">></span> "dev<span class="token punctuation">-</span>nginx<span class="token punctuation">-</span>access"   <span class="token comment"># 接受topic的名称</span>        codec =<span class="token punctuation">></span> "json"   <span class="token comment"># 解析格式</span>        consumer_threads =<span class="token punctuation">></span> 5   <span class="token comment"># 最大线程</span>        decorate_events =<span class="token punctuation">></span> true   <span class="token comment"># 将当前topic、offset、group、partition等信息也带到message中</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output <span class="token punctuation">&#123;</span>    elasticsearch <span class="token punctuation">&#123;</span>        hosts =<span class="token punctuation">></span> <span class="token punctuation">[</span><span class="token string">"192.168.1.95:9200"</span><span class="token punctuation">]</span>   <span class="token comment"># ES集群信息</span>        index =<span class="token punctuation">></span> "dev<span class="token punctuation">-</span>nginx<span class="token punctuation">-</span>access<span class="token punctuation">-</span>%<span class="token punctuation">&#123;</span>+YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd<span class="token punctuation">&#125;</span>"   <span class="token comment"># 索引格式建议按天切割</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/etc/logstash/logstash.yml</code>  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /var/lib/logstash<span class="token key atrule">pipeline.ordered</span><span class="token punctuation">:</span> auto<span class="token key atrule">path.config</span><span class="token punctuation">:</span> /etc/logstash/conf.d/<span class="token important">*.conf</span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /var/log/logstash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>/usr/share/logstash/bin/logstash -t -f /etc/logstash/conf.d/logstash-nginx.conf</code>测试是否OK<br>提示：Configuration OK  </p><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p><code>/etc/elasticsearch/elasticsearch.yml</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 允许商业功能创建索引</span><span class="token key atrule">action.auto_create_index</span><span class="token punctuation">:</span> .monitoring*<span class="token punctuation">,</span>.watches<span class="token punctuation">,</span>.triggered_watches<span class="token punctuation">,</span>.watcher<span class="token punctuation">-</span>history*<span class="token punctuation">,</span>.ml*<span class="token comment"># 如果不确定本地的Logstash或Beats配置，可以考虑将该值设置为*，允许自动创建所有索引</span><span class="token key atrule">action.auto_create_index</span><span class="token punctuation">:</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置样例：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 更改数据和日志文件的路径实例</span><span class="token key atrule">path</span><span class="token punctuation">:</span>    <span class="token key atrule">data</span><span class="token punctuation">:</span> /var/lib/elasticsearch    <span class="token key atrule">logs</span><span class="token punctuation">:</span> /var/log/elasticsearch<span class="token comment"># 也可以这样并行写</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /var/lib/elasticsearch<span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /var/log/elasticsearch<span class="token comment"># 以变量方式配置yml文件</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span>    $<span class="token punctuation">&#123;</span>HOSTNAME<span class="token punctuation">&#125;</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>ES_NETWORK_HOST<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境变量的值必须是简单的字符串。使用逗号分隔的字符串提供Elasticsearch将解析为列表的值。例如，Elasticsearch将以下字符串拆分为<code>$&#123;HOSTNAME&#125;</code>环境变量的值列表：<br><code>export HOSTNAME=&quot;host1,host2&quot;</code><br>一些配置文件<br><code>/etc/elasticsearch</code>  </p><ol><li><code>elasticsearch.yml</code> 用于配置Elasticsearch  </li><li><code>jvm.options</code> 用于配置Elasticsearch JVM设置  </li><li><code>log4j2.properties</code> 用于配置Elasticsearch日志记录  </li></ol><h4 id="详细项"><a href="#详细项" class="headerlink" title="详细项"></a>详细项</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 自定义路径存储数据和日志。</span><span class="token key atrule">path</span><span class="token punctuation">:</span>  <span class="token key atrule">logs</span><span class="token punctuation">:</span> /var/log/elasticsearch  <span class="token key atrule">data</span><span class="token punctuation">:</span> /var/data/elasticsearch<span class="token comment"># 甚至你可以这样，将数据存到多个目录</span><span class="token comment"># path:</span><span class="token comment">#   data:</span><span class="token comment">#     - /mnt/elasticsearch_1</span><span class="token comment">#     - /mnt/elasticsearch_2</span><span class="token comment">#     - /mnt/elasticsearch_3</span><span class="token comment"># 设置集群名，node加入集群的名，多个集群名字要设置不同的，否则node可能加入错误的集群</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> logging<span class="token punctuation">-</span>prod<span class="token comment"># 当前节点的主机名</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> prod<span class="token punctuation">-</span>data<span class="token punctuation">-</span><span class="token number">2</span><span class="token comment"># 与其它节点形成集群，默认是回环地址，单机</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 192.168.1.95<span class="token comment"># 默认绑定到回环地址，默认端口为9300</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"192.168.1.95"</span><span class="token punctuation">]</span><span class="token comment"># 你也可以这样使用</span><span class="token comment"># discovery.seed_hosts:</span><span class="token comment">#    - 192.168.1.10:9300</span><span class="token comment">#    - 192.168.1.11 </span><span class="token comment">#    - seeds.mydomain.com   # 绑定DNS解析的域名</span><span class="token comment">#    - [0:0:0:0:0:ffff:c0a8:10c]:9301   # IPv6</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span>   <span class="token comment"># 显式列出有master资格的主机节点，并在第一次选举中对其投票进行计数，生产环境建议使用此配置</span>  <span class="token punctuation">-</span> node5<span class="token comment">#    - master-node-b</span><span class="token comment">#    - master-node-c</span><span class="token comment"># 最少有两个节点存活才可以选举master</span><span class="token comment"># discovery.zen.minimum_master_nodes: 2</span><span class="token comment"># 最少两个节点存活在开始数据存活</span><span class="token comment"># gateway.recover_after_nodes: 2</span><span class="token comment"># 其它有master资格的节点，与上面不同的配置仅有以下2项</span><span class="token comment"># network.host:   # 本机IP地址</span><span class="token comment"># node.name:   # 分配的节点名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">属性名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">cluster.name</td><td align="left">配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。</td></tr><tr><td align="left">node.name</td><td align="left">节点名，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</td></tr><tr><td align="left">path.conf</td><td align="left">设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/ elasticsearch</td></tr><tr><td align="left">path.data</td><td align="left">设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开</td></tr><tr><td align="left">path.logs</td><td align="left">设置日志文件的存储路径，默认是es根目录下的logs文件夹</td></tr><tr><td align="left">path.plugins</td><td align="left">设置插件的存放路径，默认是es根目录下的plugins文件夹</td></tr><tr><td align="left">bootstrap.memory_lock</td><td align="left">设置为true可以锁住ES使用的内存，避免内存进行swap</td></tr><tr><td align="left">network.host</td><td align="left">设置bind_host和publish_host，设置为0.0.0.0允许外网访问</td></tr><tr><td align="left">http.port</td><td align="left">设置对外服务的http端口，默认为9200。</td></tr><tr><td align="left">transport.tcp.port</td><td align="left">集群结点之间通信端口</td></tr><tr><td align="left">discovery.zen.ping.timeout</td><td align="left">设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些</td></tr><tr><td align="left">discovery.zen.minimum_master_nodes</td><td align="left">主结点数量的最少值 ,此值的公式为：(master_eligible_nodes/2) + 1 ，比如：有3个符合要求的主结点，那么这里要设置为2</td></tr></tbody></table><h3 id="jvm-options"><a href="#jvm-options" class="headerlink" title="jvm.options"></a>jvm.options</h3><ol><li><code>/etc/elasticsearch/jvm.options</code>直接修改配置文件  </li><li><code>/etc/elasticsearch/jvm.options.d/</code>将配置文件放入此目录下，读取顺序按字典顺序a-z</li></ol><p><code>jvm.options</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 独立于JVM版本的JVM选项</span><span class="token punctuation">-</span>Xmx2g<span class="token comment"># JDK版本为8的JVM选项</span><span class="token comment"># 8:-Xmx2g</span><span class="token comment"># JDK版本大于8的JVM选项，如果你的JDK是11将应用这个选项</span><span class="token comment"># 8-:-Xmx2g</span><span class="token comment"># JDK版本大于8小于9的JVM选项</span><span class="token comment"># 8-9:-Xmx2g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="etc-sysconfig-elasticsearch"><a href="#etc-sysconfig-elasticsearch" class="headerlink" title="/etc/sysconfig/elasticsearch"></a>/etc/sysconfig/elasticsearch</h3><table><thead><tr><th align="left">配置项</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">JAVA_HOME</td><td align="left">设置要使用的自定义Java路径。</td></tr><tr><td align="left">MAX_OPEN_FILES</td><td align="left">最大打开文件数，默认为65535。</td></tr><tr><td align="left">MAX_LOCKED_MEMORY</td><td align="left">最大锁定内存大小。如果您在elasticsearch.yml中使用bootstrap.memory_lock选项，请设置为<code>unlimited</code>。</td></tr><tr><td align="left">MAX_MAP_COUNT</td><td align="left">一个进程可能具有的最大内存映射区域数。如果将mmapfs用作索引存储类型，请确保将其设置为较高的值。在启动Elasticsearch之前通过<code>sysctl</code>进行设置。默认为262144。</td></tr><tr><td align="left">ES_PATH_CONF</td><td align="left">配置文件目录（需要包含<code>elasticsearch.yml</code>，<code>jvm.options</code>和<code>log4j2.properties</code>文件）；默认为<code>/etc/elasticsearch</code>。</td></tr><tr><td align="left">ES_JAVA_OPTS</td><td align="left">您可能想要应用的任何其他JVM系统属性。</td></tr><tr><td align="left">RESTART_ON_UPGRADE</td><td align="left">配置在软件包升级时重新启动，默认为<code>false</code>。这意味着您必须在手动安装软件包后重新启动Elasticsearch实例。这样做的原因是为了确保集群中的升级不会导致连续的分片重新分配，从而导致高网络流量并减少集群的响应时间。</td></tr></tbody></table><h4 id="验证它"><a href="#验证它" class="headerlink" title="验证它"></a>验证它</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">[root@localhost ~]# curl 192.168.1.95:9200&#123;  "name" : "node5",  "cluster_name" : "my-application",  "cluster_uuid" : "_na_",  "version" : &#123;    "number" : "7.8.0",    "build_flavor" : "default",    "build_type" : "rpm",    "build_hash" : "757314695644ea9a1dc2fecd26d1a43856725e65",    "build_date" : "2020-06-14T19:35:50.234439Z",    "build_snapshot" : false,    "lucene_version" : "8.5.1",    "minimum_wire_compatibility_version" : "6.8.0",    "minimum_index_compatibility_version" : "6.0.0-beta1"  &#125;,  "tagline" : "You Know, for Search"&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><table><thead><tr><th align="left">Type</th><th align="left">Description</th><th align="left">Default Location</th><th align="left">Setting</th></tr></thead><tbody><tr><td align="left">home</td><td align="left">Elasticsearch主目录或$ES_HOME</td><td align="left">/usr/share/elasticsearch</td><td align="left">-</td></tr><tr><td align="left">bin</td><td align="left">二进制脚本，包括用于启动节点的elasticsearch和用于安装插件的elasticsearch-plugin</td><td align="left">usr/share/elasticsearch/bin</td><td align="left">-</td></tr><tr><td align="left">conf</td><td align="left">配置文件，包括elasticsearch.yml</td><td align="left">/etc/elasticsearch</td><td align="left">ES_PATH_CONF</td></tr><tr><td align="left">conf</td><td align="left">环境变量，包括堆大小，文件描述符.</td><td align="left">/etc/sysconfig/elasticsearch</td><td align="left">-</td></tr><tr><td align="left">data</td><td align="left">节点上分配的每个索引/分片的数据文件的位置。可以容纳多个位置.</td><td align="left">/var/lib/elasticsearch</td><td align="left">path.data</td></tr><tr><td align="left">jdk</td><td align="left">捆绑的Java开发工具包，用于运行Elasticsearch。可以通过在/etc/sysconfig/elasticsearch.</td><td align="left">/usr/share/elasticsearch/jdk</td><td align="left">-</td></tr><tr><td align="left">logs</td><td align="left">日志文件位置</td><td align="left">/var/log/elasticsearch</td><td align="left">path.logs</td></tr><tr><td align="left">plugins</td><td align="left">插件文件位置。每个插件将包含在一个子目录中。</td><td align="left">/usr/share/elasticsearch/plugins</td><td align="left">-</td></tr><tr><td align="left">repo</td><td align="left">共享文件系统存储库位置。可以容纳多个位置。可以将文件系统存储库放置在此处指定的任何目录的任何子目录中。</td><td align="left">Not configured</td><td align="left">path.repo</td></tr></tbody></table><h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><p><code>/etc/kibana/kibana.yml</code>  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server.port</span><span class="token punctuation">:</span> <span class="token number">5601</span><span class="token key atrule">server.host</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.95"</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://192.168.1.95:9200"</span><span class="token punctuation">]</span><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nginx-1"><a href="#nginx-1" class="headerlink" title="nginx"></a>nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">htpasswd -cm /etc/nginx/kibana-user admin   <span class="token comment"># 推荐</span>htpasswd -bcm /etc/nginx/kibana-user admin admin   <span class="token comment"># 不推荐，密码明文暴露在命令行</span><span class="token comment"># vi /etc/nginx/conf.d/kibana.conf </span>server <span class="token punctuation">&#123;</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    server_name <span class="token number">192.168</span>.1.95<span class="token punctuation">;</span>    auth_basic <span class="token string">"Restricted Access"</span><span class="token punctuation">;</span>    auth_basic_user_file /etc/nginx/kibana-user<span class="token punctuation">;</span>    location / <span class="token punctuation">&#123;</span>        proxy_pass http://192.168.1.95:5601<span class="token punctuation">;</span>        proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>        proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">'upgrade'</span><span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_cache_bypass <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="你可能需要修改一下系统参数"><a href="#你可能需要修改一下系统参数" class="headerlink" title="你可能需要修改一下系统参数"></a>你可能需要修改一下系统参数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/security/limits.conf   <span class="token comment"># 新增或修改以下选项，重新登陆生效</span>* soft nofile <span class="token number">65536</span>* hard nofile <span class="token number">131072</span>* soft nproc <span class="token number">2048</span>* hard nproc <span class="token number">4096</span>* soft memlock unlimited* hard memlock unlimited<span class="token builtin class-name">echo</span> <span class="token string">"vm.max_map_count=262144"</span> <span class="token operator">>></span> /etc/sysctl.confsysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>访问kibana界面，查看dev-nginx-access-*索引是否存在  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> elk </tag>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dhcp</title>
      <link href="/posts/f8b7.html"/>
      <url>/posts/f8b7.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="理解DHCP原理"><a href="#理解DHCP原理" class="headerlink" title="理解DHCP原理"></a>理解DHCP原理</h1><p>DHCP（动态主机配置协议）是由Internet工作任务小组设计开发的，专门用于为TCP/IP网络中的计算机在自动分配TCP/IP参数的协议<br>简单来说，DHCP就是一个不需要账号密码登录的、自动给内网机器分配IP地址等信息的协议  </p><p>使用DHCP的好处：  </p><ol><li>减少管理员的工作量  </li><li>避免ip地址冲突  </li><li>当网络更改ip地址段时，不需要再重新配置每个用户的ip地址  </li><li>提高了ip地址的利用率  </li><li>方便客户端的配置  </li></ol><p>可分配的地址信息主要包括：  </p><blockquote><p>网卡的IP地址、子网掩码<br>对应的网络地址、广播地址<br>默认网关地址<br>DNS服务器地址  </p></blockquote><p>DHCP服务的端口：UDP的67、68  </p><h2 id="DHCP的分配方式："><a href="#DHCP的分配方式：" class="headerlink" title="DHCP的分配方式："></a>DHCP的分配方式：</h2><p>自动分配：分配到一个ip地址后永久使用<br>手动分配：由DHCP服务器管理员专门指定ip地址<br>动态分配：使用完后释放该ip，供其它客户机使用  </p><h2 id="DHCP的租约过程"><a href="#DHCP的租约过程" class="headerlink" title="DHCP的租约过程"></a>DHCP的租约过程</h2><p>客户机从DHCP服务器获得ip地址的过程称为DHCP的租约过程  </p><p>租约过程分为四个步骤：  </p><ol><li>客户机请求ip（客户机发DHCP Discover）（四步均为广播发送）<br>客户端在网络中搜索服务器  </li><li>服务器响应（服务器发DHCP Offer）<br>服务器向客户端响应服务  </li><li>客户机选择ip（客户机发DHCP Request）<br>客户端向目标服务器发送服务请求  </li><li>服务器确定租约（服务器发DHCP ACK广播包）<br>服务器向客户端提供服务  </li></ol><hr><ol><li>客户机请求ip地址<br>当一个DHCP客户机启动时，客户机还没有ip地址，所以客户机要通过DHCP获取一个合法的地址<br>此时，DHCP客户机以广播的方式（原因是DHCP服务器的ip地址对客户机来说是未知的），通过UDP的67端口发送DHCP Discover发现信息来寻找DHCP服务器，广播信息中包含DHCP客户机的MAC地址和计算机名，以便DHCP服务器确定哪个客户机发送的请求<br><img src="/medias/drawing-bed/dhcp/0.png">              </li><li>服务器响应<br>当DHCP服务器接收到来自客户机请求ip地址的信息时，它就在自己的ip地址池中查找是否有合法的ip地址提供给客户机，如果有，DHCP服务器就将此ip地址做上标记，加入到DHCP Offer的消息中，然后DHCP服务器就通过UDP的68端口广播一则包含下列信息的DHCP Offer消息<br>DHCP客户机的MAC地址、DHCP服务器提供的合法ip地址、子网掩码、默认网关、租约的期限、DHCP服务器的ip地址<br><img src="/medias/drawing-bed/dhcp/1.png">              </li><li>客户机选择ip地址<br>DHCP客户机从接收到的第一个DHCP Offer消息中提取ip地址，发出ip地址的DHCP服务器将该地址保留，这样该地址就不能再分配给其它客户机<br>客户机从第一个DHCP服务器接收DHCP Offer消息并提取了ip地址后，客户机将DHCP Request消息广播到所有的DHCP服务器，表明它接收提供的内容<br>DHCP Request消息包括为客户机提供ip配置的服务器的服务标识（服务器ip地址）DHCP服务器查看服务器标识字段，以确定提供的ip地址是否被接收，如果DHCP Offer被拒绝，则DHCP服务取消并保留其ip地址以提供给下一个客户机的租约请求<br><img src="/medias/drawing-bed/dhcp/2.png" alt="img">              </li><li>服务器确定租约<br>DHCP服务器接收到DHCP Request消息后，以DHCP Ack消息的形式向客户机广播成功确认，该消息包含有ip地址的有效租约和其它可配置的信息<br>当客户机收到DHCP Ack消息时，它就配置了ip地址，完成TCP/IP的初始化<br><img src="/medias/drawing-bed/dhcp/3.png" alt="img">  </li></ol><h2 id="重新登录"><a href="#重新登录" class="headerlink" title="重新登录"></a>重新登录</h2><h3 id="可以继续使用："><a href="#可以继续使用：" class="headerlink" title="可以继续使用："></a>可以继续使用：</h3><p>DHCP客户机每次重新登录网络时，不需要再发送DHCP Discover消息，而是直接发送包含前一次所分配的ip地址的DHCP Request请求信息<br>当DHCP服务器接收到这一信息后，它会尝试让DHCP客户机继续使用原来的ip地址，并回答一个DHCP Ack确认信息  </p><h3 id="不可继续使用："><a href="#不可继续使用：" class="headerlink" title="不可继续使用："></a>不可继续使用：</h3><p>如果此ip地址无法再分配给原来的DHCP客户机使用（如，ip地址已经分配给其它的DHCP客户机使用），DHCP服务器给DHCP客户机回答一个DHCP Noack否认信息<br>当原来的DHCP客户机收到此DHCP Noack否认信息后，它就必须重新发送DHCP Discover发现信息来请求新的ip地址  </p><h3 id="更新租约："><a href="#更新租约：" class="headerlink" title="更新租约："></a>更新租约：</h3><p>当DHCP服务器向客户机出租的ip地址租期达到50%时，就需要更新地址租约，当租约时间达到87.5%时还没能找到DHCP服务器更新新租约，客户机就需要重新发送DHCP Discover包<br>如果客户端发送Discover包后，没有DHCP回应，客户端会启用一个169.254.0.0/16的B类地址作为临时通讯地址  </p><h1 id="配置DHCP服务"><a href="#配置DHCP服务" class="headerlink" title="配置DHCP服务"></a>配置DHCP服务</h1><h2 id="DHCP配置与使用"><a href="#DHCP配置与使用" class="headerlink" title="DHCP配置与使用"></a>DHCP配置与使用</h2><p>关闭虚拟机DHCP服务（任务管理器—-&gt;服务）<br><img src="/medias/drawing-bed/dhcp/4.png">  </p><h3 id="DHCP服务器的配置"><a href="#DHCP服务器的配置" class="headerlink" title="DHCP服务器的配置"></a>DHCP服务器的配置</h3><p>安装DHCP包：<code>dhcp</code>（yum安装即可）<br>主配置文件：<br><code>/etc/dhcp/dhcpd.conf</code><br><img src="/medias/drawing-bed/dhcp/5.png">    </p><p>默认此文件中没有配置内容，只有提示，需要到<code>/usr/share/doc/dhcp-版本/dhcpd.conf.sample</code>文件复制   </p><h3 id="执行程序："><a href="#执行程序：" class="headerlink" title="执行程序："></a>执行程序：</h3><p>主程序：<code>/usr/sbin/dhcp/dhcpd</code><br>服务脚本：<code>/etc/init.d/dhcpd</code><br>指定配置参数：<code>/etc/sysconfig/dhcpd</code>（dhcp启动时要读取的参数）<br>中继主程序：<code>dhcrelay</code><br>中继服务脚本：<code>/etc/init.d/dhcrelay</code><br>DHCP中继配置：<code>/etc/sysconfig/dhcrelay</code><br><img src="/medias/drawing-bed/dhcp/6.png"><br>声明：用来描述dhcpd服务器中对网络布局的划分，其中subnet声明用来约束一个网段，host声明用来约束一台特定的主机<br>参数：由配置关键字和对应的值组成，总是以 ；结束，一般位于指定的声明范围之内，用来设置所在范围的运行特性（如，默认租约时间、最大租约时间等）<br>选项：由option引导，后面跟具体的配置关键字和对应的值，也是以分号 ；结束，用于指定分配给客户机的各种地址参数（如，默认网关地址、子网掩码、DNS服务器地址等）<br>确定DHCP服务的全局配置，作用与整个DHCP服务器，为了使配置文件的结果更加清晰，全局配置通常会放在配置文件dhcpd.conf的开头部分，可以是配置参数，也可以是配置选项  </p><h3 id="subnet网段声明"><a href="#subnet网段声明" class="headerlink" title="subnet网段声明"></a>subnet网段声明</h3><p>作用于整个子网段（subnet必须要有，且可有多个）  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">subnet 192.168.0.0 netmask 255.255.255.0 &#123;   # 声明网段地址    range 192.168.0.10 192.168.0.100;   # 设置地址池    option subnet-mask 255.255.255.0;   # 设置子网掩码    option routers 192.168.0.1;   # 指定默认网关&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="host主机声明"><a href="#host主机声明" class="headerlink" title="host主机声明"></a>host主机声明</h3><p>作用于单个主机（为个别服务器分配固定的ip地址）  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">host test&#123;      hardware ethernet 00:00:00:00:00:00;   # 指定mac地址    fixed-address 192.168.0.45;   # 指定ip地址&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动DHCP服务  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> dhcpd start<span class="token function">netstat</span> -anpu<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">":67"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动失败，查看/var/log/messages中的报错信息，根据提示进行排错。<br>注意：在启动dhcpd服务之前，应确定提供DHCP服务器的网络接口具有静态指定的固定ip地址，并至少有一个网络接口的ip地址与DHCP服务器中的一个subnet网段相对应，否则将无法正常启动dhcpd服务  </p><h3 id="DHCP客户端获取IP："><a href="#DHCP客户端获取IP：" class="headerlink" title="DHCP客户端获取IP："></a>DHCP客户端获取IP：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> network restartdhclient -d eth0   <span class="token comment"># dhclient -r 释放获取的ip地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>/var/lib/dhcpd/dhcpd.leases</code>中记录了服务器的ip地址分配情况</p><h1 id="配置DHCP中继"><a href="#配置DHCP中继" class="headerlink" title="配置DHCP中继"></a>配置DHCP中继</h1><p>在实际应用中可能会遇到一个比较大的物理网络中存在多个ip子网，而每个ip子网的主机都需要DHCP服务器来动态分配ip地址：  </p><ol><li>在每个子网设置DHCP服务器，将其分别为每个子网分配ip地址，但此方法会增加开销，浪费资源  </li><li>在一个子网内设置DHCP服务器，通过这台DHCP服务器来为所有的子网分配ip地址  </li></ol><h2 id="DHCP中继配置"><a href="#DHCP中继配置" class="headerlink" title="DHCP中继配置"></a>DHCP中继配置</h2><p>中继主程序：<code>dhcrelay</code><br>中继服务脚本：<code>/etc/init.d/dhcrelay</code><br>DHCP中继配置文件：<code>/etc/sysconfig/dhcrelay</code>  </p><ol><li><p>开启路由转发功能<br>永久启用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysctl.confnet.ipv4.ip_forword<span class="token operator">=</span><span class="token number">1</span>   <span class="token comment"># 修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>sysctl -p</code> 让配置文件生效  </p></li><li><p>指定dhcpserver及监听的网卡到配置文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/dhcrelay  <span class="token assign-left variable">INTERFACES</span><span class="token operator">=</span><span class="token string">"eth0 eth1 eth2…"</span>   <span class="token comment"># 监听的网卡  </span><span class="token assign-left variable">DHCPSERVERS</span><span class="token operator">=</span><span class="token string">"192.168.0.10"</span>   <span class="token comment"># dhcp服务器ip  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动中继服务<br><code>service dhcrelay restart</code><br>添加路由：<br>dhcp服务器中添加默认路由指定中继ip<br>dhcp客户机中添加默认路由指定中继ip  </p></li></ol><p>示例：<br>DHCP服务器端<br>关闭SELinux和iptables<br><img src="/medias/drawing-bed/dhcp/7.png">  </p><p>安装<code>dhcp</code><br>配置<code>/etc/dhcp/dhcpd.conf</code>（subnet 对全局生效）<br><img src="/medias/drawing-bed/dhcp/8.png">  </p><p>如果host中有指定ip则subnet对此host不生效<br><img src="/medias/drawing-bed/dhcp/9.png">  </p><p>客户端：<br><code>dhclient -d eth#</code> 获取动态ip<br>带中继：<br>HDCP服务器增加<br><img src="/medias/drawing-bed/dhcp/10.png">  </p><p>配置中继服务器：<br>配置<code>/etc/sysctl.conf</code><br><img src="/medias/drawing-bed/dhcp/11.png">  </p><p>生效<code>sysctl -p</code><br><img src="/medias/drawing-bed/dhcp/12.png">  </p><p>配置/etc/sysconfig/dhcrelay<br><img src="/medias/drawing-bed/dhcp/13.png">  </p><p>启动中继服务：<br><code>service dhcrelay restart</code><br>在dhcp服务器中添加默认路由下一跳为中继ip（和dhcp服务器同网段）<br>在dhcp客户端中添加默认路由下一跳为中继ip（和dhcp服务器分配的网段一致）<br>TODO route待增加<br>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 系统 </tag>
            
            <tag> dhcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉</title>
      <link href="/posts/4af8.html"/>
      <url>/posts/4af8.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>添加机器人：<br>1.找到群<br><img src="/medias/drawing-bed/others/5.jpg"><br>2.添加自定义机器人<br><img src="/medias/drawing-bed/others/6.jpg"><br>3.记住webhook<br><img src="/medias/drawing-bed/others/7.jpg"><br>4.记住签值，鼠标放在框里面双击可以复制，不嫌麻烦可以添加关键字和IP地址段，与加签相比，比较容易实现。<br><img src="/medias/drawing-bed/others/8.jpg"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> codecs<span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> time <span class="token keyword">import</span> strftime<span class="token punctuation">,</span> localtimelocaltime <span class="token operator">=</span> strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token comment"># 此段代码是python3把timestamp+"\n"+密钥当做签名字符串，使用HmacSHA256算法计算签名，然后进行Base64 encode，最后再把签名参数再进行urlEncode，得到最终的签名sign（需要使用UTF-8字符集）</span>timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>secret <span class="token operator">=</span> <span class="token string">'SEC******'</span>   <span class="token comment"># 签值</span>secret_enc <span class="token operator">=</span> secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>string_to_sign <span class="token operator">=</span> <span class="token string">'&#123;&#125;\n&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>string_to_sign_enc <span class="token operator">=</span> string_to_sign<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>hmac_code <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>secret_enc<span class="token punctuation">,</span> string_to_sign_enc<span class="token punctuation">,</span>                     digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote_plus<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>hmac_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DingTalk_Base</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">send_msg</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        json_text <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>            <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"content"</span><span class="token punctuation">:</span> text            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"at"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"atMobiles"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token string">""</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">False</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>json_text<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>__headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token keyword">class</span> <span class="token class-name">DingTalk_Disaster</span><span class="token punctuation">(</span>DingTalk_Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 填写机器人的webhook</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'https://oapi.dingtalk.com/robot/send?access_token=******'</span> <span class="token operator">+</span> \            <span class="token string">'&amp;timestamp='</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">'&amp;sign='</span> <span class="token operator">+</span> sign<span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./text'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    txt <span class="token operator">=</span> localtime <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>   <span class="token comment"># .strip('\n')去除首行和尾行的空行</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    ding <span class="token operator">=</span> DingTalk_Disaster<span class="token punctuation">(</span><span class="token punctuation">)</span>    ding<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>    <span class="token comment"># ding.send_msg('加盐\ntest')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>将text文件放在py文件的同级目录</strong></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">wujiops测试信息haha2haha<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意此文件可能会导致您的dingding接口被恶意获取🤬！冷静点~根本没人认识你啊喂😭  </p><p>这里分享一个python打包py文件成可执行文件。<br>方法一：<br><code>pip3 install pyinstaller tinyaes</code>安装打包模块<br><code>pyinstaller -F dingtalk.py</code>直接打包可以被反编译成源代码<br>反编译<code>pyhton pyinstxtractor.py xxx</code>  </p><p>方法二：<br>对源码加密打包安装模块  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> Cythonpip3 uninstall Cryptopip3 <span class="token function">install</span> pycrypto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成key：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span> /dev/urandom <span class="token function">tr</span> -dc <span class="token number">0</span>-9-A-Z-a-z-_,.?<span class="token operator">=</span>+@%<span class="token operator">!</span> <span class="token operator">|</span> <span class="token function">head</span> -c <span class="token variable">$&#123;1<span class="token operator">:-</span>64&#125;</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span>openssl rand -base64 <span class="token number">32</span><span class="token operator">|</span><span class="token function">tr</span> A-Z a-z<span class="token operator">|</span><span class="token function">cut</span> -c <span class="token number">1</span>-64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>pyinstaller -F --key=****** --clean dingtalk.py</code>加密打包<br>生成dist/dingtalk可执行文件  </p><p>遇到的麻烦事：  </p><ol><li><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    src/MD2.c:31:10: 致命错误：Python.h：No such <span class="token function">file</span> or directory     <span class="token comment">#include "Python.h"</span>              ^~~~~~~~~~    编译中断。    error: <span class="token builtin class-name">command</span> <span class="token string">'gcc'</span> failed with <span class="token builtin class-name">exit</span> status <span class="token number">1</span>yum -y <span class="token function">install</span> gcc python3-devel   <span class="token comment"># 解决</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-none"><code class="language-none">执行打包好的文件不报错不发送信息  原因：时间未同步  设置了加盐发送消息时间未做同步  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其它问题：<br>如果你看这篇文档之前安装了许多插件，你可能需要卸载掉一些  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 uninstall pycryptodomepip3 uninstall Crypto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh</title>
      <link href="/posts/5d5.html"/>
      <url>/posts/5d5.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="ssh服务讲解"><a href="#ssh服务讲解" class="headerlink" title="ssh服务讲解"></a>ssh服务讲解</h1><p>SSH简介：<br>&emsp;&emsp;SSH是一种安全通道协议，主要用来实现字符界面的远程登录，远程复制等功能<br>&emsp;&emsp;ssh协议对通信双方的数据传输进行了加密处理，其中包括用户登录时输入的用户口令<br>&emsp;&emsp;与telnet等应用相比，ssh协议提供了更好的安全性<br>&emsp;&emsp;OpenSSH：ssh协议的开源实现  </p><p>配置openssh服务器端：<br>&emsp;&emsp;ssh服务是”C/S”架构的，C代表客户端，S代表服务器端<br>&emsp;&emsp;在安装Linux系统时openssh服务默认已经安装  </p><p>ssh服务及配置文件：<br>&emsp;&emsp;openssh-server：服务器端软件<br>&emsp;&emsp;openssh-clients：客户端软件<br>要保证这两个包都安装才行<br>&emsp;&emsp;启动：service sshd start  </p><p>配置文件：<br>&emsp;&emsp;/etc/ssh/sshd_config<br>&emsp;&emsp;配置项：<br>Port 22：port代表监听的端口，默认22，可修改<br>ListenAddress 0.0.0.0：监听的IP地址，默认为所有，可修改<br>Protocol 2：代表的ssh的第二个版本<br>LoginGraceTime 2m：输入用户名后，2分钟不输入密码自动关闭<br>PermitRootLogin yes：是否允许root登录<br>MaxAuthTries 6：最大的认证次数，即输入密码次数<br>RSAAuthentication yes：启用RSA算法认证<br>PubkeyAuthentication yes：启用公钥认证<br>AuthorizedkeysFile：~/.ssh/authorized_keys公钥放置位置，在对应用户的家目录下面的.ssh隐藏目录中，名字为authorized_keys文件<br>PasswordAuthentication yes：密码认证<br>PermitEmptyPasswords no：是否允许空密码登录  </p><p>限制可登录用户的配置：（allow白名单，deny黑名单）<br>AllowUsers user1 user2 user3…<br>DenyUsers<br>AllowGroups<br>DenyGroups  </p><p>登录验证方法：<br>&emsp;&emsp;ssh服务支持两种验证方式：密码验证、密钥对验证，可以只设置其中一种方式，也可以两种方式都启用<br>&emsp;&emsp;密码验证：以服务器中本地系统用户的远程登录名称、密码进行验证，这种方式使用最为简便，但以客户机角度来看，正在连接的服务器有可能被假冒，从服务器角度来看，当遇到密码穷举（即暴力破解）攻击时，防御力能力比较弱<br>&emsp;&emsp;密钥对验证：要求提供相匹配的密钥信息才能通过验证  </p><p>使用ssh客户端程序<br>客户端组件：<br>命令程序：ssh、scp、sftp<br>图形工具：Xshell  </p><p>ssh远程登录命令<br>&emsp;&emsp;格式：<code>ssh [user@]host [command]</code><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<code>-p port</code>：远程服务器监听的端口<br>&emsp;&emsp;例如：<code>ssh test@192.168.0.10</code><br>&emsp;&emsp;&emsp;&emsp;使用test用户登录192.168.0.10这台服务器，注意：test用户是192.168.0.10这台服务器上的用户  </p><p>scp命令：<br>scp [options] SRC… DEST/<br>两种方式：<br>&emsp;&emsp;<code>scp [options] [user@]host:/sourcefile /testdir</code><br>&emsp;&emsp;<code>scp [options] /sourcefile [user@]host:/testpath</code>  </p><p>常用选项：<br>&emsp;&emsp;<code>-C</code>：压缩数据流<br>&emsp;&emsp;<code>-r</code>：递归复制<br>&emsp;&emsp;<code>-p</code>：保持原文件的修改时间、访问时间、权限<br>&emsp;&emsp;<code>-P PORT</code>：指明远程主机监听的端口  </p><h1 id="远程复制工具"><a href="#远程复制工具" class="headerlink" title="远程复制工具"></a>远程复制工具</h1><p>rsync命令：<br>基于ssh和rsh服务实现高效率的远程系统之间复制文件<br>使用安全的shell连接做为传输方式<br>&emsp;&emsp;<code>rsync -av /etc/passwd server1:/tmp</code>复制目录和目录下文件<br>&emsp;&emsp;<code>rsync -av /etc/ server1:/tmp</code>只复制目录下文件  </p><p>比scp更快，只复制不同的文件<br>选项：<br>&emsp;&emsp;<code>-n</code>模拟复制过程<br>&emsp;&emsp;<code>-v</code>显示过程<br>&emsp;&emsp;<code>-r</code>递归复制目录树<br>&emsp;&emsp;<code>-p</code>保留权限<br>&emsp;&emsp;<code>-t</code>保留时间戳<br>&emsp;&emsp;<code>-g</code>保留组信息<br>&emsp;&emsp;<code>-o</code>保留所有者信息  </p><p>ssh客户端：<br>允许实现对远程系统经验证地加密安全访问<br>当用户远程连接ssh服务器时会复制ssh服务器<code>/etc/ssh/ssh_host*key.pub</code>文件中的公钥到客户机的<code>~./ssh/know_hosts</code>中，下次连接时，会比较两处是否有不同  </p><h1 id="基于key认证"><a href="#基于key认证" class="headerlink" title="基于key认证"></a>基于key认证</h1><p>基于key认证：<br>在服务器、客户端中构建密钥对验证ssh的基本过程<br>&emsp;&emsp;第一步：创建密钥对：<br>&emsp;&emsp;&emsp;&emsp;公钥文件：id_rsa.pub<br>&emsp;&emsp;&emsp;&emsp;私钥文件：id_rsa<br>&emsp;&emsp;第二步：上传公钥文件id_rsa.pub到服务器中<br>&emsp;&emsp;第三步：导入公钥信息<br>&emsp;&emsp;&emsp;&emsp;公钥库文件：~/.ssh/authorized_key（此文件的权限必须为600）<br>&emsp;&emsp;第四步：使用密钥对方式验证<br>具体实现两种方式：<br>第一种方式（较复杂）：<br>&emsp;&emsp;使用<code>user</code>用户连接<code>ssh</code>服务器的<code>user1</code>用户<br>&emsp;&emsp;第一步：在客户端创建密钥对<br>&emsp;&emsp;<code>su - 客户端用户</code><br>&emsp;&emsp;<code>ssh-keygen -t rsa -b 2048</code>（一路回车）<br>&emsp;&emsp;第二步：上传公钥<br>&emsp;&emsp;<code>cd /home/客户端用户/.ssh</code><br>&emsp;&emsp;<code>scp id_rsa.pub root@服务端IP:/tmp</code><br>&emsp;&emsp;第三步：在ssh服务器中设置<br>&emsp;&emsp;<code>cd /tmp</code><br>&emsp;&emsp;<code>mkdir /home/服务端用户/.ssh</code><br>&emsp;&emsp;<code>cat id_rsa.pub &gt; /home/服务端用户/.ssh/authorized_keys</code>（相当于mv id_rsa.pub /home/服务端/.ssh/authorized_keys）<br>&emsp;&emsp;<code>chmod 600 /home/服务端用户/.ssh/authorized_keys</code><br>&emsp;&emsp;第四步：在客户端登录验证  </p><p>第二种方式（简单）<br>&emsp;&emsp;使用客户端用户连接ssh服务器的服务端用户<br>&emsp;&emsp;第一步：在客户机创建密钥对<br>&emsp;&emsp;<code>su - user</code><br>&emsp;&emsp;<code>ssh-keygen -t rsa -b 2048</code><br>&emsp;&emsp;第二步：直接导入公钥到user1用户的家目录中<br>&emsp;&emsp;<code>ssh-copy-id -i id_rsa.pub user1@192.168.0.10</code>（cd 到用户家目录下的.ssh目录下）<br>&emsp;&emsp;输入user1用户的密码<br>&emsp;&emsp;查看是否成功<br>&emsp;&emsp;第三步：在客户端验证&emsp;&emsp;&emsp;&emsp;<br>&emsp;&emsp;ssh <a href="mailto:&#x75;&#x73;&#x65;&#x72;&#x31;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x30;&#46;&#49;&#48;">&#x75;&#x73;&#x65;&#x72;&#x31;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x30;&#46;&#49;&#48;</a>以user1用户登录看是否免密  </p><p>ssh服务最佳实践<br>&emsp;&emsp;1、不要使用默认端口<br>&emsp;&emsp;2、禁止使用Protocol version 1<br>&emsp;&emsp;3、限制可登录用户<br>&emsp;&emsp;4、设定空闲会话超时时长<br>&emsp;&emsp;5、利用防火墙设置ssh访问策略<br>&emsp;&emsp;6、仅监听特定的IP地址<br>&emsp;&emsp;7、基于口令认证时，使用强密码策略<br>&emsp;&emsp;8、使用基于密钥的认证<br>&emsp;&emsp;9、禁止使用空密码<br>&emsp;&emsp;10、禁止root用户直接登录<br>&emsp;&emsp;11、限制ssh的访问频度和并发在线数<br>&emsp;&emsp;12、做好日志，经常分析  </p><h1 id="sudo提升权限"><a href="#sudo提升权限" class="headerlink" title="sudo提升权限"></a>sudo提升权限</h1><p>sudo的用途：  </p><ol><li>sudo 能够授权指定用户在指定主机上运行某些命令，如果未授权用户尝试使用，sudo会提示联系管理员  </li><li>sudo 可以提供日志，记录每个用户使用sudo操作  </li><li>sudo 为系统管理员提供配置文件，允许系统管理员集中地管理用户的使用权限的使用的主机  </li><li>sudo 使用时间戳文件来完成类似”检票”的系统 默认存活期为5分钟的”入场券”<br>通过visudo命令编辑配置文件，具有文件，具有语法检查功能<br>&emsp;&emsp;<code>visudo -c</code>检查语法  </li></ol><p>配置sudo授权<br>配置文件：<code>/etc/sudoers</code>，<code>/etc/sudoers.d/</code><br>日志文件：<code>/var/log/secure</code>  </p><p>配置文件支持使用通配符<code>glob</code>：<br>&emsp;&emsp;<code>?</code>匹配单一字符<br>&emsp;&emsp;<code>*</code>匹配任意长度字符<br>&emsp;&emsp;<code>[wxc]</code>匹配其中一个字符<br>&emsp;&emsp;<code>[^wxc]</code>除了给定的字符<br>&emsp;&emsp;<code>\x</code>转义<br>&emsp;&emsp;<code>[[:alpha:]]</code>字母 示例：<code>/bin/ls [[:alpha:]]*</code><br>&emsp;&emsp;<code>!</code>排除  </p><p>使用方法：<br>&emsp;&emsp;<code>sudo [参数] [授权命令]</code><br>&emsp;&emsp;参数：<br>&emsp;&emsp;<code>-u user</code>：以指定用户身份运行命令<br>&emsp;&emsp;<code>-l</code>：查看当前用户可以执行的命令<br>&emsp;&emsp;<code>-v</code>：更新用户的时间戳而不执行命令<br>&emsp;&emsp;<code>-V</code>：显示sudo的版本信息  </p><p>配置文件格式：<br>使用visudo命令或执行<code>vi /etc/sudoers</code>打开配置文件<br>&emsp;&emsp;文件中记录格式：<br>&emsp;&emsp;&emsp;&emsp;用户  主机名列表=（代表用户）命令程序列表<br>&emsp;&emsp;&emsp;&emsp;ALL： 代表所有<br>&emsp;&emsp;&emsp;&emsp;NOPASSWD：免密<br>&emsp;&emsp;用户：运行命令者的身份<br>&emsp;&emsp;主机列表：通过哪些主机<br>&emsp;&emsp;代表用户：以哪个用户的身份<br>&emsp;&emsp;命令程序列表：运行哪些命令<br>&emsp;&emsp;注意：如果只授权用户登录本机执行命令，主机写本地ip即可<br>例如：<br>&emsp;&emsp;给user这个用户sudo权限，允许他在test这台主机中可执行/bin/下的所有命令，除了/sbin/reboot/外<br>&emsp;&emsp;&emsp;&emsp;<code>visudo</code><br>&emsp;&emsp;&emsp;&emsp;<code>user test=/sbin/*,!/sbin/reboot</code>  </p><p>现在user用户就可以使用授权的命令了<br>&emsp;&emsp;<code>su - user</code><br>&emsp;&emsp;sudo授权命令（会提示输入密码，输入user用户的密码即可，输入密码后5分钟内不用再输入密码）  </p><p>sudo别名<br>别名设置：<br>&emsp;&emsp;别名有四种类型：<br>&emsp;&emsp;&emsp;&emsp;User_Alias用户别名<br>&emsp;&emsp;&emsp;&emsp;Runas_Alias代表用户别名（可以省略）<br>&emsp;&emsp;&emsp;&emsp;Host_Alias主机别名<br>&emsp;&emsp;&emsp;&emsp;Cmnd_Alias命令别名<br>（U、H、C后面可以跟多个用 ，分开）  </p><pre class="line-numbers language-none"><code class="language-none">User_Alias U&#x3D;hahaHost_Alias H&#x3D;testCmnd_Alias C&#x3D;&#x2F;sbin&#x2F;*U H&#x3D;C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>格式：<code>Alias_Type NAME1=item1,item2,item3…</code><br>例如：定义用户别名为USER，包括user1，user2，user3，user4四个用户<br>&emsp;&emsp;<code>User_Alias USER=user1,user2,user3,user4</code><br>这条别名就可以用来引用了<br>&emsp;&emsp;<code>USER test=/sbin/*</code>  </p><p>sudo别名<br>也可以将用户加入到组里进行统一管理，例如wheel组，组名前要加% 将用户加入到wheel组中，然后对wheel进行授权<br><code>%wheel test=ALL</code>  </p><pre class="line-numbers language-none"><code class="language-none">User_Alias U&#x3D;hahaHost_Alias H&#x3D;testCmnd_Alias C&#x3D;&#x2F;sbin&#x2F;*U H&#x3D;C%wheel H&#x3D;ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样wheel组里的所有用户都可以执行test主机里面的所有命令了  </p><h1 id="ssh端口转发"><a href="#ssh端口转发" class="headerlink" title="ssh端口转发"></a>ssh端口转发</h1><p>转发到远端：<code>ssh -C -f -N -g -L 本地端口:目标IP:目标端口 用户名@目标IP</code><br>转发到本地：<code>ssh -C -f -N -g –R 本地端口:目标IP:目标端口 用户名@目标IP</code>  </p><p>本地ssh不是22，需要最后指定本地端口<br><code>ssh -C -f -N -g -L 本机端口:远端IP:远端端口 root@远端IP -p port</code>  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全和加密</title>
      <link href="/posts/1faa.html"/>
      <url>/posts/1faa.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="安全和加密"><a href="#安全和加密" class="headerlink" title="安全和加密"></a>安全和加密</h1><p>OpenSSL由三部分组成：<br>&emsp;&emsp;libencrypto库：加密解密库<br>&emsp;&emsp;libssl库：实现ssl安全通信机制的库<br>&emsp;&emsp;openssl：多用途命令行工具  </p><p>TCP、UDP 传输层协议<br>&emsp;&emsp;TCP协议：应用层,数据、传输层,（封装TCP首部）段、网络层（封装IP首部）叫报文、数据链路层（封装MAC首部）、发送<br>&emsp;&emsp;SSL安全套接字层，就是IP+端口，可以确认主机上的应用程序，不同的应用程序就是IP+不同的端口号？？？？？  </p><p>SSL是应用层和传输层之间的一个模块<br>&emsp;&emsp;http+调用ssl库—&gt;https<br>&emsp;&emsp;https调用了SSL协议，httpd调用了ssl库就使用加密传输，反之不加密传输<br><strong>http协议的实现，是由httpd程序完成的</strong>  </p><p>通信安全的目标（及受攻击类型）：<br>&emsp;&emsp;保密性（窃听、通信量分析）<br>&emsp;&emsp;完整性（更改、伪装、重放、否认）<br>&emsp;&emsp;可用性（拒绝服务DoS）  </p><p>加密完全体：<br>原始数据，获取校验码，用发件人的私钥加密校验码、对称加密，加密校验码和原始数据，用收件人公钥加密对称加密密码、发送  </p><p>校验码：md5、sha1、sha224等<br>（对称加密：对较大文件加密时，比非对称加密耗费的时间少）  </p><p>CA认证：（CA有很多，各种CA之间互信）<br>&emsp;&emsp;将公钥送到CA进行认证，获得“CA证书”  </p><p>证书信息：版本号、签名、证书发行者、有效期、主体公钥、等等<br>CA：公钥转发信任机构，客户把自己的公钥送往CA认证，CA会对公钥的特征码用CA的私钥加密（签名），互换公钥的两个客户端，把公钥送到CA认证，认证完成后用对方的公钥加密证书特征码（使用对方公钥加密是为了保证证书完整性）后互换证书，如果可以用CA的公钥解开（验证签名）双方公钥的加密特征码，证明证书是CA颁布的、可信任的  </p><hr><p>加密算法和协议：<br>对称加密：加密和解密使用同一个密钥<br>算法：3DES、AES（支持128 bits 、192bits 、256bits 、384bits）<br>特性：加密解密使用同一个密钥、将原始数据分割成固定大小的块，逐个进行加密<br>缺陷：密钥过多，分发困难  </p><p>公钥加密：密钥分为公钥和与之配对的私钥<br>&emsp;&emsp;公钥：从私钥中提取产生，可以公开给所有人<br>&emsp;&emsp;私钥：通过算法创建，使用者自己保留，以保证其私密性<br>&emsp;&emsp;特点：使用公钥加密的数据，只能使用对应的私钥解开<br>&emsp;&emsp;用途：数字签名，主要用于让接收方确认发送方的身份<br>&emsp;&emsp;密钥交换：发送方用对方的公钥加密一个对称密钥，并发送给对方<br>&emsp;&emsp;算法：RSA（只能签名，不能加解密），DSA（签名和加解密），ELGamal（商业的）  </p><p>单向加密：即提取数据特征码<br>&emsp;&emsp;特性：定长输出、雪崩效应<br>&emsp;&emsp;功能：校验数据的完整性<br>&emsp;&emsp;算法：md5 、sha1 、sha224 、sha256等  </p><p>密钥交换：IKE<br>&emsp;&emsp;公钥加密DH<br>&emsp;&emsp;ECDH（椭圆曲线DH），ECDHE（临时椭圆曲线DH）<br>&emsp;&emsp;DH算法的实现<br>&emsp;&emsp;&emsp;&emsp;A：p,g<br>&emsp;&emsp;&emsp;&emsp;B：p,g<br>&emsp;&emsp;&emsp;&emsp;A：x&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;生成密钥x<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—&gt;p^y%g==&gt;B  将与x计算出的结果发送给B<br>&emsp;&emsp;&emsp;&emsp;   A：(p^y%g)^x=p^yx%g  计算得到密钥<br>&emsp;&emsp;&emsp;&emsp;B：y&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B生成密钥y<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—&gt;p^y%g==&gt;A  将与y计算结果发送给A<br>&emsp;&emsp;&emsp;&emsp;   B：(p^x%g)^y=p^xy%g  计算得到密钥  </p><p>PKI：（公钥基础设施）<br>&emsp;&emsp;签证机构：CA<br>&emsp;&emsp;注册机构：RA<br>&emsp;&emsp;证书吊销列表：CRL<br>&emsp;&emsp;证书存取库：CB  </p><p>X.509v3：定义了证书的结构以及认证协议标准<br>&emsp;&emsp;版本号<br>&emsp;&emsp;签名算法ID<br>&emsp;&emsp;发行者名称<br>&emsp;&emsp;有效期、等等  </p><p>SSL：安全套接字层<br>&emsp;&emsp;由网景公司于1994年开发<br>&emsp;&emsp;版本：V1.0，V2.0，V3.0  </p><p>TLS：传输层安全，二者基本上兼容<br>&emsp;&emsp;IETF组织1999年发行<br>&emsp;&emsp;版本：V1.0，V1.1，V1.2，V1.3<br>&emsp;&emsp;目前建议使用的是V1.2版<br>&emsp;&emsp;TLS本身也采用了分层设计：<br>&emsp;&emsp;&emsp;&emsp;1、最底层：基础算法原语的实现，aes，rsa，md5<br>&emsp;&emsp;&emsp;&emsp;2、向上一层：各种算法的实现<br>&emsp;&emsp;&emsp;&emsp;3、再向上一层：组合算法实现的半成品<br>&emsp;&emsp;&emsp;&emsp;4、最上层：用各种组件拼装而成的各种成品密码学协议软件  </p><p>此两种协议的开源实现方式：OpenSSL<br>&emsp;&emsp;OpenSSL分为三种<br>&emsp;&emsp;&emsp;&emsp;libencrypto库：加密解密库<br>&emsp;&emsp;&emsp;&emsp;libssl库：实现ssl安全通信机制的库<br>&emsp;&emsp;&emsp;&emsp;openssl：多用途命令行工具  </p><p>SSL会话主要有三步：<br>&emsp;&emsp;一、客户端向服务端索要并验证证书<br>&emsp;&emsp;二、双方协商生成“会话密钥”<br>&emsp;&emsp;三、双方采用“会话密钥”进行加密通信  </p><p>SSL握手<br>&emsp;&emsp;第一阶段：客户端请求<br>&emsp;&emsp;&emsp;&emsp;支持的协议版本，如tls1.2<br>&emsp;&emsp;&emsp;&emsp;客户端生成一个随机数，稍后用于生成“会话密钥”<br>&emsp;&emsp;&emsp;&emsp;支持的加密算法，如AES、3DES、RSA<br>&emsp;&emsp;&emsp;&emsp;支持的压缩算法<br>&emsp;&emsp;第二阶段：服务端回应<br>&emsp;&emsp;&emsp;&emsp;确认使用的加密通信协议版本，如tls1.2<br>&emsp;&emsp;&emsp;&emsp;服务器端生成一个随机数，稍后用于生成“会话密钥”<br>&emsp;&emsp;&emsp;&emsp;确认使用的加密方法<br>&emsp;&emsp;&emsp;&emsp;服务器证书<br>&emsp;&emsp;第三阶段：<br>&emsp;&emsp;&emsp;&emsp;验证服务器证书，在确认无误后取出其公钥（发证机构、证书的完整性、证书持有者、有效期、吊销列表）<br>&emsp;&emsp;&emsp;&emsp;验证后发送一下信息给服务端一个随机数（目的是为了安全）<br>&emsp;&emsp;&emsp;&emsp;编码变更通知，表示随后的信息都将使用双方商定的加密方法和密钥发送<br>&emsp;&emsp;&emsp;&emsp;客户端握手结束通知&emsp;&emsp;<br>&emsp;&emsp;第四阶段：<br>&emsp;&emsp;&emsp;&emsp;收到客户端发来的第三个随机数后，计算生成本次会话所用到的“会话密钥”<br>&emsp;&emsp;&emsp;&emsp;向客户端发送如下信息：<br>&emsp;&emsp;&emsp;&emsp;编码变更通知，表示随后的信息都将使用双方商定的加密方法和密钥发送服务端握手结束通知  </p><p>对称加密：<br>&emsp;&emsp;加密：<code>openssl enc [-e] -des3 [-a -salt] -in file -out file.m</code><br><img src="/medias/drawing-bed/openssl/0.png"><br>&emsp;&emsp;解密：<code>openssl enc -d -des3 [-a -salt] -in file.m -out file1</code><br><img src="/medias/drawing-bed/openssl/1.png"><br>选项：<br>&emsp;&emsp;<code>-e</code>：加密使用<br>&emsp;&emsp;<code>-d</code>：解密使用<br>&emsp;&emsp;<code>-des3</code>：加密算法<br>&emsp;&emsp;<code>-a</code>：文本编码格式<br>&emsp;&emsp;<code>-salt</code>：加盐  </p><p>单向加密：<br>&emsp;&emsp;<code>openssl dgst -md5 file</code>（获取文件的md5特征码）<br><img src="/medias/drawing-bed/openssl/2.png"><br>&emsp;&emsp;<code>md5sum file</code>（释义同上）<br><img src="/medias/drawing-bed/openssl/3.png"><br>&emsp;&emsp;算法md5、sha1、sha224等<br><img src="/medias/drawing-bed/openssl/4.png"></p><p>生成用户密码：<br>&emsp;&emsp;<code>openssl passwd -1 [-salt az]</code>（-1指定md5，-salt加盐，即随机数）<br><img src="/medias/drawing-bed/openssl/5.png"><br><img src="/medias/drawing-bed/openssl/6.png"><br>（不加盐，输入同样的密码，打印出的结果不同）  </p><p>生成随机数：<br>&emsp;&emsp;<code>openssl rand -hex #</code>（生成16进制随机数，打印字节数是给定的数字的2倍）<br><img src="/medias/drawing-bed/openssl/7.png"><br>（给同样的数，每次打印出的结果不同）<br>&emsp;&emsp;<code>openssl rand -base64 #</code>（使用base64编码）<br><img src="/medias/drawing-bed/openssl/8.png"><br>（打印结果为4N，不足4N用 = 号补位，命令行每按顺序+3次，打印结果循环一次，即打印4(N+1）位，释义：命令行给3N+1，打印两个 = ；命令行给3N+2，打印一个 = ；命令行给3N+3，打印零个  = ）<br>生成私钥：<br>&emsp;&emsp;<code>(umask 077;openssl genrsa -out file.s)</code>或<code>(umask 077;openssl genrsa -out file.s -des 1024)</code>加密的私钥（括号是为了和外边的shell环境隔离,使给定的umask值有效）<br><img src="/medias/drawing-bed/openssl/9.png"><br><img src="/medias/drawing-bed/openssl/10.png"><br>提取公钥：<br>&emsp;&emsp;<code>openssl rsa -in file.s -pubout -out file.g</code><br>选项：<br>&emsp;&emsp;<code>-pubout</code>：指明提取公钥<br><img src="/medias/drawing-bed/openssl/11.png"></p><p>公钥加密：<br>&emsp;&emsp;<code>openssl rsautl -encrypt -in testfile -inkey file.g -pubin -out tsetfile.m</code><br>私钥解密：<br>&emsp;&emsp;<code>openssl rsautl -decrypt -in testfile.m -inkey file.s -out file2</code><br>选项：<br>&emsp;&emsp;<code>rsautl</code>：算法<br>&emsp;&emsp;<code>-encrypt</code>：加密使用<br>&emsp;&emsp;<code>-decrypt</code>：解密使用<br>&emsp;&emsp;<code>-inkey</code>：指定密钥<br>&emsp;&emsp;<code>-pubin</code>：表明是纯公钥加密<br><img src="/medias/drawing-bed/openssl/12.png"></p><p>CA：<br>&emsp;&emsp;公共信任的CA，私有CA<br>&emsp;&emsp;建立私有CA，openssl命令：<br>&emsp;&emsp;配置文件：<code>/etc/pki/tls/openssl.cnf</code><br>在确定配置为CA的服务器上生成一个自签证书，并为CA提供所需要的目录及文件即可<br>实现步骤：<br>&emsp;&emsp;1.生成私钥：<br>&emsp;&emsp;<code>(umask 077;openssl genrsa -out /etc/pki/CA/private/cakey.pem 4096)</code><br><img src="/medias/drawing-bed/openssl/13.png"><br>&emsp;&emsp;2.生成自签证书：<br>&emsp;&emsp;<code>openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -out /etc/pki/CA/cacert.pem -days 365</code><br><img src="/medias/drawing-bed/openssl/14.png"><br>&emsp;&emsp;选项：<br>&emsp;&emsp;&emsp;&emsp;<code>req</code>：证书请求即证书生成工具<br>&emsp;&emsp;&emsp;&emsp;<code>-new</code>：生成新证书签署请求<br>&emsp;&emsp;&emsp;&emsp;<code>-x509</code>：生成自签格式的证书，专用于创建私有CA时<br>&emsp;&emsp;&emsp;&emsp;<code>-key</code>：生成请求时用到的私有文件路径<br>&emsp;&emsp;&emsp;&emsp;<code>-out</code>：生成的请求文件路径；如果自签操作将直接生成签署过的证书<br>&emsp;&emsp;&emsp;&emsp;<code>-days</code>：证书的有效时长，单位为天<br>&emsp;&emsp;3.为CA提供所需的目录及文件<br>&emsp;&emsp;&emsp;&emsp;<code>mkdir -pv /etc/pki/CA/&#123;certs,crl,newcerts&#125;</code><br>&emsp;&emsp;&emsp;&emsp;<code>touch /etc/pki/CA/&#123;serial,index.txt&#125;</code><br>&emsp;&emsp;&emsp;&emsp;<code>echo 01 &gt; /etc/pki/CA/serial</code><br><img src="/medias/drawing-bed/openssl/15.png"></p><p>要用到证书进行安全通信的服务器，需要向CA请求签署证书<br>&emsp;&emsp;步骤：（以httpd为例）<br>&emsp;&emsp;4.用到证书的主机生成私钥（要认证机构）<br>&emsp;&emsp;<code>mkdir /etc/httpd/ssl;cd /etc/httpd/ssl</code><br>&emsp;&emsp;<code>(umask 077;openssl genrsa -out /etc/httpd/ssl/httpd.key 2048)</code><br><img src="/medias/drawing-bed/openssl/16.png"><br>&emsp;&emsp;5.生成证书签署请求（要认证机构）<br>&emsp;&emsp;<code>openssl req -new -key /etc/httpd/ssl/httpd.key -out /etc/httpd/ssl/httpd.csr -days 365</code><br><img src="/medias/drawing-bed/openssl/17.png"><br>&emsp;&emsp;6.将请求通过可靠的方式发送给CA主机（要认证机构）<br>&emsp;&emsp;<code>scp /etc/httpd/ssl/httpd.csr root@ip:/tmp/</code><br><img src="/medias/drawing-bed/openssl/18.png"><br>&emsp;&emsp;7.在CA主机上签署证书<br>&emsp;&emsp;<code>openssl ca -in /tmp/httpd.csr -out /etc/pki/CA/certs/httpd.crt -days 365</code><br><img src="/medias/drawing-bed/openssl/19.png"><br><img src="/medias/drawing-bed/openssl/20.png"></p><p>查看证书中的信息：<br>&emsp;&emsp;<code>openssl x509 -in /etc/pki/CA/certs/httpd.crt/ -noout -subject</code><br><img src="/medias/drawing-bed/openssl/21.png"></p><p>吊销证书：<br>&emsp;&emsp;步骤：<br>&emsp;&emsp;1.客户端获取要吊销的证书的seral（在使用证书的主机上执行）<br>&emsp;&emsp;<code>openssl x509 -in /etc/pki/CA/certs/httpd.crt -noout -serial -subject</code>（可省略）<br>&emsp;&emsp;2.CA主机吊销证书：<br>&emsp;&emsp;&emsp;&emsp;先根据客户提交的serial和subject信息，对比其与本机数据库index.txt中存储的是否一致<br>&emsp;&emsp;吊销：<br>&emsp;&emsp;&emsp;&emsp;<code>openssl ca -revoke /etc/pki/CA/newcerts/证书序列号.pem</code><br><img src="/medias/drawing-bed/openssl/22.png"><br>&emsp;&emsp;3.生成吊销证书的吊销编号（只在第一次吊销证书时执行）<br>&emsp;&emsp;&emsp;&emsp;<code>echo 01 &gt; /etc/pki/CA/crlnumber</code><br><img src="/medias/drawing-bed/openssl/23.png"><br>&emsp;&emsp;4.更新证书吊销列表<br>&emsp;&emsp;&emsp;&emsp;<code>openssl ca -gencrl -out thisca.crl</code><br><img src="/medias/drawing-bed/openssl/24.png"><br>&emsp;&emsp;&emsp;&emsp;查看crl文件：<br>&emsp;&emsp;&emsp;&emsp;<code>openssl crl -in thisca.crl -noout -text</code><br><img src="/medias/drawing-bed/openssl/25.png"><br><code>$( )</code> 和 <code>``</code> 可以读取里面的命令结果  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk</title>
      <link href="/posts/c137.html"/>
      <url>/posts/c137.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="awk介绍"><a href="#awk介绍" class="headerlink" title="awk介绍"></a>awk介绍</h1><p>awk是一种处理文本的编程语言工具，报告生成器，格式化文本输出<br>版本：<code>new awk</code>（<code>nawk</code>），<code>GUN awk</code>（<code>gawk</code>）<br>gawk - 模式扫描和处理语言  </p><h1 id="awk基本用法"><a href="#awk基本用法" class="headerlink" title="awk基本用法"></a>awk基本用法</h1><p><code>awk [选项] &#39;program&#39; -v var=value file</code>（<code>-v</code>选项，自定义变量var）<br><code>awk [选项] -f programfile</code>（将<code>program</code>写入文件中）<code>var=value file</code><br><code>awk [选项] &#39;BEGIN&#123;动作;处理内容&#125; 模式&#123;动作;处理内容&#125; END&#123;动作;处理内容&#125;&#39; 文件名</code>  </p><p>awk程序通常由：<code>BEGIN语句块</code>、能够使用模式匹配的<code>通用语句块</code>、<code>END语句块</code>，共三部分组成<br>program（程序）通常是在单引号或双引号中  </p><p>选项：<br><code>-F</code>指明输入时用到的字段分隔符<br><code>-v var=value</code>自定义变量  </p><p>基本格式：<code>awk [options] &#39;program&#39; file</code><br>program：<code>pattern&#123;action;要处理的内容&#125;</code>  </p><h2 id="pattern和action"><a href="#pattern和action" class="headerlink" title="pattern和action"></a>pattern和action</h2><p><code>pattern</code>部分决定动作语句何时触发事件<code>BEGIN</code>，<code>END</code>，<code>正则表达式</code>（模式）<br><code>action statements</code>对数据进行处理，放在 <code>&#123; &#125;</code> 内指明<code>print</code>，<code>printf</code>  </p><h2 id="分隔符、域和记录"><a href="#分隔符、域和记录" class="headerlink" title="分隔符、域和记录"></a>分隔符、域和记录</h2><p>awk执行时，由分隔符分隔的字段<code>域</code>标记<code>$1</code>,<code>$2</code>,<code>$3...</code> <code>$n</code>称为<code>域标识</code>，<code>$0</code>为<code>所有域</code>，注意：和<code>shell</code>中变量<code>$</code>符含义不同<br>文件的每一行称为记录<br>省略<code>action</code>行，则默认执行<code>print $0</code>（打印所有）的操作  </p><h2 id="awk工作原理"><a href="#awk工作原理" class="headerlink" title="awk工作原理"></a>awk工作原理</h2><p>第一步：执行<code>BEGIN&#123;action;处理内容&#125;</code>语句块中的语句（可省）<br>第二步：从文件或标准输入（<code>stdin</code>）读取一行，然后执行<code>pattern&#123;action;处理内容&#125;</code>语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕<br>第三步：当读至输入流末尾时，执行<code>END&#123;action;处理内容&#125;</code>语句块<br><code>BEGIN</code>语句块在<code>awk</code>开始从输入流中读取之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常写在<code>BEGIN</code>语句块中<br><code>END</code>语句块在<code>awk</code>从输入流中读取完所有的行之后即可被执行，比如打印所有行的分析结果这类信息汇总都是在<code>END</code>语句块中完成，它也是一个可选语句块<br><code>pattern</code>语句块中的通用命令是最重要的部分，也是可选的，如果没有提供<code>pattern</code>语句块，则默认执行<code>&#123;print&#125;</code>，即打印每一个读取到的行，<code>awk</code>读取的每一行都会执行该语句块<br><code>print</code>格式：<code>print item1，item2...</code>（<code>item</code>：条目）  </p><p>要点：  </p><ol><li>逗号分隔符  </li><li>输出的各<code>item</code>可以是<code>字符串</code>，也可以是<code>数值</code>；当前记录的字段、变量或<code>awk</code>的表达式  </li><li>如省略<code>item</code>，相当于<code>print $0</code>  </li></ol><p>示例：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '&#123;print "hello,awk"&#125;'</span>hello,awk<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '&#123;print&#125;' /etc/passwd  </span>root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '&#123;print "###"&#125;' /etc/passwd  </span><span class="token comment">###</span><span class="token comment">###</span><span class="token comment">###</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print $1&#125;' /etc/passwd  </span>rootbindaemon<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print $0&#125;' /etc/passwd  </span>root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print $1"\t"$3&#125;' /etc/passwd  </span>root<span class="token number">0</span>bin<span class="token number">1</span>daemon<span class="token number">2</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># tail -3 /etc/fstab | awk '&#123;print $2,$4&#125;' </span>/ defaults/boot defaultsswap defaults<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="awk变量"><a href="#awk变量" class="headerlink" title="awk变量"></a>awk变量</h1><p>变量：内置和自定义变量<br>FS：指定输入分隔符，不指定默认为空白字符  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -v FS=':' '&#123;print $1,$3,$7&#125;' /etc/passwd  </span>root <span class="token number">0</span> /bin/bashbin <span class="token number">1</span> /sbin/nologindaemon <span class="token number">2</span> /sbin/nologin<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print $1,$3,$7&#125;' /etc/passwd  </span>root <span class="token number">0</span> /bin/bashbin <span class="token number">1</span> /sbin/nologindaemon <span class="token number">2</span> /sbin/nologin<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OFS：为输出字段指定分隔符，默认为空白字符  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -v FS=':' -v OFS=':' '&#123;print $1,$3,$7&#125;' /etc/passwd  </span>root:0:/bin/bashbin:1:/sbin/nologindaemon:2:/sbin/nologin<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RS：输入行分隔符，指定输入时的换行符，原换行符仍然有效  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -v RS='0' '&#123;print&#125;' /etc/passwd  </span>root:x:<span class="token builtin class-name">:</span>:root:/root:/bin/bash<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ORS：输出时用指定符号代替换行符  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -v RS=':' -v ORS='##' '&#123;print&#125;' /etc/passwd   # 指定：为换行符，用##替换前面的换行符</span>root<span class="token comment">##x##0##0##root##/root##/bin/bash</span>bin<span class="token comment">##x##1##1##bin##/bin##/sbin/nologin</span>daemon<span class="token comment">##x##2##2##daemon##/sbin##/sbin/nologin </span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NF：字段数量（指明分割符，每行分几段）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print NF&#125;' /etc/fstab   # 引用内置变量不用$  </span><span class="token number">0</span><span class="token number">1</span><span class="token number">1</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print $(NF-1)&#125;' /etc/passwd   # 以：为分割符，打印倒数第二域 </span>/root/bin/sbin<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NR：打印行号  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '&#123;print NR&#125;' /etc/fstab ; awk END'&#123;print NR&#125;' /etc/fstab  </span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FNR：各文件分别计数，行号（竖着显示行号）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '&#123;print FNR&#125;' /etc/fstab /etc/inittab   # 先计数fstab再从头计数inittab  </span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FILENAME：当前文件名  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '&#123;print FILENAME&#125;' /etc/fstab  </span>/etc/fstab/etc/fstab/etc/fstab<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ARGC：命令行参数的个数  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '&#123;print ARGC&#125;' /etc/fstab /etc/inittab  </span><span class="token number">3</span><span class="token number">3</span><span class="token number">3</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print ARGC&#125;' /etc/fstab /etc/inittab  </span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ARGV：数组，保存的是命令行所给定的各参数（0为第一个参数，1为第二个参数，以此类推）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print ARGV[0]&#125;' /etc/fstab /etc/inittab  </span><span class="token function">awk</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print ARGV[1]&#125;' /etc/fstab /etc/inittab  </span>/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><ol><li><code>-v var=value</code>变量名区分大小写  </li><li>在<code>program</code>中直接定义  </li></ol><p>示例：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -v test='hello gawk' '&#123;print tast&#125;' /etc/fstab  </span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -v test='hello gawk' 'BEGIN&#123;print test&#125;'  </span>hello <span class="token function">gawk</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;test="hello gawk";print test&#125;'  </span>hello <span class="token function">gawk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="awk格式化"><a href="#awk格式化" class="headerlink" title="awk格式化"></a>awk格式化</h1><p><code>printf</code>命令<br>格式输出：<code>printf &quot;FORMAT&quot;,item1,item2…</code><br>必须指定<code>FORMAT</code>（格式）<br>不会自动换行，需要显示给出换行控制符 <code>\n</code><br><code>FORMAT</code>中需要分别为后面每个<code>item</code>指定格式符<br>格式符：与<code>item</code>一一对应<br><code>%d</code>,<code>%i</code>：显示十进制整数<br><code>%s</code>：显示字符串<br><code>%%</code>：显示<code>%</code>自身  </p><p>修饰符<br><code>#</code>：打印<code>#</code>个字符宽度（可以为小数）<br><code>-</code>：左对齐<code>%-15s</code>（默认不带 <code>-</code> 右对齐）<br><code>+</code>：显示数值的正负符号<code>%+d</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;printf "%s",$1&#125;' /etc/passwd  </span>rootbindaemonadmlpsyncshutdownhaltmailoperatorgamesftpnobodydbussystemd-coredumpsystemd-resolvetsspolkitdlibstoragemgmtcockpit-wscockpit-wsinstancesssdsshdchronyrngdunboundnginx<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment">#   </span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;printf "USERNAME:%s\n",$1&#125;' /etc/passwd  </span>USERNAME:rootUSERNAME:binUSERNAME:daemon<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;printf "USERNAME:%s UID:%d\n",$1,$3&#125;' /etc/passwd  </span>USERNAME:root <span class="token environment constant">UID</span>:0USERNAME:bin <span class="token environment constant">UID</span>:1USERNAME:daemon <span class="token environment constant">UID</span>:2<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;printf "USERNAME:%15s UID:%d\n",$1,$3&#125;' /etc/passwd  </span>USERNAME:           root <span class="token environment constant">UID</span>:0USERNAME:            bin <span class="token environment constant">UID</span>:1USERNAME:         daemon <span class="token environment constant">UID</span>:2<span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;printf "USERNAME:%-15s UID:%d\n",$1,$3&#125;' /etc/passwd  </span>USERNAME:root            <span class="token environment constant">UID</span>:0USERNAME:bin             <span class="token environment constant">UID</span>:1USERNAME:daemon          <span class="token environment constant">UID</span>:2<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="awk操作符"><a href="#awk操作符" class="headerlink" title="awk操作符"></a>awk操作符</h1><h2 id="算数操作符："><a href="#算数操作符：" class="headerlink" title="算数操作符："></a>算数操作符：</h2><p><code>x+y</code>,<code>x-y</code>,<code>x*y</code>,<code>x/y</code>,<code>x^y</code>,<code>x%y</code>（<code>x%y</code>，即<code>x÷y</code>取余数）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 1+2&#125;'</span><span class="token number">3</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 1-2&#125;'</span>-1<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 1*2&#125;'</span><span class="token number">2</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 1/2&#125;'</span><span class="token number">0.5</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 1^2&#125;'</span><span class="token number">1</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 1%2&#125;'</span><span class="token number">1</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 3%2&#125;'</span><span class="token number">1</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 3%1&#125;'</span><span class="token number">0</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;print 5%3&#125;'</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>-x</code>：转换为负数（<code>-</code>用双引号引起来，可以在0前面加上<code>-</code>号）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print -$3&#125;' /etc/passwd</span><span class="token number">0</span>-1-2<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>+x</code>：转换为数值（同<code>-</code>，可以用<code>&quot; &quot;</code>引起来）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '&#123;print +$3&#125;' /etc/passwd</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串操作符：没有符号的操作符，字符串连接"><a href="#字符串操作符：没有符号的操作符，字符串连接" class="headerlink" title="字符串操作符：没有符号的操作符，字符串连接"></a>字符串操作符：没有符号的操作符，字符串连接</h2><h2 id="赋值操作符："><a href="#赋值操作符：" class="headerlink" title="赋值操作符："></a>赋值操作符：</h2><p><code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code>，<code>^=</code>，<code>++</code>，<code>--</code>（<code>++</code>每次加1，<code>--</code>每次减1）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;a=1;print a++,a&#125;'</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;a=1;print a--,a&#125;'</span><span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;a=1;print --a,a&#125;'</span><span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk 'BEGIN&#123;a=1;print ++a,a&#125;'</span><span class="token number">2</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="比较操作符："><a href="#比较操作符：" class="headerlink" title="比较操作符："></a>比较操作符：</h2><p><code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>!=</code>，<code>==</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3 > 999&#123;print $3&#125;' /etc/passwd</span><span class="token number">65534</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3 >= 999&#123;print $3&#125;' /etc/passwd</span><span class="token number">65534</span><span class="token number">999</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3 &lt; 3&#123;print $3&#125;' /etc/passwd</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3 &lt;= 3&#123;print $3&#125;' /etc/passwd</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3 != 2&#123;print $3&#125;' /etc/passwd</span><span class="token number">0</span><span class="token number">1</span><span class="token number">3</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3 == 2&#123;print $3&#125;' /etc/passwd</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模式匹配符："><a href="#模式匹配符：" class="headerlink" title="模式匹配符："></a>模式匹配符：</h2><p><code>~</code>：左边包含右边匹配到的内容<br><code>!~</code>：左边不包含右边匹配到的内容  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '$0 ~ /root/&#123;print&#125;' /etc/passwd   # 支持正则表达式</span>root:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/passwd | awk '$0 !~ /^root/'</span>bin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologin<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p>或 <code>||</code>，与 <code>&amp;&amp;</code>，非<code>!</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3>=0 &amp;&amp; $3&lt;=3&#123;print $1,$3&#125;' /etc/passwd</span>root <span class="token number">0</span>bin <span class="token number">1</span>daemon <span class="token number">2</span>adm <span class="token number">3</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3==0 || $3&lt;=3&#123;print $1,$3&#125;' /etc/passwd</span>root <span class="token number">0</span>bin <span class="token number">1</span>daemon <span class="token number">2</span>adm <span class="token number">3</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '!($3>=3)&#123;print $1,$3&#125;' /etc/passwd</span>root <span class="token number">0</span>bin <span class="token number">1</span>daemon <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>PATTERN</code>：根据<code>pattern</code>条件，过滤匹配的行，再做处理<br>如果未指定：空模式，匹配每一行<br><code>/正则表达式/</code>：仅处理能够被模式匹配到的行，需要用 <code>/ /</code> 括起来  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '/^UUID/&#123;print $1&#125;' /etc/fstab</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>8b1f186e-ffcb-4b8e-a9e2-caba58a3a850<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk '!/^UUID/&#123;print $1&#125;' /etc/fstab</span><span class="token punctuation">..</span>./dev/mapper/cl-root/dev/mapper/cl-swap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关系表达式：结果有”真”有”假”；结果为”真”才会被处理；<br>真：结果为非0值，非空字符串<br>假：结果为空字符串<br>示例：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$3>1000&#123;print $1,$3&#125;' /etc/passwd</span>nobody <span class="token number">65534</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '$NF~/bash$/&#123;print $1,$NF&#125;' /etc/passwd</span>root /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>line ranges</code>：行范围<br><code>startline,endline</code>：<code>/pat1/,/pat2/</code>不支持直接给出数字格式  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '/^root/,/^lp/&#123;print $1&#125;' /etc/passwd</span>rootbindaemonadmlp<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: '(NR>=2&amp;&amp;NR&lt;=5)&#123;print $1&#125;' /etc/passwd</span>bindaemonadmlp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BEGIN/END</code>模式<br><code>BEGIN&#123;&#125;</code>：仅在开始处理文件中的文本之前执行一次<br><code>END&#123;&#125;</code>：仅在文本处理完成之后执行一次  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: 'BEGIN&#123;print "USER UID"&#125;(NR>=2&amp;&amp;NR&lt;=4)&#123;print $1":"$3&#125;END&#123;print "end file"&#125;' /etc/passwd</span><span class="token environment constant">USER</span> <span class="token environment constant">UID</span>bin:1daemon:2adm:3end <span class="token function">file</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/passwd | head -3 | awk -F: '&#123;print "USER UID";print $1":"$3&#125;END&#123;print "end file"&#125;'</span><span class="token environment constant">USER</span> <span class="token environment constant">UID</span>root:0<span class="token environment constant">USER</span> <span class="token environment constant">UID</span>bin:1<span class="token environment constant">USER</span> <span class="token environment constant">UID</span>daemon:2end <span class="token function">file</span><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: 'BEGIN&#123;print "USER UID \n ---------"&#125;&#123;print $1,$3&#125;' /etc/passwd</span><span class="token environment constant">USER</span> <span class="token environment constant">UID</span>  ---------root <span class="token number">0</span>bin <span class="token number">1</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># awk -F: 'BEGIN&#123;print "USER UID \n ---------"&#125;&#123;print $1,$3&#125;'END'&#123;print "========="&#125;' /etc/passwd</span><span class="token environment constant">USER</span> <span class="token environment constant">UID</span>  ---------root <span class="token number">0</span><span class="token punctuation">..</span>.nginx <span class="token number">990</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络</title>
      <link href="/posts/9e95.html"/>
      <url>/posts/9e95.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="查看及测试网络"><a href="#查看及测试网络" class="headerlink" title="查看及测试网络"></a>查看及测试网络</h1><h2 id="查看网络："><a href="#查看网络：" class="headerlink" title="查看网络："></a>查看网络：</h2><p>使用ifconfig命令查看网络接口<br>（1）查看活动的网络接口信息（<code>ifconfig</code>）<br>（2）查看所有的网络接口信息（<code>ifconfig -a</code>）<br>（3） 查看指定网络接口信息（<code>ifconfig 网络接口名</code>）  </p><p>直接使用ifconfig命令，查询出的是已激活的网卡列表信息，参数<br>eth0：第一块网卡<br>lo：回环，用于某些服务的测试<br>Hwaddr：网络接口的物理地址（MAC地址）<br>inet addr：网络接口的ip地址<br>Bacast：网络接口所在网络的广播地址<br>Mask：网络接口的子网掩码  </p><p>使用<code>ip</code>/<code>ethtool</code>命令查看网络接口<br>（1）查看所有网络接口的数据链路层信息<br>（2）查看所有网络接口的网络层信息<br>（3）查看指定网络接口的速率、模式等信息<br><code>ip link</code>查看网络接口信息，不显示ip地址<br><code>ip addr</code>查看网络接口的详细信息，可以加show选项，查看指定网络接口信息<br><code>ethtool网络接口名</code>：查看指定网络接口的速率、模式等信息  </p><h2 id="route命令"><a href="#route命令" class="headerlink" title="route命令"></a>route命令</h2><p>使用route命令查看路由表条目<br>linux系统中的路由表决定着本机向其他主机或其他网络发送数据的去向，是排除网络故障的关键信息  </p><p>直接执行route命令<br>查看主机的路由表信息：<br>目标网段的地址<br>Gateway：下一跳路由的地址<br>Genmask：子网掩码<br>Flags：标记当前网络节点状态<br>Metric：路由距离、跳数（linux内核中没有使用）<br>Ref：路由项引用次数（linux内核中没有使用）<br>Use：该路由被使用的次数，可以粗略估计通向指定网络地址的网络流量<br>Iface：发送数据的网络接口，如eth0  </p><p>当目标网段为“Default”时，表示此行时默认网关记录；当下一跳为“*”时，表示目标网段与本机相连的时候，不需要路由器<br>选项：<br><code>-n</code>：可以将路由记录中的地址显示为数字形式，这样可以跳过解析主机名的过程，在路由表条目较多时能够加快执行速度。  </p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>使用<code>netstat</code>命令查看网络连接情况<br>选项：<br><code>-a</code>显示当前主机中所有活动的网络连接信息<br><code>-n</code>以数字形式显示相关信息<br><code>-r</code>显示路由表信息<br><code>-t</code>显示TCP协议相关信息<br><code>-u</code>显示UDP协议相关信息<br><code>-p</code>显示与网络连接相关的进程号、进程名称信息（要root权限）<br><code>-l</code>显示处于监听状态的网络连接及端口信息  </p><p>常用组合：<br><code>-anpt</code>以数字形式显示当前系统中的所有的TCP连接信息，同时显示对应的进程号  </p><p>查看某一个服务，使用grep过滤<br><code>netstat -anpt|grep sshd</code>（可以是服务名或进程号）  </p><p>查询结果中各项的意思：<br>proto：协议<br>Recv-Q：接收的包的个数<br>Send-Q：发送的包的个数<br>local Address：本地ip地址<br>Foreign Address：远端ip地址<br>state：状态<br>PID/program name：PID号/进程名称<br>在state列中：<br>LISTEN：监听状态<br>BSTABLISHED：已连接状态  </p><h2 id="ss命令"><a href="#ss命令" class="headerlink" title="ss命令"></a>ss命令</h2><p><code>ss</code>命令：类似<code>netstat</code><br>常见用法：<br><code>-l</code>显示本地打开的所有端口<br><code>-pl</code>显示每个进程打开的socket<br><code>-atu</code>显示所有的TCP、UDP协议的socket<br><code>-atpl</code>显示所有处于监听状态的TCP协议socket  </p><p>（补充：n以数字格式显示，p显示端口）  </p><h2 id="测试网络连接"><a href="#测试网络连接" class="headerlink" title="测试网络连接"></a>测试网络连接</h2><p>traceroute命令的格式<br><code>traceroute ip|网址</code>  </p><p>nslookup命令的格式<br><code>nslookup 网址</code> [DNS服务器地址]  </p><h1 id="设置网络地址参数"><a href="#设置网络地址参数" class="headerlink" title="设置网络地址参数"></a>设置网络地址参数</h1><h2 id="使用ifconfig命令修改网卡的地址、状态"><a href="#使用ifconfig命令修改网卡的地址、状态" class="headerlink" title="使用ifconfig命令修改网卡的地址、状态"></a>使用ifconfig命令修改网卡的地址、状态</h2><p>在linux主机中，手动修改网络配置包括两种最基本的方法：<br>临时修改：通过命令行直接修改当前正在使用的网络地址，修改后立即生效，这种方式简单快捷，一般在调试网络的过程中使用，但由于所做的修改并没有固定的存放在静态的文件中，因此当重启network服务或重启主机后将失效<br><code>ifconfig eth0 192.168.0.1/24</code>（或<code>ifconfig eth0 192.168.0.4 netmask 255.255.255.0</code>）  </p><p><code>ifconfig eth0 up</code> 开启eth0（ifdown eth0）<br><code>ifconfig eth0 down</code> 关闭eth0（ifup eth0）<br><code>ifconfig eth0:0 192.168.0.2</code> 为网卡绑定虚拟接口（多用于调试）  </p><p>固定配置：通过配置文件来存放固定的各种网络地址，需要重启network服务或重启主机后才会生效，这种方式是永久配置，一般在需要为服务器设置固定的网络地址时使用  </p><h2 id="使用route命令添加、删除静态路由"><a href="#使用route命令添加、删除静态路由" class="headerlink" title="使用route命令添加、删除静态路由"></a>使用route命令添加、删除静态路由</h2><p>通过route add操作可以添加路由记录，结合“-net”选项指定目标网段的地址，结合“gw”选项指定下一跳路由器的ip地址<br>添加格式：route add -net 目标网段地址 gw 下一跳路由ip/本机跳出ip<br>例如：<code>route add -net 172.18.16.0/24 gw 192.168.0.2</code>  </p><p>删除格式：route del -net 目标网段地址<br>例如：<code>route del -net 172.18.16.0/24</code>  </p><p>添加、删除默认网关记录（默认网关是一条特殊的静态路由）<br>与添加、删除静态路由类似，但指定目标网段时只需要简单的使用“default”表示即可，无须再使用“-net”选项指明网段地址<br>格式：<code>route|grep default</code>先查看原路由表中的默认网关地址  </p><p>删除：<code>route del default [gw 192.168.0.1]</code>（或<code>route del -net 192.168.0.1</code>）  </p><p>网络接口的配置文件默认位于<code>/etc/sysconfig/network-srcipts/</code>目录中，文件名命名方式为“ifcfg-xxx”其中“xxx”是网络接口的名称<br>例如：网卡eth0的配置文件是“ifcfg-eth0”，回环接口lo的配置文件是“ifcfg-lo”  </p><p>ifcfg-xxx文件中常用配置项的含义及作用<br>DEVICE：设置网络接口的名称<br>ONBOOT：设置网络接口是否在linux系统启动时激活<br>BOOTPROTO：设置网络接口的配置方式，分为“static（静态）”和“dhcp（动态）”<br>IPADDR：设置网络接口的ip地址<br>NETMASK：设置网络接口的子网掩码<br>GATEWAY：设置网络接口的默认网关地址<br>UUID：网关的UUID编号<br>HWADDR：网卡的MAC地址  </p><p>设置完重启网卡<br>启用、禁用网络接口配置：<br>重启network服务使新的配置生效  </p><p>如果只禁用某一个网络接口<br><code>ifup 网卡名</code><br><code>ifdown 网卡名</code>  </p><p>主机名称配置文件<br>若要修改主机名可以使用<code>hostname</code>命令，临时修改，重启失效<br>永久配置，修改配置文件<br><code>/etc/sysconfig/network</code><br>NETWORKING：用于设置IPV4网络默认启用状态<br>HOSTNAME：用于设置主机名  </p><p>域名解析配置文件<br>（1）指定为本机提供DNS解析的服务器地址的文件<br>编辑<code>/etc/resolv.conf</code>文件，指定三个不同的DNS服务器，优先使用第一个DNS服务器<br>添加<code>nameserver 114.114.114.114</code>  </p><p>（2）本地主机映射文件<br><code>/etc/hosts</code>文件中记录着一份主机名与ip地址的映射关系表，当访问一个未知域名时，先查询hosts文件中是否有相应的映射记录，如果有就使用，没有再去找DNS服务器进行查询（省去去DNS服务器解析域名）<br>设置方式：<br>打开<code>/etc/hosts</code>文件，添加：<code>123.125.114.144 www.baidu.com</code><br>（域名可以设置别名）  </p><h2 id="网卡接口配置：bonding"><a href="#网卡接口配置：bonding" class="headerlink" title="网卡接口配置：bonding"></a>网卡接口配置：bonding</h2><p>bonding是一种linux系统下的网卡绑定技术，可以把服务器上n个物理网卡在系统内部抽象成一个逻辑上的网卡，能够提升网络吞吐量、实现网络冗余、负载等功能，有很多优势。<br>bonding技术是是linux系统内核层面实现的，它是一个内核模块（驱动）。使用它需要系统有这个模块。<br><code>modinfo bonding</code>查看bonding的信<br><code>modprobe bonding</code>将bonding模块加载到linux内核  </p><p>bonding的工作模式：<br>mode0<br>轮转，从头到尾的顺序在每一个slave接口上发送数据包（bond的网卡有一个损坏，bond就损坏）<br>mode1<br>主备，bond的所有网卡中，只有一个slave被激活（被激活的slave损坏，下一个slave顶上）<br>mode3<br>广播，在所有的slave接口上传送所有的报文。有容错能力  </p><p>bonding配置<br>1、添加bonding模块（xshell连接不上虚拟机，需要执行<code>modprobe -r bonding</code>将bonding模块移除）<br><code>modprobe bonding</code><br>2、关闭NetworkManager服务<br><code>service NetworkManager stop</code><br>3、创建bond0<br><code>vim /etc/sysconfig/network-scripts/ifcfg-bond0</code><br>（miimon是用来进行链路检测的，如果miimon=100，那么系统每100ms检测一次链路连接状态，如果有一条线路不通就转入另一条线路）<br>4、配置真实网卡 <code>eth0</code> <code>eth1</code> 添加以下内容  </p><pre class="line-numbers language-none"><code class="language-none">DEVICE&#x3D;eth0TYPE&#x3D;EthernetONBOOT&#x3D;yesBOOTPROTO&#x3D;noneMASTER&#x3D;bond0SLAVE&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">DEVICE&#x3D;eth1TYPE&#x3D;EthernetONBOOT&#x3D;yesBOOTPROTO&#x3D;noneMASTER&#x3D;bond0SLAVE&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、添加网卡驱动  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/modprobe.d/bonding.conf<span class="token builtin class-name">alias</span> bond0 bonding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、启动网络服务<br><code>service network start</code><br>删除bond0  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> bond0 downrmmod bonding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引导程序</title>
      <link href="/posts/b24e.html"/>
      <url>/posts/b24e.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="引导程序与服务控制"><a href="#引导程序与服务控制" class="headerlink" title="引导程序与服务控制"></a>引导程序与服务控制</h1><p>Linux组成：kernel+rootfs<br>kernel内核：功能：进程管理、内存管理、网络管理、驱动程序、文件系统、安全功能  </p><p>rootfs根文件系统：包括程序和glibc<br>（glibc：是GUN发布的libc库，即c运行库。几乎其它任何运行库都会依赖于glibc）  </p><p>库：函数集合，function，调用接口（头文件负责描述）<br>过程调用：procedure，无返回值<br>函数调用：function  </p><p>程序：二进制执行文件  </p><p>内核设计流派：<br>单内核：Linux<br>把所有功能集成于同一个程序<br>微内核：Windows<br>每种功能使用一个单独子系统实现  </p><p>Linux内核特点：<br>支持模块化：*.ko（内核对象）（在/lib/modules/发布版本/kernel/目录下存放）  </p><p>如：文件系统，硬件驱动，网络协议等<br>支持内核模块的动态装载和卸载<br><img src="/medias/drawing-bed/bootstrap/0.png"></p><p>Linux内核组成部分：核心文件和ramdisk<br>核心文件：/boot/vmlinuz-发布版本（version-release发布版本）<br><img src="/medias/drawing-bed/bootstrap/1.png"></p><p>ramdisk：辅助的伪根系统<br>CentOS 5：/boot/initrd-version-release.img<br>CentOS 6，7：/boot/initramfs-version-release.img （6，7上的伪根系统）<br><img src="/medias/drawing-bed/bootstrap/2.png"></p><h1 id="CentOS-6的启动流程"><a href="#CentOS-6的启动流程" class="headerlink" title="CentOS 6的启动流程"></a>CentOS 6的启动流程</h1><ol><li>加载BIOS的硬件信息，获取第一个启动设备  </li><li>读取第一个启动设备MBR的引导加载程序（grub）的启动信息  </li><li>加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备  </li><li>核心执行init程序，并获取默认的运行信息  </li><li>init程序执行/etc/rc.d/rc.sysinit文件  </li><li>启动核心的外挂模块  </li><li>init执行运行的各个批处理文件（scripts）  </li><li>init执行/etc/rc.d/rc.local  </li><li>执行/bin/login程序，等待用户登录  </li><li>登录之后开始以shell控制主机  </li></ol><h2 id="具体流程："><a href="#具体流程：" class="headerlink" title="具体流程："></a>具体流程：</h2><h3 id="1-POST加电自检"><a href="#1-POST加电自检" class="headerlink" title="1. POST加电自检"></a>1. POST加电自检</h3><p>按下电源键后ROM芯片中的CMOS程序执行并检测CPU、内存等设备是否存在并正常运行，CMOS中的程序叫BIOS，可以设置硬盘接口，网卡声卡开关之类的简单设置。一般主板上有一个纽扣电池，这个电池就是给ROM供电的，可以保证主板断电后BIOS的一些基本设置不会重置。  </p><h3 id="2-引导加载次序Boot-Sequence"><a href="#2-引导加载次序Boot-Sequence" class="headerlink" title="2. 引导加载次序Boot Sequence"></a>2. 引导加载次序Boot Sequence</h3><p>在系统启动前计算机是不知道你系统是在哪里的，需要按照设备启动顺序一次查找引导加载器BootLoader，这个查找次序可以自己在BIOS中设定，一般在boot选项中设置。  </p><h3 id="3-引导加载器BootLoader"><a href="#3-引导加载器BootLoader" class="headerlink" title="3. 引导加载器BootLoader"></a>3. 引导加载器BootLoader</h3><p>前面说了计算机是不知道系统在哪里的，所以需要程序进行引导，这个引导的程序就叫BootLoader，不同操作系统的BootLoader是不同的，Windows使用的BootLoader程序是ntloader，只能对Windows进行引导不能对其它系统进行引导，而Linux的BootLoader叫GRUB，可以对其它操作系统进行引导（包括Windows），正是因为这样，所以在装有Windows又有Linux的双系统的时候，需要先装Windows，再装Linux。<br>功能：提供一个菜单，允许用户选择要启动系统或不同内核版本；把用户选定的内核装载到内存中的特定空间中，解压、展开，并把系统控制权移交给内核。<br>BootLoader的引导程序GRUB放在MBR中。<br>GRUB：分三个阶段（1和1.5和2）<br>1、运行BootLoader主程序，MBR的前446字节；<br>1.5、文件系统识别程序放在MBR后面的扇区中，用于识别2所在分区的文件系统；<br>2、通过BootLoader加载所有配置文件及相关的环境参数信息，这些配置文件及相关的环境参数都存放于磁盘分区上的/boot目录下  </p><h3 id="4-引导加载器程序GRUB"><a href="#4-引导加载器程序GRUB" class="headerlink" title="4. 引导加载器程序GRUB"></a>4. 引导加载器程序GRUB</h3><p><code>grub legacy</code><br>前面提到的GRUB是BootLoader阶段的一个程序，这是CentOS中最常见的引导程序，CentOS 6安装的是<code>grub legacy</code><br><img src="/medias/drawing-bed/bootstrap/3.png"></p><p>按e：进入编辑模式，用于编辑菜单<br><img src="/medias/drawing-bed/bootstrap/4.png"></p><p>按c：进入命令模式，交互式接口<br><img src="/medias/drawing-bed/bootstrap/5.png"></p><p>常用配置：<br><code>default=#</code>：设定默认启动的菜单项；落单项title编号从0开始<br><code>timeout=#</code>：指定菜单项等待选项选择的时长<br><code>kernel /PATH/TO/VMLINUZ_FILE</code>：启动的内核<br><code>password --md5 STRING</code>：启动选定的内核或操作系统时进行认证  </p><h3 id="5-进入kernel"><a href="#5-进入kernel" class="headerlink" title="5. 进入kernel"></a>5. 进入kernel</h3><p>在GRUB中选择对应的kernel进入，然后kernel会对自身进行初始化<br>探测可识别到的所有硬件设备<br>加载硬件驱动程序<br>以只读方式挂载根文件系统<br>运行用户空间的第一个应用程序，在CentOS 6上是init，在CentOS 7上是systemd<br>kernel：内核核心，一般为bzimage，通常在/boot目录下，名称为vmlinuz-version-release<br>kernel object：内核对象，一般放置于<code>/lib/modules/version-release/</code>  </p><h3 id="6-运行init"><a href="#6-运行init" class="headerlink" title="6. 运行init"></a>6. 运行init</h3><p>CentOS 6上init所在的位置是在/sbin/init，init共分为7个级别<br>0关机<br>1单用户模式（root无须登录），single，维护模式<br>2多用户模式，会启动网络功能，但不会启动NFS，维护模式<br>3多用户模式，正常模式，字符终端<br>4预留级别，可同3级<br>5多用户模式，正常模式，图形界面<br>6重启  </p><p><code>runlevel</code>和<code>who -r</code> 可以查看当前系统运行的init级别<br><code>runlevel</code>命令：第一个字符，上次所在级别；第二个字符，当前所在级别<br><img src="/medias/drawing-bed/bootstrap/6.png"></p><p><code>vim /etc/inittab</code>（最后一行，修改运行级别，重启后运行修改后的级别）<br><img src="/medias/drawing-bed/bootstrap/7.png"><br><img src="/medias/drawing-bed/bootstrap/8.png"></p><h3 id="7-运行系统初始化脚本"><a href="#7-运行系统初始化脚本" class="headerlink" title="7. 运行系统初始化脚本"></a>7. 运行系统初始化脚本</h3><p>系统初始化脚本对应的文件是<code>/etc/rc.d/rc.sysinit</code><br><img src="/medias/drawing-bed/bootstrap/9.png"></p><h3 id="8-启动系统服务"><a href="#8-启动系统服务" class="headerlink" title="8. 启动系统服务"></a>8. 启动系统服务</h3><p>CentOS 6下的系统服务脚本都放在/etc/init.d中，可以看到两个文件中的内容是一样的，因为/etc/init.d链接到了/etc/rc.d/init.d中<br><img src="/medias/drawing-bed/bootstrap/10.png"><br><img src="/medias/drawing-bed/bootstrap/11.png"></p><p>通过chkconfig命令可以查看什么系统级别下开启了哪些服务，以及添加服务到系统中并在指定级别下启动<br><code>chkconfig --list</code>：查看什么系统级别下开启了哪些服务<br><img src="/medias/drawing-bed/bootstrap/12.png"></p><p><code>chkconfig --add 服务名</code>：添加服务到系统中并在指定级别下启动（？？在添加的时候需要将对应的服务放入放入/etc/init.d中，并在服务脚本中加入chkconfig：LLLL nn nn）<br>写到LLLL的init级别就是S的，没写的就是K的，第一个nn代表S的数字，第二个nn代表K的数字？？？<br><code>chkconfig --del 服务名</code>：删除服务<br><img src="/medias/drawing-bed/bootstrap/13.png"></p><p>（注意：正常级别下，最后启动一个服务<code>S99local</code>没有链接至<code>/etc/rc.d/init.d</code>一个服务脚本，而是指向了<code>/etc/rc.d/rc.local</code>脚本；因此，不便或不需要写为服务脚本放置于<code>/etc/rc.d/init.d/</code>目录，且又想开机时自动运行的命令，可直接放置于<code>/etc/rc.d/rc.local</code>文件中）  </p><h3 id="9-系统在启动完服务后会打印登录提示符，然后输入账号密码，进入对应的命令行界面或图行界面。"><a href="#9-系统在启动完服务后会打印登录提示符，然后输入账号密码，进入对应的命令行界面或图行界面。" class="headerlink" title="9. 系统在启动完服务后会打印登录提示符，然后输入账号密码，进入对应的命令行界面或图行界面。"></a>9. 系统在启动完服务后会打印登录提示符，然后输入账号密码，进入对应的命令行界面或图行界面。</h3><p>init进程<br>由Linux内核加载运行<code>/sbin/init</code>程序完成的，是系统中的第一个进程，所有进程的父进程，PID号永远为1<br><code>upstart</code> 启动方式<br>将初始化配置分散存放，响应不同的启动事件（就是不会再去读取所有的初始化配置文件，而是有什么样的事件，就把响应的配置文件读取出来生效）<br>配置文件：<code>/etc/inittab</code>，<code>/etc/init/*.conf</code><br>CentOS 6 <code>/etc/inittab</code>和相关文件<br><code>/etc/inittab</code><br>设置系统默认的运行级别<br>id：级别：initdefault：  </p><p><code>/etc/init/control-alt-delete.conf</code><br>控制终端下的Ctrl+Alt+Del热键操作  </p><p><code>/etc/init/tty.conf</code><br>控制tty终端的开启  </p><p><code>/etc/init/start-ttys.conf</code><br>配置tty终端的开启数量，设备文件  </p><p><code>/etc/init/rc.conf</code><br>兼容脚本，负责各运行级别的调用处理  </p><p><code>/etc/inittab</code>文件结构<br>字段：说明（最后一行）<br>id：一个任务的标识符<br>runlevels：在哪些级别启动此服务，也可以为空，表示所有级别<br>action：用于描述在什么条件下启动<br>process：用于设置启动进程所执行的命令<br>服务控制及切换运行级别<br>服务的启动停止是通过<code>/etc/rc.d/rc3.d/</code>下的所有链接文件来决定如何启动或关闭服务的  </p><p><code>/etc/rc.d/rc3.d</code>下的所有链接文件其实都是在<code>/etc/init.d/</code>下面的所有脚本，这些脚本接受至少四个基本参数（启动start、关闭stop、重启restart、服务状态status、重新加载reload）  </p><h1 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h1><p>service 服务名 参数<br>例：<code>service httpd stop</code>  </p><p>查看及切换运行级别<br>查看运行级别：<br><code>runlevel</code>  </p><p>临时切换运行级别：<br><code>init #</code>（0-6）  </p><p>chkconfig工具<br>通过chkconfig命令来管理服务<br>控制某服务在某服务在某种运行级别中的开启/关闭状态<br><code>chkconfig --level 级别 服务 on|off</code> （默认级别为2345）   </p><p>查看服务在对应级别的状态：<br><code>chkconfig --list 服务</code>  </p><p>添加服务：<br><code>chkconfig --add 服务</code>  </p><p>删除服务：<br><code>chkconfig --del 服务</code>  </p><h1 id="Grub管理"><a href="#Grub管理" class="headerlink" title="Grub管理"></a>Grub管理</h1><p>GRUB配置文件：<code>/boot/grub/grub.conf</code>   </p><p>每行内容：<br>Default：设定默认启动的内核和操作系统，如果同时按装了多个操作系统或内核，0表示定义的第一个title系统，1表示定义的第二个title系统，依次类推  </p><p>Timeout：设定系统启动时选择操作系统菜单的等待时间（秒）<br>Splashimage：设定系统启动时grub菜单的背景图片。图片格式为xpm，14bits颜色，大小为640x480，需要gzip压缩<br>Hiddenmenu：隐藏选择菜单，默认情况下是不显示菜单信息，如果想要显示菜单，将该配置注释即可<br>Title：定义一个操作系统或系统内核<br>Root：指明引导当前操作系统或内核文件所在的分区<br>Kernel：指定文件路径、根文件系统所在设备，以及传递给内核的参数。由于启动过程中需要挂载根目录，因此需要指定根目录所在的分区。内核参数rhgb表示色彩显示，quiet表示静默模式加载内核<br>Initrd：指定用于辅助内核完成系统启动的ramdisk文件路径  </p><p>GRUB菜单加密保护<br>默认进入GRUB菜单后不需要密码就可以进行编辑，相对来说比较危险，修改grub.conf配置文件为GRUB菜单设置密码保护，在grub.conf文件中的title字段上面新增一行<code>password --md5 ****</code>（md5加密）  </p><p>可以使用<code>grub-md5-crypt</code>生成md5加密的密码  </p><p>加密后再次进入GRUB菜单时编辑须按“p”输入GRUB密码，才能编辑<br><img src="/medias/drawing-bed/bootstrap/14.png"><br>（按“p”输入密码）<br><img src="/medias/drawing-bed/bootstrap/15.png"></p><h1 id="启动排错"><a href="#启动排错" class="headerlink" title="启动排错"></a>启动排错</h1><p>破解root口令<br>两种方法：<br>方法一：通过单用户模式（init 1|s）进行破解<br>GRUB菜单时按e→s或1→回车，按b<br><img src="/medias/drawing-bed/bootstrap/16.png"><br>（按e）<br><img src="/medias/drawing-bed/bootstrap/17.png"><br>（按e）<br><img src="/medias/drawing-bed/bootstrap/18.png"><br>（按空格，输入s或1回车）<br><img src="/medias/drawing-bed/bootstrap/19.png"><br>（按b进入单用户模式，默认root登录）<br><img src="/medias/drawing-bed/bootstrap/20.png"><br><img src="/medias/drawing-bed/bootstrap/21.png"><br>（输入passwd更改root密码）<br>方法二：通过救援模式破解<br>进入救援模式后执行以下命令<br><img src="/medias/drawing-bed/bootstrap/22.png"><br>（开机按F2进入BIOS）<br><img src="/medias/drawing-bed/bootstrap/23.png"><br>（通过左右键选择boot目录）<br><img src="/medias/drawing-bed/bootstrap/24.png"><br>（通过+/-将CD-ROM移到第一个）<br><img src="/medias/drawing-bed/bootstrap/25.png"><br>（按F10保存退出）<br><img src="/medias/drawing-bed/bootstrap/26.png"><br>（选择Rescue installed system回车）<br><img src="/medias/drawing-bed/bootstrap/27.png"><br>（一路回车，遇到Setup networking选No回车）<br><img src="/medias/drawing-bed/bootstrap/28.png"><br>（接着一路回车，进入bash-4.1#）<br>chroot /mnt/sysimage 将目录结构切换到待修复的Linux系统中<br><img src="/medias/drawing-bed/bootstrap/29.png"><br>（进入sh-4.1#）<br>passwd root更改root密码（输入新密码）<br><img src="/medias/drawing-bed/bootstrap/30.png"><br>exit退出到bash-4.1#<br><img src="/medias/drawing-bed/bootstrap/31.png"><br>reboot重启<br><img src="/medias/drawing-bed/bootstrap/32.png"><br>更改引导方式启动即可（将CD-ROM移到下面即可，重启）<br><img src="/medias/drawing-bed/bootstrap/33.png"><br>修复MBR扇区故障<br>如果引导过程出现故障，Linux是无法启动的<br>第一个MBR扇区中放置了grub引导程序和分区表<br>故障原因：病毒、木马等造成的破坏；不正确的分区操作、磁盘读写误操作<br>故障现象：找不到引导程序，启动中断；无法加载操作系统、开机后黑屏；提示“Operating System not found”<br>解决思路：应提前做好备份文件；以光盘引导进入急救模式；从备份文件中恢复<br>实例：<br>1、备份MBR扇区数据（注意：要备份到另一块硬盘中）<br><code>mkdir /backup</code> 创建挂载点<br><code>mount /dev/sdb /backup</code> 挂载/dev/sdb到/backup<br>使用dd命令备份<br><code>dd if=/dev/sda of=/backup/mbr.bak bs=512或446 count=1</code><br>2、模拟MBR扇区故障<br><code>dd if=/dev/zero of=/dev/sda bs=512或446 count=1</code>  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理</title>
      <link href="/posts/2b2d.html"/>
      <url>/posts/2b2d.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h1><p>内核的作用：进程管理、文件系统、网络功能、内存管理、驱动程序、安全功能等<br>Process（进程）：运行中的程序的一个副本，是被载入内存的一个指令集合<br>程序被触发后，执行者的权限与属性、程序的代码所需资料都会被载入到内存中，操作系统给予这些内存单元一个识别码（pid），可以说，进程就是一个正在运作的程序。  </p><h2 id="进程存在生命周期"><a href="#进程存在生命周期" class="headerlink" title="进程存在生命周期"></a>进程存在生命周期</h2><p>Program（程序）：通常为binary program , 放置在存储媒介中，（如硬盘，光盘等），以实体文件的形态存在。<br>Thread（线程）：是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是行程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并行多个线程，每条线程并行执行不同的任务。<br>一般，线程具有就绪、阻塞和运行三种基本状态  </p><h2 id="进程创建："><a href="#进程创建：" class="headerlink" title="进程创建："></a>进程创建：</h2><p>init ：第一个进程<br>“父子关系”<br>进程都是由其父进程创建，由COW技术实现（写时复制）（即程序为“父子关系”时，其子进程未运行时，父进程只对子进程标记，子进程运行时，才会复制子进程所需的运行文件到/porc/PID下）  </p><h2 id="进程优先级："><a href="#进程优先级：" class="headerlink" title="进程优先级："></a>进程优先级：</h2><p>系统优先级：数字越小，优先级越高<br>0-139（CentOS4,5）：各有140个运行队列和过期队列<br>0-98,99（CentOS6）<br>实时优先级：99-0：值最大优先级最高<br>Nice值：-20到19对应系统优先级100-139（CentOS4,5）或99（CentOS6）  </p><h2 id="进程相关概念"><a href="#进程相关概念" class="headerlink" title="进程相关概念"></a>进程相关概念</h2><h3 id="进程内存："><a href="#进程内存：" class="headerlink" title="进程内存："></a>进程内存：</h3><p>Page Frame ：页框，用于存储页面数据，存储Page 4K（内存有大小，最小的存储为Page 4K）<br>LRU ：近期最少使用算法：释放内存物理地址空间（实际使用的内存空间RSS）和线性地址空间（允许使用的内存空间VSZ）（通过LRU算法将不经常使用的、老的进程放到swap分区）<br>MMU：负责转换线性地址和物理地址（记录了进程的线性空间和物理空间大小）<br>IPC：进程间通讯<br>同一主机上：<br>signal：发信号<br>shm：共享内存（进程同时使用一块内存）<br>semophore：信号量，一种计数器（可以对访问的资源加锁）：多个进程访问文件时，进程可以对访问的文件加锁，其它进程不能访问该文件。<br>不同主机上：<br>rpc：进程间远程调用（unix）<br>socket：IP和端口号<br><code>netstat -ntpl</code>（netstat用于显示网络状态）（-a可以查看所有连线中的socket）  </p><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p>Linux内核：抢占式多任务（进程在内存中“排队”，前面的进程运行完，后面的进程会立刻运行）  </p><h3 id="进程类型："><a href="#进程类型：" class="headerlink" title="进程类型："></a>进程类型：</h3><p>守护进程（daemon）：在系统引导过程中启动的进程，和终端无关<br>前台进程：跟终端相关，通过终端启动的进程<br>注意：两者可以相互转化（通过命令，可以将前台进程放到后台）  </p><h3 id="进程状态："><a href="#进程状态：" class="headerlink" title="进程状态："></a>进程状态：</h3><p>执行<code>ps aux</code>命令STAT栏可查看进程状态  </p><p>R：运行态：running，正在运行<br>&emsp;&emsp;就绪态：ready<br>&emsp;&emsp;睡眠态：<br>S：可中断：interruptable<br>D：不可中断：uninterruptable<br>T：停止态：stopped，暂停于内存中，但不会被调用，除非手动启动<br>Z：僵死态：zombie，结束进程，父进程结束前，子进程不关闭（父进程关闭子进程未关）  </p><h2 id="系统管理工具"><a href="#系统管理工具" class="headerlink" title="系统管理工具"></a>系统管理工具</h2><p>进程的分类：<br>&emsp;&emsp;CPU-Bound ：CPU密集型，非交互<br>&emsp;&emsp;IO-Bound ：IO密集型，交互<br>Linux系统状态的查看及管理工具：<code>pstree</code>、<code>ps</code>、<code>pidof</code>、<code>pgrep</code>、<code>top</code>、<code>pmap</code>、<code>vmstat</code>、<code>dstat</code>、<code>kill</code>、<code>pkill</code>、<code>job</code>、<code>bg</code>、<code>fg</code>、<code>nohup</code><br><code>pstree</code>：命令，显示正在运行的程序树（父子关系图）<br><code>pstree -p</code>：显示进程的pid  </p><p>ps：显示进程状态<br><code>ps 选项</code><br>Linux系统各进程的相关信息均保存在/proc/PID目录下的各文件中<br>列举进程ps<br>适用ps来查看进程信息（回车时刻，瞬间）<br>支持选项：UNIX选项 如-A -e<br>默认显示当前终端中的进程<br><code>a</code>：所有终端中的进程<br><code>x</code>：包括不链接终端的进程（守护进程）<br><code>u</code>：显示所有者信息<br><code>f</code>：显示进程的父进程<br><code>o</code>：属性…：显示定制信息（如pid、comm、%cpu、%mem、state、tty、euser、ruser、nice）  </p><p><code>ps aux</code> 每个字段的意思<br>| USER           | PID             | %CPU          | %MEM           | VSZ                   | RSS                   | TTY     | STAT         | START               | TIME           | COMMAND             |<br>| :————- | :————– | :———— | :————- | :——————– | :——————– | :—— | :———– | :—————— | :————- | :—————— |<br>| 进程拥有者user | 任务进程的IDpid | CPU占用率%cpu | 内存使用率%mem | 许诺的运行内存大小vsz | 实际使用的内存大小rss | 终端tty | 进程状态stat | 进程开始的时间start | 执行的时间time | 所执行的指令command |</p><p>进程状态stat：详细：<br>R：正在运行<br>S：可中断的睡眠<br>D：不可中断的睡眠<br>T：停止态<br>Z：僵死态<br>+：前台进程<br>l：多线程进程<br>N：低优先级进程<br>&lt;：高优先级进程<br>s：session leader，会话（子进程）发起者<br>常用组合：<code>-ef</code><br>| UID    | PID    | PPID     | C               | STIME                | TTY                                        | TIME            | CMD          |<br>| :—– | :—– | :——- | :————– | :——————- | :—————————————– | :————– | :———– |<br>| 用户名 | 进程ID | 父进程ID | 进程占CPU百分比 | 进程启动到现在的时间 | 该进程在哪个终端上运行（？代表与终端无关） | 使用掉的CPU时间 | 命令名和参数 |</p><p><code>-e</code>：显示所有进程<br><code>-f</code>：显示完整格式程序信息<br>常用组合：<code>-eFH</code><br>| UID    | PID    | PPID     | C               | SZ                       | RSS                    | PSR                                | STIME                | TTY                                        | TIME            | CMD          |<br>| :—– | :—– | :——- | :————– | :———————– | :——————— | :——————————— | :——————- | :—————————————– | :————– | :———– |<br>| 用户名 | 进程ID | 父进程ID | 进程占CPU百分比 | 进程的核心印象的页面大小 | 进程实际使用的内存大小 | 绑定内核线程的处理器的逻辑处理器号 | 进程启动到现在的时间 | 该进程在哪个终端上运行（？代表与终端无关） | 使用掉的CPU时间 | 命令名和参数 |</p><p><code>-F</code>：显示更完整格式的进程信息<br><code>-H</code>：以进程层级格式显示进程相关信息<br>常用组合：<code>aux</code> 、<code>axo</code>（有o选项需要在后面指明参数）  </p><h1 id="进程及系统相关工具"><a href="#进程及系统相关工具" class="headerlink" title="进程及系统相关工具"></a>进程及系统相关工具</h1><p>ni：nice值<br>pri：priority优先级<br>psr：processor CPU编号<br>rtprio：实时优先级  </p><h2 id="搜索进程"><a href="#搜索进程" class="headerlink" title="搜索进程"></a>搜索进程</h2><p>最灵活：<code>ps 选项 | 其它命令</code><br>按预定义的模式：<code>pgrep</code><br><code>pgrep 选项 模式</code><br><code>-u</code>：用户名/ID ：生效用户<br><code>-U</code>：用户名/ID ：命令发起者<br><code>-t</code>：终端：与指定终端相关的进程<br><code>-l</code>：显示进程名<br><code>-a</code>：显示完整格式的进程名（CentOS7）<br><code>-P pid</code>：显示指定进程的子进程  </p><h2 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h2><p><code>uptime</code>：显示当前时间，系统已启动的时间、当前上线人数，系统平均负载（1、5、15分钟的平均负载，一般不会超过1）<br>系统平均负载：指定在特定时间间隔内运行队列中的平均进程数<br>如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能良好。<br>如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。<br>如果Linux主机是1个双核CPU的话，当load average为6的时候说明机器已经被充分使用了。  </p><h2 id="进程管理工具"><a href="#进程管理工具" class="headerlink" title="进程管理工具"></a>进程管理工具</h2><p><code>top</code>：有许多内置命令：<br>排序：<br><code>P</code>：以占据的CPU百分比，%CPU<br><code>M</code>：占据内存百分比，%MEM<br><code>T</code>：累积占据CPU时长，TIME+  </p><p>首部信息显示：<br><code>uptime</code>信息：<code>l</code>命令<br>tasks及cpu信息：<code>t</code>命令<br>cpu分别显示1（数字）<br>memory信息：<code>m</code>命令<br>退出命令：<code>q</code><br>修改刷新时间间隔：<code>s</code><br>终止指定进程：<code>k</code><br>保存文件：<code>w</code>  </p><h3 id="top栏位信息简介"><a href="#top栏位信息简介" class="headerlink" title="top栏位信息简介"></a>top栏位信息简介</h3><p>第一行：系统运行时间<br>系统当前时间、系统已运行时间、当前登录系统的用户数量、系统负载（1,5,15分钟的平均值）  </p><p>第二行：运行进程相关<br>所有启动的进程数、正在运行的进程数、挂起的进程数、停止的进程数、僵死进程数  </p><p>第三行：CPU相关<br>用户空间占CPU百分比、内核空间占CPU百分比、调整过nice时间的进程占CPU百分比、空闲CPU百分比、等待IO占CPU的百分比、CPU服务于硬中断时间所占百分比、CPU服务于软中断时间所占百分比、被虚拟机偷走时间的百分比  </p><p>第四行：内存相关<br>物理内存总量、已用物理内存、空闲物理内存、内核缓存内存量  </p><p>第五行：交换分区相关<br>交换分区总量、已使用交换分区总量、空闲交换分区总量、缓冲的交换分区总量白色块：具体进程信息  </p><table><thead><tr><th align="left">PID</th><th align="left">USER</th><th align="left">PR</th><th align="left">NI</th><th align="left">VIRT</th><th align="left">RES</th><th align="left">SHR</th><th align="left">S</th><th align="left">%CPU</th><th align="left">%MEM</th><th align="left">TIME+</th><th align="left">COMMAND</th></tr></thead><tbody><tr><td align="left">进程ID</td><td align="left">进程所有者user</td><td align="left">优先级pr</td><td align="left">nice值</td><td align="left">进程使用的虚拟内存总量virt</td><td align="left">进程使用的,未被换出的物理内存大小res</td><td align="left">共享内存大小shr</td><td align="left">进程状态s</td><td align="left">上次更新到现在的CPU时间占用百分比%cpu</td><td align="left">进程使用的物理内存百分比%mem</td><td align="left">进程使用CPU总时间time+</td><td align="left">命令名，命令行command</td></tr></tbody></table><h3 id="内存工具"><a href="#内存工具" class="headerlink" title="内存工具"></a>内存工具</h3><p>vmstat 命令：虚拟内存信息<br><code>vmstat -s</code>：显示内存的统计数据<br><code>vmstat 2 5</code>：间隔2秒，信息刷新5次  </p><p>procs：<br>r：等待运行的进程的个数，和核心数有关<br>b：处于不可中断睡眠态的进程个数（被阻塞的队列的长度）  </p><p>memory：<br>swpd：交换内存的使用总量<br>free：空闲物理内存总量<br>buffer：用于buffer的内存总量<br>cache：用于cache的内存总量  </p><p>swap：<br>si：从磁盘交换进内存的数据速率kb/s<br>so：从内存交换至磁盘的数据速率kb/s  </p><p>io：<br>bi：从块设备读入数据到系统的速率kb/s<br>bo：保存数据至块设备的速率kb/s  </p><p>system：<br>in：中断速率，包括时钟<br>cs：进程切换速率  </p><p>cpu：<br>us：用户进程执行时间百分比<br>sy：内核系统进程执行时间百分比<br>id：空闲时间百分比<br>wa：IO等待时间百分比<br>st：虚拟内存偷走时间百分比  </p><h3 id="进程管理工具-1"><a href="#进程管理工具-1" class="headerlink" title="进程管理工具"></a>进程管理工具</h3><p>按PID：<code>kill pid</code><br>按名称：<code>killall 进程名</code><br>按模式：<code>pkill 选项 模式</code><br><code>pkill -u 用户名/uid</code>：生效者<br><code>pkill -U 用户名/uid</code>：进程发起者<br><code>pkill -t 终端</code>：与指定终端相关的进程  </p><h3 id="作业管理"><a href="#作业管理" class="headerlink" title="作业管理"></a>作业管理</h3><p>Linux的作业控制<br>前台作业：通过终端启动，且启动后一直占据终端<br>后台作业：可通过终端启动，但启动后即转入后台运行（释放终端）<br>Ctrl+z ：运行中的作业放到后台（停止态）<br>命令 &amp; ：未启动的作业放到后台运行（和Ctrl+z有区别）  </p><p>（[1] dd命令Ctrl+z [2] dd命令 &amp; [3] cat 命令Ctrl+z [4] cat命令 &amp; ）<br>后台作业虽然被送往后台运行，但其依然与终端相关；退出终端，将关闭后台作业。如果希望送往后台后，剥离与终端的关系使用<br>nohup 命令 &amp;  </p><h3 id="查看所有作业："><a href="#查看所有作业：" class="headerlink" title="查看所有作业："></a>查看所有作业：</h3><p><code>jobs</code>、<code>jobs -l</code>显示更详细<br>作业控制：<br><code>fg #</code>：把指定的后台作业调回前台<br><code>bg #</code>：送往后台的作业继续运行<br><code>kill %#</code>：终止指定的作业  </p><p>进程优先级<br>进程优先级调整：<br>静态优先级：100-139<br>进程默认启动时的nice值为0，优先级为120<br>只有根用户才能调低nice值（提高优先级）  </p><p><code>nice</code>命令：<br><code>nice 选项 命令</code> （未运行的命令）<br>例：<code>nice -n -5 ping 127.0.0.1</code>（将命令ping 127.0.0.1的nice值调为-5）  </p><p><code>renice</code>命令：<br><code>renice</code>选项 PID（运行中的命令）<br>例：<code>renice -n -20 1234</code>（将指定PID号的进程，nice值调整为-20）  </p><p><code>ps axo pid,comm,ni</code> ：查看pid，命令，nice值  </p><h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>linux 任务计划、周期性任务执行<br>未来的某时间点执行任务：<code>at</code><br>周期性运行某任务：<code>cron</code>  </p><h2 id="at任务"><a href="#at任务" class="headerlink" title="at任务"></a>at任务</h2><p><code>at命令：at [option] TIME</code><br>常用选项：<br><code>-V</code>：显示版本信息<br><code>-l</code>：列出指定队列中等待运作的作业，相当于<code>atq</code><br><code>-d</code>：删除指定的作业，相当于<code>atrm</code><br><code>-c</code>：查看具体作业任务<br><code>-f file</code>：从指定文件中读取任务<br><code>-m</code>：当任务被完成之后，将给用户发送邮件，即使没有标准输出  </p><p>注意：作业执行命令的结果中的标准输出和错误以邮件通知给相关用户<br>TIME：定义出什么时候进行<code>at</code>这项任务的时间<br><code>HH:MM [YYYY-mm-dd]</code><br><code>noon,midnight,teatime(4pm)</code><br><code>tomorrow</code><br><code>now+#&#123;minutes,hours,days,OR weeks&#125;</code>  </p><p><code>at</code>时间格式<br><code>HH:MM 02:00</code><br>在今日的<code>HH:MM</code>进行，若时刻已过，则明天此时执行任务<br><code>HH:MM YYYY-MM-DD 04:00 2016-09-20</code><br>规定在某年某月的某一天的特殊时刻进行该项任务<br><code>HH:MM[am|pm] [month] [date]</code><br><code>04pm march 17</code><br><code>17:20 tomorrow</code>  </p><p><code>HH:MM[am|pm] + number [minutes|hours|days|weeks]</code><br>在某个时间点再加几个时间后才进行该项任务<br><code>now + 5 minutes</code><br><code>04pm + 3 days</code>  </p><p>执行方式：  </p><ol><li>交互式  </li><li>输入重定向  </li><li><code>at -f 文件</code>  </li></ol><p>依赖与<code>atd</code>服务，需要启动才能实现<code>at</code>任务<br>通过<code>/etc/at.&#123;allow,deny&#125;</code>控制用户是否能执行<code>at</code>任务，先寻找<code>/etc/at.allow</code>找，不存在就寻找<code>/etc/at.deny</code>这个文件，若写在这个<code>at.deny</code>用的使用者则不能使用<code>at</code>，而没有在这个<code>at.deny</code>文件的使用者则可使用<code>at</code>命令，如果两个文件都不存在，则只有<code>root</code>可以使用<code>at</code>这个命令  </p><h2 id="周期性计划任务cron"><a href="#周期性计划任务cron" class="headerlink" title="周期性计划任务cron"></a>周期性计划任务cron</h2><p>相关的程序包：<br><code>cronie</code>：主程序包，提供<code>crond</code>守护进程及相关辅助工具<br><code>cronie-anacron</code>：<code>cronie</code>的补充程序，用于监控<code>cronie</code>任务执行状况，如<code>cronie</code>中的任务在过去该运行的时间点未能正常运行，则<code>anacron</code>会随后启动一次此任务<br><code>crontabs</code>：包含<code>CentOS</code>提供系统维护任务<br>确保<code>crond</code>守护处于运行状态<br><code>service crond status</code><br>计划周期性执行的任务交给<code>crond</code>，到指定时间会自动运行<br>系统<code>cron</code>任务：系统维护作业<br><code>/etc/crontab</code><br>用户<code>cron</code>任务：<br><code>crontab</code>命令<br>日志：<code>/var/log/cron</code><br>系统<code>cron</code>任务：<code>/etc/crontab</code><br>注释行以<code>#</code>开头  </p><p><code>* * * * *（分时日月周）</code><br><code>*</code>表示”每”<br><code>* * * * *</code>每一分钟执行一次周期任务<br><code>2 * * * *</code>每小时02分执行一次周期任务<br><code>0 2 * * *</code>每天2点0分执行一次周期任务<br><code>0 0 */3 * *</code>每3天整执行一次周期任务<br><code>*/3 */2 */3 * *</code>每隔3天的每隔2小时的每隔3分钟执行一次周期任务<br><code>0 0 1 6 *</code>每到6月1日0时0分执行一次周期任务<br><code>* 3-8 * * */3</code>每隔3周的3到8点整每分钟执行一次周期任务<br><code>0 0 * * 0,3,5</code>每个周日，周三，周五0时0分执行一次周期任务<br>分（0-59），时（0-23），日（1-31），月（1-12），周（0-6）<br>系统的计划任务：  </p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;crontab  &#x2F;etc&#x2F;cron.d&#x2F;  &#x2F;etc&#x2F;cron.hourly&#x2F;  &#x2F;etc&#x2F;cron.daily&#x2F;  &#x2F;etc&#x2F;cron.weekly&#x2F;  &#x2F;etc&#x2F;cron.monthly&#x2F;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户<code>cron</code>：<br><code>crontab</code>命令定义，每个用户都有专用的<code>cron</code>任务文件：<br><code>/var/spool/cron/USERNAME</code><br><code>crontab</code>命令：<br><code>crontab [-u user] [-l | -r | -e] [-i]</code><br><code>-l</code>列出所有任务<br><code>-e</code>编辑任务<br><code>-r</code>移除所有任务<br><code>-i</code>同<code>-r</code>一同使用，以交互模式移除指定任务<br><code>-u user</code>仅<code>root</code>可运行，指定用户管理<code>cron</code>任务<br>控制用户执行计划任务：<br><code>/etc/cron.&#123;allow,deny&#125;</code><br>注意：运行结果的标准输出和错误以邮件通知给相关用户  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">></span> /dev/null  <span class="token builtin class-name">command</span> <span class="token number">2</span><span class="token operator">&amp;></span><span class="token number">1</span> /dev/null  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于<code>cron</code>任务来讲，<code>%</code>号有特殊用途，如果在命令中要使用<code>%</code>，则需要转义，不过，如果把<code>%</code>号放置于单引号中，也可以不用转义  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件管理</title>
      <link href="/posts/2039.html"/>
      <url>/posts/2039.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="系统配额"><a href="#系统配额" class="headerlink" title="系统配额"></a>系统配额</h1><ol><li>配额的作用：当Linux根分区的磁盘空间耗尽时，Linux系统将无法再建立新的文件（包括程序运行的临时文件），从而出现服务程序崩溃，系统无法启动等故障现象。<br>为了避免在服务器中出现类似的磁盘空间不足的问题，可以设置启用磁盘配额功能，对用户在指定文件系统（分区）中使用的磁盘空间、文件数量进行限制，以防个别用户恶意或无意间占用大量磁盘空间。是为了存储空间的稳定性和可持续性。  </li><li>配额系统综述：  <blockquote><p>在内核中执行<br>作用范围：以文件系统（分区）为单位启用<br>限制对象：对不同组、用户限制<br>限制类型：根据磁盘容量或者文件数量（配置文件中容量单位默认为K）<br>限制方法：  </p><blockquote><p>软限制（soft）：指定一个软性的配额数值，在固定的宽限期内（默认7天），允许超过这个限制，但文件系统会给出警告信息。<br>硬限制（hard）：指定一个硬性的配额数值，绝对禁止用户超过的限制值，当达到硬限制值时系统也会给出警告并禁止继续写入数据，硬限制的配额值应大于相应的软限制值，否则软限制将失效。<br>综上，只有当用户或组、文件系统（分区）及配额数值都满足限额条件时，才会对操作进行限制。  </p></blockquote></blockquote></li><li>配额管理：步骤：以支持配额功能的方式挂载文件系统→检测磁盘配额并生成配额文件→编辑用户和组行号的配额设置→开启文件系统配额功能→验证磁盘配额功能→查看配额使用情况。<br>以支持配额功能的方式挂载<br><code>mount -o usrquota,grpquota 设备分区名 挂载点</code>  </li></ol><p>以支持配额功能的方式重新挂载<br><code>mount -o remount,usrquota,grpquota 设备分区名 挂载点</code>  </p><p>开机自动挂载支持磁盘配额功能<br><code>vim /etc/fstab</code><br><code>设备分区名 挂载点 文件系统类型 usrquota,grpquota 0 0</code>  </p><p>检测磁盘配额并生成配额文件<br><code>quotacheck -augcv</code>  </p><blockquote><p>选项  </p><blockquote><p>-a：检测所有分区（如不使用-a，则必须指定一个设备分区名或挂载点，作为命令参数）<br>-u：检测用户配额信息<br>-g：检测组配额信息<br>-c：创建新的配额文件<br>-v：显示命令执行过程  </p></blockquote></blockquote><p>设定配额：编辑用户和组的配额设置<br><code>edquota -u 用户名</code><br>（blocks设置soft 5文件大小软限制为5k，设置hard 9文件大小硬限制为9k；inodes设置soft 2文件数量软限制为2个，设置hard 5文件数量硬限制为5个）<br><code>edquota -g 组名</code><br>打开配额文件编辑  </p><pre class="line-numbers language-none"><code class="language-none">block soft hard inode soft hard        1   2           1   2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>释义：文件大小 软限制1K 硬限制2K 文件个数 软限制1个 硬限制2个<br>修改宽限期<br><code>edquota -t</code><br>修改配置文件 <code>#days</code><br>启动配额功能<br><code>quotaon -u 设备分区名（挂载点）</code><br><code>quotaon -g 设备分区名（挂载点）</code><br><code>-v</code> 显示命令的执行过程  </p><p>关闭磁盘配额<br><code>quotaoff -u/g -v 设备分区名（挂载点）</code>  </p><p>查看配额状态<br><code>quota -u 用户名</code><br><code>quota -g 组名</code><br>查看指定文件系统输出配额使用情况<br><code>repquota 设备分区名</code>  </p><p>查看所有可用分区的配额使用报告<br><code>repquota -a</code>   </p><h1 id="软RAID设备"><a href="#软RAID设备" class="headerlink" title="软RAID设备"></a>软RAID设备</h1><p>RAID：磁盘阵列<br>简单的说，RAID是把多块独立的物理硬盘组合起来，形成一个硬盘组即逻辑硬盘，从而提供比单个硬盘更高的存储性能和提供数据备份技术。<br>组成磁盘阵列的不同方式称为RAID级别，根据不同级别，分别可以提供不同的速度、安全和性价比，根据实际情况选择适当的RAID级别可以满足用户对存储系统可用性能和容量的要求。  </p><h2 id="RAID实现方式："><a href="#RAID实现方式：" class="headerlink" title="RAID实现方式："></a>RAID实现方式：</h2><p>外接式磁盘阵列：通过扩展卡提供适配能力<br>内接式RAID：主板集成RAID控制器；安装OS前在BIOS里配置<br>软件RAID：通过OS实现  </p><p>RAID级别：0：条带卷 1：镜像卷 5、6、1 0、0 1、  </p><h3 id="RAID-0：条带卷"><a href="#RAID-0：条带卷" class="headerlink" title="RAID-0：条带卷"></a>RAID-0：条带卷</h3><p>数据分割之后并行存储<br>读写性能提升<br>可用空间N x min（N磁盘数量，min最小磁盘容量）<br>无容错能力（损坏一块就不能用），适合对数据读写要求高，而对安全无要求的环境<br>至少磁盘数：2  </p><h3 id="RAID-1：镜像卷"><a href="#RAID-1：镜像卷" class="headerlink" title="RAID-1：镜像卷"></a>RAID-1：镜像卷</h3><p>数据分割后，进行镜像备份存储<br>读取性能提升，写入性能下降<br>可用空间min<br>有冗余能力（有一块磁盘完好就行），适合对安全要求高的环境<br>至少磁盘数：2或2的倍数  </p><h3 id="RAID-5："><a href="#RAID-5：" class="headerlink" title="RAID-5："></a>RAID-5：</h3><p>3块以上的盘组成阵列，一个数据分成N-1份，同时生成一份校验数据，共N份数据在N块盘上循环均衡存储<br>校验数据作用：在某一块盘损坏时，可以通过其它盘和校验数据，把数据内容算出来<br>N块盘同时读写，由于校验机制，写性能相对不高，但综合性能很好<br>可用空间N-1 x min<br>有容错能力：允许坏一块，不影响数据<br>最少磁盘数：3  </p><h3 id="RAID-6：（类似5）"><a href="#RAID-6：（类似5）" class="headerlink" title="RAID-6：（类似5）"></a>RAID-6：（类似5）</h3><p>由4块以上的盘组成阵列，数据分成N-2份，并生成2份独立的奇偶校验数据，N份数据在磁盘上循环均衡存储<br>由于存在2个独立的奇偶校验数据，所以写入性能较差，但数据可靠性非常高<br>有容错能力：最多允许坏2块盘<br>最少磁盘数：4  </p><p>RAID-10：先进行RAID-1再进行RAID-0<br>RAID-01：先进行RAID-0再进行RAID-1<br>其它RAID-50等  </p><p>步骤：安装mdadm→准备用于RAID阵列的分区→创建RAID设备→在RAID设备中建立文件系统→挂载并使用文件系统<br><code>fdisk /dev/sd*</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mdadm</span> <span class="token punctuation">[</span>模式<span class="token punctuation">]</span> <span class="token operator">&lt;</span>设备名称<span class="token operator">></span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>磁盘分区<span class="token operator">></span>  模式：  -C：创建  -n <span class="token comment">#：使用#块设备创建此RAID  </span>-l <span class="token comment">#：指明要创建的RAID级别  </span>-a yes：自动创建目标RAID设备文件  -c <span class="token comment">#[KMG]：指明块大小  </span>-x <span class="token comment">#：指明空闲盘的个数  </span>-A：装配、激活  -s：扫描设备信息    -D（--detail）：显示RAID的详细信息  <span class="token function">mdadm</span> -D /dev/md<span class="token comment">#  </span>  管理模式：  -f：标记指定磁盘为损坏  -a：添加磁盘  -r：移除磁盘  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察md的状态：<br><code>cat /proc/mdstat</code>  </p><p>创建RAID设备：<br><code>mdadm -C /dev/md0 -a yes -l 5 -n 3 -x 1 /dev/sdb&#123;1,2,3,4&#125;</code>  </p><p>在RAID中建立文件系统：<br><code>mkfs.ext4 /dev/md0</code>  </p><p>挂载使用<br><code>mount /dev/md0 /testdir</code>  </p><p>生成RAID配置文件：<code>/etc/mdadm.conf</code>（默认不存在）<br>执行<code>mdadm -D -s &gt;&gt; /etc/mdadm.conf</code>  </p><p><code>vim /etc/mdadm.conf</code><br>修改其内容：在最上面添加一行：<code>DEVICE /dev/sd*</code> ；第二行删除<code>metadata=…</code>,<code>name=…</code>两项；保存退出  </p><p>检测配置文件是否有语法错误：<br>使用启动/停止服务的方式：<br>    停服务：<code>mdadm -S /dev/md0</code><br>    激活/启动：<code>mdadm -As /dev/md0</code><br>    强制启动：<code>mdadm -R /dev/md0</code>  </p><p>查看<code>df -hT</code>  </p><p>自动挂载：添加到<code>/etc/fstab</code>文件中去<br>模拟磁盘故障<br><code>mdadm /dev/md0 -f /dev/sdb1</code>  </p><p>移除磁盘<br><code>mdadm /dev/md0 -r /dev/sdb1</code>  </p><p>添加新成员<br><code>mdadm -G /dev/md0 -n 4 -a /dev/sdb1</code>  </p><p>从软件RAID磁盘修复磁盘故障：<br>替换出故障的磁盘然后开机；在备用驱动器上重建分区；<br><code>mdadm /dev/md0 -a /dev/sdb1</code><br>查看状态：<br><code>mdadm --query或cat /proc/mdstat</code>  </p><p>删除RAID信息：<code>mdadm --zero-superblock /dev/sdb1</code>  </p><h1 id="LVM逻辑卷"><a href="#LVM逻辑卷" class="headerlink" title="LVM逻辑卷"></a>LVM逻辑卷</h1><p>允许对卷进行方便操作的抽象层，包括重新设定文件系统的大小，允许在多个物理设备间重新组织文件系统<br>将设备指定为物理卷PV<br>用一个或多个物理卷来创建一个卷组VG<br>物理卷是用固定大小的物理区域PE来定义的<br>在物理卷上利用物理区域创建逻辑卷LV<br>可以在逻辑卷上创建文件系统<br>LVM介绍：LVM：逻辑卷管理器；设备名：<code>/dev/dm-#</code><br>LVM可以弹性的更改LVM的容量：通过交换PE来进行资料的转换，将原来LV内的PE转移到其他的设备中以LV的容量，或将其他设备中的PE加到LV中以加大容量  </p><table><thead><tr><th align="left">功能</th><th align="left">物理卷管理PV</th><th align="left">卷管理VG</th><th align="left">逻辑卷管理LV</th></tr></thead><tbody><tr><td align="left">scan 扫描</td><td align="left">pvscan</td><td align="left">vgscan</td><td align="left">lvscan</td></tr><tr><td align="left">create 建立</td><td align="left">pvcreate</td><td align="left">vgcreate</td><td align="left">lvcreate</td></tr><tr><td align="left">display 显示</td><td align="left">pvdiaplay</td><td align="left">vgdiaplay</td><td align="left">lvdiaplay</td></tr><tr><td align="left">remove 删除</td><td align="left">pvremove</td><td align="left">vgremove</td><td align="left">lvremove</td></tr><tr><td align="left">reduce 缩减</td><td align="left">-</td><td align="left">vgreduce</td><td align="left">lvreduce</td></tr><tr><td align="left">extend 扩展</td><td align="left">-</td><td align="left">vgextend</td><td align="left">lvestend</td></tr></tbody></table><h2 id="PV管理工具："><a href="#PV管理工具：" class="headerlink" title="PV管理工具："></a>PV管理工具：</h2><p>PV：物理卷：整个硬盘，或使用fdisk工具建立的普通分区（8e），包括许多默认的4MB大小的PE单元<br>创建PV物理卷<br><code>pvcreate /dev/sdb&#123;1,2,3&#125;</code><br>pvs：显示简要pv信息（pvdisplay显示的更详细）  </p><h2 id="VG管理工具"><a href="#VG管理工具" class="headerlink" title="VG管理工具"></a>VG管理工具</h2><p>VG：卷组：一个或多个物理卷组合而成的整体（相当于逻辑上的一个硬盘）<br>创建卷组（-s指定PE大小8M）<br><code>vgcreate -s 8m vg名 pv名</code><br>vgs：显示简要vg信息（vgdisplay显示的更详细）<br><code>vgextend vg名 pv名（扩容vg）</code><br><code>vgreduce vg名 pv名（减容vg）</code><br><code>vgremove /dev/vg名（删除vg）</code>，先做<code>pvmove /dev/pv1 /dev/pv2</code>（将pv1中的内容移动到pv2中），不需要保留数据则不做pvmove  </p><h2 id="LV管理工具"><a href="#LV管理工具" class="headerlink" title="LV管理工具"></a>LV管理工具</h2><p>LV：逻辑卷：从卷组中割出的一块空间，可以格式化挂载使用<br>创建逻辑卷<br><code>lvcreate -L 5G -n lv名 vg名</code>（-L指定lv大小5g）<br>lvs：显示lv简要信息（lvdisplay显示的更详细）  </p><h3 id="扩展逻辑卷LV"><a href="#扩展逻辑卷LV" class="headerlink" title="扩展逻辑卷LV"></a>扩展逻辑卷LV</h3><p><code>lvextend -L 7G /dev/vg名/lv名</code>（扩展逻辑卷到7G），<br>执行<code>resize2fs /dev/vg名/lv名</code>，让文件系统<code>df -h</code>识别扩展后的逻辑卷大小  </p><h3 id="缩减逻辑卷"><a href="#缩减逻辑卷" class="headerlink" title="缩减逻辑卷"></a>缩减逻辑卷</h3><p><code>umount /dev/vg名/lv名</code>：卸载<br><code>e2fsck -f /dev/vg名/lv名</code>：磁盘检查<br><code>resize2fs /dev/vg名/lv名 3G</code>：指定缩减后的逻辑卷大小为3G（将分散的数据整理到要保留的3G逻辑卷空间里）<br><code>lvreduce -L 3G /dev/vg名/lv名</code>：缩减逻辑卷为3G<br><code>mount /dev/vg名/lv名 /原挂载点</code>（由于执行<code>resize2fs</code>命令，所以原挂载的内容会被保留，原挂载点数据&lt;3G）  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘管理</title>
      <link href="/posts/da12.html"/>
      <url>/posts/da12.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><p>I/O设备地址    </p><h2 id="设备类型："><a href="#设备类型：" class="headerlink" title="设备类型："></a>设备类型：</h2><p>块设备：block，存取单位”块”，磁盘<br>字符设备：char，存取单位”字符”，键盘<br>设备文件：关联至一个设备驱动程序，进而能够跟与之对应硬件设备进行通信  </p><h2 id="设备号码："><a href="#设备号码：" class="headerlink" title="设备号码："></a>设备号码：</h2><p>主设备号：标识设备类型<br>次设备号：标识同一类型下的不同设备  </p><h2 id="硬盘接口类型："><a href="#硬盘接口类型：" class="headerlink" title="硬盘接口类型："></a>硬盘接口类型：</h2><p>并行：串口：<br>设备文件：磁盘设备命名：<code>/dev/sd[a-z]</code><br>不同设备：<code>a-z</code><br>同一设备不同分区<code>/dev/sda[1-4]</code>（主分区最多4个，扩展分区只1个，多个无意义即3主分区+1扩展分区）  </p><h2 id="磁盘结构："><a href="#磁盘结构：" class="headerlink" title="磁盘结构："></a>磁盘结构：</h2><p>磁臂、磁头head、主轴、电机、磁道track、扇区secotr（大小512bytes）、簇（同一磁道的连续多个扇区）、盘面、盘片、柱面cylinder  </p><h3 id="磁盘分区：为什么分区？"><a href="#磁盘分区：为什么分区？" class="headerlink" title="磁盘分区：为什么分区？"></a>磁盘分区：为什么分区？</h3><ol><li>优化I/O性能  </li><li>实现磁盘空间配额限制  </li><li>提高修复速度  </li><li>隔离系统和程序  </li><li>安装多个OS  </li><li>采用不同文件系统<br>分区：两种分区方式：<code>MBR</code>，<code>GPT</code><br>MBR：1982年，使用32位表示扇区数，分区不超过2T  </li></ol><h3 id="如何分区：按柱面分区"><a href="#如何分区：按柱面分区" class="headerlink" title="如何分区：按柱面分区"></a>如何分区：按柱面分区</h3><p>0磁道0扇区：512bytes（其中446字节为引导程序boot loader，64字节是分区表，其中16字节标识一个分区，2字节：55AA分区标志）<br>最多拥有64÷16=4个主分区（也可以&lt;4个主分区+1个扩展分区，在扩展分区上可划分多个逻辑分区）  </p><h4 id="管理分区："><a href="#管理分区：" class="headerlink" title="管理分区："></a>管理分区：</h4><p><code>lsblk</code>：列出块设备<br><code>partx -a /dev/sd*</code>：重新设置内存中的内核分区表版本（使硬盘分区表生效    centos5,7使用partprobe）（多执行几次，不行就reboot）<br><code>blkid /dev/sda#</code>：查看分区设备的UUID  </p><h4 id="fdisk-分区工具"><a href="#fdisk-分区工具" class="headerlink" title="fdisk 分区工具"></a>fdisk 分区工具</h4><p><code>fdisk /dev/sdb</code>：对sdb进行分区<br>子命令：<br><code>m</code>：帮助<br><code>p</code>：列表分区情况<br><code>t</code>：更改分区系统类型对应编号<br><code>l</code>：查看分区系统类型对应编号<br><code>d</code>：删除分区<br><code>w</code>：保存退出<br><code>q</code>：不保存退出<br><code>n</code>：创建分区<br>​      <code>e</code>：指定创建扩展分区<br>​      <code>p</code>：指定创建主分区<br>​      <code>l</code>：指定创建逻辑分区<br><code>fdisk -l</code>：显示硬盘使用情况（按柱面、磁道显示）<br><code>fdisk -lu</code>：按扇区显示信息<br><code>cat /proc/partitions</code>：查看内核是否已经识别新的分区<br><code>partx -a /dev/sd*</code>：通知内核重新读取硬盘分区表<br><code>partx -d --nr 5-6 /dev/sd*</code>：fdisk删除分区，内存未识别情况下，使用partx -d使其识别（范围删除5-6）<br><code>lsmod</code> 查看系统中启用的模块  </p><h1 id="文件系统："><a href="#文件系统：" class="headerlink" title="文件系统："></a>文件系统：</h1><p>文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构；即在存储设备上组织文件的方法。操作系统中负责管理和存储文件信息的软件结构称为文件管理系统，简称文件系统。从系统角度来看，文件系统是对文件存储设备的空间进行组织和分配，负责文件存储并对存入的文件进行保护和检索的系统。具体地说，它负责为用户建立文件，存入、读出、修改、转储文件，控制文件的存取，安全控制，日志，压缩，加密等。  </p><h2 id="文件系统分类："><a href="#文件系统分类：" class="headerlink" title="文件系统分类："></a>文件系统分类：</h2><ol><li>根据其是否支持”日志”功能  </li><li>日志型文件系统：ext3，ext4，xfs  </li><li>非日志型文件系统：ext2，vfat<br><code>cat /proc/filesystems</code>：查看支持的文件系统<br><code>mkfs.ext4 /dev/sd*#</code>：（.xfs .btrfs .vfat）<br><code>mkfs -t 文件系统类型 /dev/sd*#</code><br>扩展分区不可以格式化使用，因为扩展分区是个逻辑性的硬盘，只有分区后，对逻辑分区格式化后才能使用  </li></ol><h2 id="文件系统检测和修复"><a href="#文件系统检测和修复" class="headerlink" title="文件系统检测和修复"></a>文件系统检测和修复</h2><p>非常发生于死机或者非正常关机之后<br>挂载为文件系统标记为”no clean”<br>注意：一定不要在挂载状态下修复<br><code>fsck.ext4 /dev/sd*#</code>：对分区检测和修复（.ext4 .xfs等要与分区已存在的文件类型相同）（等同于fsck -t ext4 -ar /dev/sd*#）<br><code>e2fsck -y -f /dev/sd*#</code> （专用于ext系列文件的检测修复工具）<br><code>-y</code>：自动回答为yes<br><code>-f</code>：强制修复  </p><h2 id="挂载mount"><a href="#挂载mount" class="headerlink" title="挂载mount"></a>挂载mount</h2><p>挂载<code>mount</code>：将额外的文件系统与文件系统某现存的目录建立起关联关系，进而使得此目录做为其它文件访问入口的行为<br>卸载：为解除此关联关系的过程<br><code>mount [选项] 设备分区名 挂载目录</code>：把设备关联到挂载点  </p><p>选项：<br><code>-t ext4</code> 指明文件类型是ext4<br><code>-r</code> 只读挂载<br><code>-a</code> 自动挂载（定义在/etc/fstab文件中）<br>（umount -a 报错是/dev/sdb1挂载到/testdir目录时，/dev/sdb1分区被做成了RAID）<br><code>-o [选项]</code>（remount，usrquota，grpquota即：重新挂载，对用户的配额文件，对组的配额文件）<br>如果挂载目录下有文件，那么挂载后原有文件会被临时隐藏，解除挂载关系后原有文件还原。（挂载点目录一般为空）<br><code>cat /etc/mtab</code>：显示当前已挂载的所有设备<br><code>findmnt 挂载点</code>：查看挂载点的挂载情况<br><code>umount 设备分区名（或者挂载目录）</code>：卸载，即解除关联关系  </p><p>挂载点和<code>/etc/fstab</code>：  </p><ol><li>文件系统体系  </li><li>被mount、fsck和其它程序使用  </li><li>系统重启时保留文件系统体系  </li><li>使用<code>mount -a</code>命令 挂载/etc/fstab文件里的配置信息  </li></ol><p>/etc/fstab每行的定义：  </p><ol><li>要挂载的设备 挂载点 文件系统类型 挂载选项 转储频率 自检次序  </li><li>要挂载的设备：（设备文件、UUID、伪文件系统名称）  </li><li>挂载选项：defaults（usrquota，grpquota）  </li><li>转储频率：  <blockquote><p>0：不做备份<br>1：每天转储<br>2：每隔一天转储  </p></blockquote></li><li>自检次序：  <blockquote><p>0：不自检<br>1：首先自检；一般只有rootfs才用1  </p></blockquote></li></ol><h2 id="处理交换文件和分区"><a href="#处理交换文件和分区" class="headerlink" title="处理交换文件和分区"></a>处理交换文件和分区</h2><p>交换分区是系统RAM（内存）的补充<br>基本设置包括：  </p><ol><li>创建交换分区或者文件  </li><li>使用mkswap创建交换文件系统  </li><li>在/etc/fstab文件中添加适当的条目<br>挂载交换分区：  </li><li><code>mkswap /dev/sdb1</code>创建交换文件系统  </li><li><code>swapon /dev/sdb1</code>激活新增的交换分区  </li><li><code>swapon -a</code> 激活所有的交换分区  </li><li><code>swapon -s</code>查看交换分区情况、数量  </li><li><code>swapoff /dev/sdb1</code>禁用交换分区<br><code>cat /proc/meminfo|grep &quot;SwapTotal&quot;</code> 查看交换分区大小（grep -i 不区分大小写）  </li></ol><h1 id="移动介质："><a href="#移动介质：" class="headerlink" title="移动介质："></a>移动介质：</h1><p>挂载意味着使用外来的文件系统看起来如同是主目录树的一部分<br>访问前、介质必须被挂载<br>摘除时、介质必须被卸载<br>按照默认位置，非根用户只能挂载某些设备（光盘、USB等等）<br>挂载点通常在/media或/mnt下<br>在图形环境下自动启动挂载/media/CentOS_6.9_Final/Packages<br>否则就必须被手工挂载<br><code>mount /dev/sr0 /media/</code>  </p><h1 id="常见工具"><a href="#常见工具" class="headerlink" title="常见工具"></a>常见工具</h1><p><code>free -m</code>：以MB为单位<br><code>free -g</code>：以GB为单位<br><code>df -H 设备分区</code>：以1000为单位<br><code>df -h 设备分区</code>：易读格式显示（以1024为单位）<br><code>df -T 设备分区</code>：文件系统类型<br><code>df -i 设备分区</code>：显示索引节点<br><code>du -h 目录</code>：易读格式显示<br><code>du -s 目录</code>：总的<br>dd命令：转换和复制文件  </p><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><p><code>dd if=/文件 of=/文件 bs= count=…</code><br><code>bs</code>：复制单元大小，默认单位是字节（例如：bs=6K）<br><code>count</code>：复制多少个单元（例如：count=2）<br><code>if=file</code>：从文件中读取内容<br><code>of=file</code>：写入到目标文件中<br><code>skip</code>：从开头忽略n个ibs大小的块（例如：skip=6 bs=3K 从开头忽略18k的数据开始复制）<br><code>seek</code>：从开头忽略n个obs大小的块（例如：seek=2 bs=2k 从开头忽略4K的数据开始写入）<br>备份MBR：<code>dd if=/dev/sda of=/tmp/mbr.bak bs=512 count=1</code>  </p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p><code>dd if=/dev/sdb of=/dev/sdc</code>：将/dev/sdb整盘备份到/dev/sdc<br><code>dd if=/dev/sdb | gzip &gt; /path/sdb.gz</code>：读sdb全盘数据压缩到指定路径下的sdb.gz<br><code>dd if=/dev/mem of=/root/mem.bin bs=1024</code>：将内存里的数据拷贝到root目录下的mem.bin文件<br><code>dd if=/dev/sr0 of=/root/cd.iso</code>：拷贝到光盘数据到root文件夹下，并保存为cd.iso文件  </p><h1 id="大于2T的磁盘分区"><a href="#大于2T的磁盘分区" class="headerlink" title="大于2T的磁盘分区"></a>大于2T的磁盘分区</h1><p>以在<code>CentOS 7.5</code>操作系统中使用<code>parted</code>分区工具将数据盘<code>/dev/vdc</code>设置为主分区（<code>yum install parted</code>），分区形式默认设置为<code>GPT</code>，文件系统设置为<code>EXT4</code>格式，挂载在<code>/data/newpart2</code>下，并设置<code>开机启动自动挂载</code>为例，不同操作系统的格式化操作可能不同，仅供参考。</p><ol><li><p>以<code>root</code>用户执行以下命令，查看磁盘名称。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回显信息类似如下图，表示当前的云服务器有两块磁盘，<code>/dev/vda</code>是系统盘，<code>/dev/vdc</code>是新增数据盘。<br><img src="/medias/drawing-bed/linux/0.png"></p></li><li><p>执行以下命令，进入<code>parted</code>分区工具，开始对新增数据盘执行分区操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">parted</span> <span class="token operator">&lt;</span>新增数据盘<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以新挂载的数据盘<code>/dev/vdc</code>为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">parted</span> /dev/vdc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回显信息类似如下图：<br><img src="/medias/drawing-bed/linux/1.png"></p></li><li><p>输入<code>p</code>，按<code>Enter</code>，查看当前磁盘分区形式。<br>回显信息类似如下图：<br><img src="/medias/drawing-bed/linux/2.png"><br>【Partition Table: unknown】表示磁盘分区形式未知。</p></li><li><p>执行以下命令，设置磁盘分区形式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mklabel <span class="token operator">&lt;</span>磁盘分区方式<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>磁盘容量大于等于<code>2TB</code>时，只能使用<code>GPT</code>分区方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mklabel gpt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入<code>p</code>，按<code>Enter</code>，查看磁盘分区形式是否设置成功。<br>回显信息类似如下图：<br><img src="/medias/drawing-bed/linux/3.png"><br>【Partition Table: gpt】表示磁盘分区形式为 GPT。</p></li><li><p>输入<code>unit s</code>，按<code>Enter</code>，设置磁盘的计量单位为磁柱。  </p></li><li><p>以为整个磁盘创建一个分区为例，输入<code>mkpart opt 2048s 100%</code>，按<code>Enter</code>。<br><code>2048s</code>表示磁盘起始容量，<code>100%</code>表示磁盘截止容量，此处仅供参考，您可以根据业务需要自行规划磁盘分区数量及容量。</p></li><li><p>输入p，按 Enter，查看新建分区的详细信息。<br>回显信息类似如下图：<br><img src="/medias/drawing-bed/linux/4.png"><br>表示新建分区/dev/vdc1的详细信息。</p></li><li><p>输入<code>q</code>，按<code>Enter</code>，退出<code>parted</code>分区工具  </p></li><li><p>执行以下命令，查看磁盘名称。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回显信息类似如下图，此时可看到新分区<code>/dev/vdc1</code>。<br><img src="/medias/drawing-bed/linux/5.png"></p></li><li><p>执行以下命令，将新建分区文件系统设置为系统所需格式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkfs</span> -t <span class="token operator">&lt;</span>文件系统格式<span class="token operator">></span> /dev/vdc1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不同文件系统支持的分区大小不同，请根据实际需求合理选择文件系统。以设置文件系统为 EXT4 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkfs</span> -t ext4 /dev/vdc1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回显信息类似如下图：<br><img src="/medias/drawing-bed/linux/6.png"><br>格式化需要等待一段时间，请观察系统运行状态，不要退出。</p></li><li><p>执行以下命令，新建挂载点。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token operator">&lt;</span>挂载点<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以新建挂载点/data/newpart2为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /data/newpart2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行以下命令，将新建分区挂载至新建的挂载点。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/vdc1 <span class="token operator">&lt;</span>挂载点<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以新建挂载点/data/newpart2为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/vdc1 /data/newpart2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行以下命令，查看挂载结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> -TH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回显信息类似如下图：<br><img src="/medias/drawing-bed/linux/7.png"><br>表示新建分区/dev/vdc1已挂载至/data/newpart2。</p></li><li><p>确认挂载方式并获取对应信息。<br>您可以根据业务需求选择使用弹性云硬盘的软链接、文件系统的<code>UUID</code>（universally unique identifier）或设备名称自动挂载磁盘，相关说明和信息获取方式如下：</p></li></ol><table><thead><tr><th align="left">挂载方式</th><th align="left">优缺点</th><th align="left">信息获取方式</th></tr></thead><tbody><tr><td align="left">使用弹性云硬盘的软链接（推荐）</td><td align="left">优点：每个弹性云硬盘的软链接固定且唯一，不会随卸载挂载、格式化分区等操作而改变。缺点：只有弹性云硬盘才有软链接。无法感知分区的格式化操作。</td><td align="left">查看弹性云硬盘的软链接。<code>ls -l /dev/disk/by-id</code></td></tr><tr><td align="left">使用文件系统的 UUID</td><td align="left">可能会因文件系统的 UUID 变化而导致自动挂载设置失效。例如，重新格式化文件系统后，文件系统的 UUID 将会发生变化。</td><td align="left">查看文件系统的 UUID。<code>blkid /dev/vdc1</code></td></tr><tr><td align="left">使用设备名称</td><td align="left">可能会因设备名称变化而导致自动挂载设置失效。例如，迁移数据时将云服务器上的弹性云硬盘卸载后再次挂载，操作系统再次识别到该文件系统时，名称可能会变化。</td><td align="left">查看设备名称。<code>fdisk -l</code></td></tr></tbody></table><ol start="16"><li>执行以下命令，备份<code>/etc/fstab</code>文件。以备份到<code>/home</code>目录下为例：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -r /etc/fstab /home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>执行以下命令，使用<code>VI</code>编辑器打开<code>/etc/fstab</code>文件。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>按<code>i</code>，进入编辑模式。  </li><li>将<code>光标移至文件末尾</code>，按<code>Enter</code>，添加如下内容。  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>设备信息<span class="token operator">></span> <span class="token operator">&lt;</span>挂载点<span class="token operator">></span> <span class="token operator">&lt;</span>文件系统格式<span class="token operator">></span> <span class="token operator">&lt;</span>文件系统安装选项<span class="token operator">></span> <span class="token operator">&lt;</span>文件系统转储频率<span class="token operator">></span> <span class="token operator">&lt;</span>启动时的文件系统检查顺序<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>（推荐）以使用弹性云硬盘的软链接自动挂载为例，结合前文示例则添加：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/dev/disk/by-id/virtio-disk-bm42ztpm-part1 /data/newpart2   ext4 defaults     <span class="token number">0</span>   <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>以使用磁盘分区的 UUID 自动挂载为例，结合前文示例则添加：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">UUID</span><span class="token operator">=</span>fc3f42cc-2093-49c7-b4fd-c616ba6165f4 /data/newpart2   ext4 defaults     <span class="token number">0</span>   <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>以使用设备名称自动挂载为例，结合前文示例则添加：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/dev/vdc1 /data/newpart2   ext4 defaults     <span class="token number">0</span>   <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="20"><li>按<code>Esc</code>，输入<code>:wq</code>，按<code>Enter</code>。<br>保存设置并退出编辑器。</li><li>执行以下命令，检查<code>/etc/fstab</code>文件是否写入成功。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> -a <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果运行通过则说明文件写入成功，新建的文件系统会在操作系统启动时自动挂载。  </li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pod</title>
      <link href="/posts/c02d.html"/>
      <url>/posts/c02d.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>声明：本地镜像仓库<code>192.168.1.40 docker.registry.com</code>，k8s集群<code>192.168.1.15&#123;0,1,2&#125;</code></p><h1 id="创建pod"><a href="#创建pod" class="headerlink" title="创建pod"></a>创建pod</h1><p>在生产环境中，推荐使用诸如Deployment，StatefulSet，Job或者CronJob等控制器来创建Pod，而不是直接创建。  </p><h2 id="Deployment-模板"><a href="#Deployment-模板" class="headerlink" title="Deployment 模板"></a>Deployment 模板</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl explain deployment.spec.template   <span class="token comment"># 其它模板：job.spec.template/statefulset.spec.template/daemonset.spec.template</span>KIND:     DeploymentVERSION:  apps/v1RESOURCE: template <span class="token operator">&lt;</span>Object<span class="token operator">></span>DESCRIPTION:     Template describes the pods that will be created.     PodTemplateSpec describes the data a pod should have when created from a     templateFIELDS:   metadata<span class="token operator">&lt;</span>Object<span class="token operator">></span>     Standard object's metadata. More info:     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#metadata</span>   spec<span class="token operator">&lt;</span>Object<span class="token operator">></span>     Specification of the desired behavior of the pod. More info:     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#spec-and-status</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="通过Dockerfile创建镜像"><a href="#通过Dockerfile创建镜像" class="headerlink" title="通过Dockerfile创建镜像"></a>通过Dockerfile创建镜像</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> mail.dockerfile <span class="token operator">&lt;&lt;</span> <span class="token string">EOFFROM openjdk:8-jre-alpineMAINTAINER wangjunCOPY mail-demo-0.0.1-SNAPSHOT.jar /app.jarCMD java -jar /app.jarEXPOSE 8085EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建镜像，上传到本地镜像库"><a href="#创建镜像，上传到本地镜像库" class="headerlink" title="创建镜像，上传到本地镜像库"></a>创建镜像，上传到本地镜像库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build -f mail.dockerfile -t maildemo <span class="token builtin class-name">.</span>docker tag maildemo docker.registry.com/maildemodocker push docker.registry.com/maildemo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="通过yaml文件创建pod"><a href="#通过yaml文件创建pod" class="headerlink" title="通过yaml文件创建pod"></a>通过yaml文件创建pod</h1><p>mail-pod.yaml  </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> maildemo<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> maildemo<span class="token punctuation">-</span>pod  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> maildemo<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maildemo        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.registry.com/maildemo        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8085</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="通过yaml文件创建svc-service"><a href="#通过yaml文件创建svc-service" class="headerlink" title="通过yaml文件创建svc(service)"></a>通过yaml文件创建<code>svc</code>(service)</h1><p>mailsvc.yaml  </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> maildemo<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> maildemo<span class="token punctuation">-</span>pod  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8085</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">31000</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># nodePort　外部机器可访问的端口。比如一个Web应用需要被其他用户访问，那么需要配置type&#x3D;NodePort，而且配置nodePort&#x3D;30001，那么其他机器就可以通过浏览器访问scheme:&#x2F;&#x2F;node:30001访问到该服务，例如http:&#x2F;&#x2F;node:30001。　例如MySQL数据库可能不需要被外界访问，只需被内部服务访问，那么不必设置NodePort# targetPort　容器的端口（最根本的端口入口），与制作容器时暴露的端口一致（DockerFile中EXPOSE），例如docker.io官方的nginx暴露的是80端口。　docker.io官方的nginx容器的DockerFile参考https:&#x2F;&#x2F;github.com&#x2F;nginxinc&#x2F;docker-nginx# port　kubernetes中的服务之间访问的端口，尽管mysql容器暴露了3306端口（参考https:&#x2F;&#x2F;github.com&#x2F;docker-library&#x2F;mysql&#x2F;的DockerFile），但是集群内其他容器需要通过33306端口访问该服务，外部机器不能访问mysql服务，因为他没有配置NodePort类型---分割线---NodePort 服务主要有两点区别于普通的&quot;ClusterIP&quot;服务。第一，它的类型是&quot;NodePort&quot;。有一个额外的端口，称为 nodePort，它指定节点上开放的端口值 。如果你不指定这个端口，系统将选择一个随机端口。大多数时候我们应该让 Kubernetes 来选择端口，用户自己来选择可用端口代价太大。这种方法有许多缺点：1.每个端口只能是一种服务2.端口范围只能是 30000-327673.如果节点&#x2F;VM 的 IP 地址发生变化，你需要能处理这种情况基于以上原因，不建议在生产环境上用这种方式暴露服务。如果运行的服务不要求一直可用，或者对成本比较敏感，你可以使用这种方法。这样的应用的最佳例子是 demo 应用，或者某些临时应用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="通过yaml文件创建pod和service"><a href="#通过yaml文件创建pod和service" class="headerlink" title="通过yaml文件创建pod和service"></a>通过yaml文件创建pod和service</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply -f mail-pod.yamlkubectl apply -f mailsvc.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="删除pod和service"><a href="#删除pod和service" class="headerlink" title="删除pod和service"></a>删除pod和service</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get podkubectl delete pod maildemo-pod-6b68c9c9b8-7svd9kubectl delete pod maildemo-pod-6b68c9c9b8-48mjzkubectl get deploymentkubectl delete deployment maildemo-podkubectl get svckubectl delete svc maildemo-podkubectl delete svc maildemo-svc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装</title>
      <link href="/posts/d6ec.html"/>
      <url>/posts/d6ec.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="准备3台机器最小2C2G"><a href="#准备3台机器最小2C2G" class="headerlink" title="准备3台机器最小2C2G"></a>准备3台机器最小2C2G</h1><p>资源不够报错：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/error execution phase preflight: <span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Some fatal errors occurred:<span class="token punctuation">[</span>ERROR NumCPU<span class="token punctuation">]</span>: the number of available CPUs <span class="token number">1</span> is <span class="token function">less</span> than the required <span class="token number">2</span><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> If you know what you are doing, you can <span class="token function">make</span> a check non-fatal with <span class="token variable"><span class="token variable">`</span>--ignore-preflight-errors<span class="token operator">=</span><span class="token punctuation">..</span>.<span class="token variable">`</span></span>To see the stack trace of this error execute with --v<span class="token operator">=</span><span class="token number">5</span> or higher---<span class="token comment"># 调整CPU核心数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改主机名："><a href="#修改主机名：" class="headerlink" title="修改主机名："></a>修改主机名：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname k8s-master   <span class="token comment"># master节点</span>hostnamectl set-hostname k8s-node1   <span class="token comment"># node1节点</span>hostnamectl set-hostname k8s-node2   <span class="token comment"># node2节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="基本配置："><a href="#基本配置：" class="headerlink" title="基本配置："></a>基本配置：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改/etc/hosts文件</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/hosts <span class="token operator">&lt;&lt;</span> <span class="token string">EOF192.168.1.150 k8s-master192.168.1.151 k8s-node1192.168.1.152 k8s-node2192.168.1.40 docker.registry.comEOF</span><span class="token comment"># 关闭防火墙和selinux</span>systemctl stop firewalld <span class="token operator">&amp;&amp;</span> systemctl disable firewalld<span class="token function">sed</span> -i <span class="token string">'s/^SELINUX=enforcing$/SELINUX=disabled/'</span> /etc/selinux/config <span class="token operator">&amp;&amp;</span> setenforce <span class="token number">0</span><span class="token comment"># 关闭swap</span>swapoff -a<span class="token function">yes</span> <span class="token operator">|</span> <span class="token function">cp</span> /etc/fstab /etc/fstab_bak<span class="token function">cat</span> /etc/fstab_bak <span class="token operator">|</span><span class="token function">grep</span> -v swap <span class="token operator">></span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置时间同步"><a href="#配置时间同步" class="headerlink" title="配置时间同步"></a>配置时间同步</h1><p>使用chrony同步时间，配置master节点与网络NTP服务器同步时间，所有node节点与master节点同步时间。</p><h2 id="配置master节点："><a href="#配置master节点：" class="headerlink" title="配置master节点："></a>配置master节点：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装chrony：</span>yum <span class="token function">install</span> -y chrony<span class="token comment"># 注释默认ntp服务器</span><span class="token function">sed</span> -i <span class="token string">'s/^server/#&amp;/'</span> /etc/chrony.conf<span class="token comment"># 指定上游公共 ntp 服务器，并允许其他节点同步时间</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/chrony.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFserver ntp1.aliyun.com iburstserver ns.cn.net iburstallow allEOF</span><span class="token comment"># 重启chronyd服务并设为开机启动：</span>systemctl <span class="token builtin class-name">enable</span> chronyd <span class="token operator">&amp;&amp;</span> systemctl restart chronyd<span class="token comment"># 开启网络时间同步功能</span>timedatectl set-ntp <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置node节点："><a href="#配置node节点：" class="headerlink" title="配置node节点："></a>配置node节点：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装chrony：</span>yum <span class="token function">install</span> -y chrony<span class="token comment"># 注释默认服务器</span><span class="token function">sed</span> -i <span class="token string">'s/^server/#&amp;/'</span> /etc/chrony.conf<span class="token comment"># 指定内网 master 节点为上游NTP服务器</span><span class="token builtin class-name">echo</span> server <span class="token number">192.168</span>.1.150 iburst <span class="token operator">>></span> /etc/chrony.conf<span class="token comment"># 重启服务并设为开机启动：</span>systemctl <span class="token builtin class-name">enable</span> chronyd <span class="token operator">&amp;&amp;</span> systemctl restart chronyd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改iptables相关参数"><a href="#修改iptables相关参数" class="headerlink" title="修改iptables相关参数"></a>修改iptables相关参数</h1><p>RHEL / CentOS 7上的一些用户报告了由于iptables被绕过而导致流量路由不正确的问题。创建/etc/sysctl.d/k8s.conf文件，添加如下内容：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span>  /etc/sysctl.d/k8s.conf</span>vm.swappiness = 0net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1EOF</span><span class="token comment"># 使配置生效</span>modprobe br_netfiltersysctl -p /etc/sysctl.d/k8s.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="加载ipvs相关模块"><a href="#加载ipvs相关模块" class="headerlink" title="加载ipvs相关模块"></a>加载ipvs相关模块</h1><p>由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：<br>在所有的Kubernetes节点执行以下脚本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&lt;&lt;</span><span class="token string">EOF#!/bin/bashmodprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrack_ipv4EOF</span><span class="token comment"># 执行脚本</span><span class="token function">chmod</span> <span class="token number">755</span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&amp;&amp;</span> lsmod <span class="token operator">|</span> <span class="token function">grep</span> -e ip_vs -e nf_conntrack_ipv4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面脚本创建了/etc/sysconfig/modules/ipvs.modules文件，保证在节点重启后能自动加载所需模块。 使用lsmod | grep -e ip_vs -e nf_conntrack_ipv4命令查看是否已经正确加载所需的内核模块。<br>接下来还需要确保各个节点上已经安装了ipset软件包。 为了便于查看ipvs的代理规则，最好安装一下管理工具ipvsadm。<br><code>yum install ipset ipvsadm -y</code>  </p><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><p>Kubernetes默认的容器运行时仍然是Docker，使用的是kubelet中内置dockershim CRI实现。需要注意的是，Kubernetes 1.13最低支持的Docker版本是1.11.1，最高支持是18.06，而Docker最新版本已经是18.09了，故我们安装时需要指定版本为18.06.1-ce。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置docker yum源</span>yum <span class="token function">install</span> -y yum-utilsyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum <span class="token function">install</span> -y docker-ce<span class="token function">mkdir</span> -p /etc/docker<span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://******.mirror.aliyuncs.com"],  "exec-opts":["native.cgroupdriver=systemd"],  "insecure-registries": ["docker.registry.com"]&#125;EOF</span>systemctl daemon-reloadsystemctl start dockersystemctl <span class="token builtin class-name">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;]</code>解决(可以不必管它)：<br><code>[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;.</code><br><code>&quot;insecure-registries&quot;: [&quot;docker.registry.com&quot;]</code>是本地私有镜像地址<br><code>&quot;registry-mirrors&quot;: [&quot;https://******.mirror.aliyuncs.com&quot;]</code>是阿里云的镜像加速服务  </p><h1 id="安装kubeadm、kubelet、kubectl"><a href="#安装kubeadm、kubelet、kubectl" class="headerlink" title="安装kubeadm、kubelet、kubectl"></a>安装kubeadm、kubelet、kubectl</h1><ul><li>kubelet 在群集中所有节点上运行的核心组件, 用来执行如启动pods和containers等操作。  </li><li>ubeadm 引导启动k8s集群的命令行工具，用于初始化 Cluster。  </li><li>kubectl 是 Kubernetes 命令行工具。通过 kubectl 可以部署和管理应用，查看各种资源，创建、删除和更新各种组件。  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置kubernetes.repo的源，由于官方源国内无法访问，这里使用阿里云yum源</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo</span>[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</span><span class="token comment"># 在所有节点上安装 kubelet、kubeadm 和 kubectl</span>yum <span class="token function">install</span> -y kubelet kubeadm kubectl<span class="token comment"># 启动kubelet服务</span>systemctl <span class="token builtin class-name">enable</span> kubelet <span class="token operator">&amp;&amp;</span> systemctl start kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="部署master节点"><a href="#部署master节点" class="headerlink" title="部署master节点"></a>部署master节点</h1><h2 id="Master节点执行初始化："><a href="#Master节点执行初始化：" class="headerlink" title="Master节点执行初始化："></a>Master节点执行初始化：</h2><p>注意这里执行初始化用到了–image-repository选项，指定初始化需要的镜像源从阿里云镜像仓库拉取。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm init <span class="token punctuation">\</span>    --apiserver-advertise-address<span class="token operator">=</span><span class="token number">192.168</span>.1.150 <span class="token punctuation">\</span>    --image-repository registry.aliyuncs.com/google_containers <span class="token punctuation">\</span>    --kubernetes-version v1.18.3 <span class="token punctuation">\</span>    --pod-network-cidr<span class="token operator">=</span><span class="token number">10.244</span>.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化命令说明：  </p><pre class="line-numbers language-none"><code class="language-none">--apiserver-advertise-address指明用 Master 的哪个 interface 与 Cluster 的其他节点通信。如果 Master 有多个 interface，建议明确指定，如果不指定，kubeadm 会自动选择有默认网关的 interface。--pod-network-cidr指定 Pod 网络的范围。Kubernetes 支持多种网络方案，而且不同网络方案对 --pod-network-cidr 有自己的要求，这里设置为 10.244.0.0&#x2F;16 是因为我们将使用 flannel 网络方案，必须设置成这个 CIDR。--image-repositoryKubenetes默认Registries地址是 k8s.gcr.io，在国内并不能访问 gcr.io，在1.13版本中我们可以增加–image-repository参数，默认值是 k8s.gcr.io，将其指定为阿里云镜像地址：registry.aliyuncs.com&#x2F;google_containers。--kubernetes-version&#x3D;v1.18.3关闭版本探测，因为它的默认值是stable-1，会导致从https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;stable-1.txt下载最新的版本号，我们可以将其指定为固定版本（截至2020.06.28最新版：v1.18.3）来跳过网络请求。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>(注意记录下初始化结果中的kubeadm join命令，部署worker节点时会用到)</strong></em>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.1.150:6443 --token snllb2.u0jdzy8295owjg8s <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:1dbb688b15c24740b288d300a5b2934828462f85f15599e047a7b5d91f0a4e1e <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化过程说明：  </p><pre class="line-numbers language-none"><code class="language-none">[preflight] kubeadm 执行初始化前的检查。[kubelet-start] 生成kubelet的配置文件&quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;[certificates] 生成相关的各种token和证书[kubeconfig] 生成 KubeConfig 文件，kubelet 需要这个文件与 Master 通信[control-plane] 安装 Master 组件，会从指定的 Registry 下载组件的 Docker 镜像。[bootstraptoken] 生成token记录下来，后边使用kubeadm join往集群中添加节点时会用到[addons] 安装附加组件 kube-proxy 和 kube-dns。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Kubernetes Master 初始化成功，提示如何配置常规用户使用kubectl访问集群。<br>提示如何安装 Pod 网络。<br>提示如何注册其他节点到 Cluster。  </p><h2 id="配置-kubectl"><a href="#配置-kubectl" class="headerlink" title="配置 kubectl"></a>配置 kubectl</h2><p>kubectl 是管理 Kubernetes Cluster 的命令行工具，前面我们已经在所有的节点安装了 kubectl。Master 初始化完成后需要做一些配置工作，然后 kubectl 就能使用了。<br>依照 kubeadm init 输出的最后提示，推荐用 Linux 普通用户执行 kubectl。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建普通用户并设置密码123456</span><span class="token function">useradd</span> centos <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"centos:123456"</span> <span class="token operator">|</span> chpasswd centos<span class="token comment"># 追加sudo权限,并配置sudo免密</span><span class="token function">sed</span> -i <span class="token string">'/^root/a\centos  ALL=(ALL)       NOPASSWD:ALL'</span> /etc/sudoers<span class="token comment"># 保存集群安全配置文件到当前用户.kube目录</span><span class="token function">su</span> - centos<span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span class="token comment"># 启用 kubectl 命令自动补全功能（注销重新登录生效）</span><span class="token builtin class-name">echo</span> <span class="token string">"source &lt;(kubectl completion bash)"</span> <span class="token operator">>></span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要这些配置命令的原因是：Kubernetes 集群默认需要加密方式访问。所以，这几条命令，就是将刚刚部署生成的 Kubernetes 集群的安全配置文件，保存到当前用户的.kube 目录下，kubectl 默认会使用这个目录下的授权信息访问 Kubernetes 集群。<br>如果不这么做的话，我们每次都需要通过 export KUBECONFIG 环境变量告诉 kubectl 这个安全配置文件的位置。<br>配置完成后centos用户就可以使用 kubectl 命令管理集群了。  </p><p>查看集群状态：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get csNAME                 STATUS      MESSAGE                                                                                     ERRORscheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp <span class="token number">127.0</span>.0.1:10251: connect: connection refused   controller-manager   Healthy     ok                                                                                          etcd-0               Healthy     <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span>                                                                           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认各个组件都处于healthy状态。<br>查看节点状态  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get nodeNAME         STATUS     ROLES    AGE    VERSIONk8s-master   NotReady   master   105s   v1.18.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，当前只存在1个master节点，并且这个节点的状态是 NotReady。<br>使用 kubectl describe 命令来查看这个节点（Node）对象的详细信息、状态和事件（Event）：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl describe node k8s-master<span class="token punctuation">..</span>.Events:  Type    Reason                   Age                    From                 Message  ----    ------                   ----                   ----                 -------  Normal  NodeHasNoDiskPressure    2m50s <span class="token punctuation">(</span>x4 over 2m51s<span class="token punctuation">)</span>  kubelet, k8s-master  Node k8s-master status is now: NodeHasNoDiskPressure  Normal  NodeHasSufficientPID     2m50s <span class="token punctuation">(</span>x4 over 2m51s<span class="token punctuation">)</span>  kubelet, k8s-master  Node k8s-master status is now: NodeHasSufficientPID  Normal  NodeHasSufficientMemory  2m49s <span class="token punctuation">(</span>x5 over 2m51s<span class="token punctuation">)</span>  kubelet, k8s-master  Node k8s-master status is now: NodeHasSufficientMemory  Normal  Starting                 102s                   kubelet, k8s-master  Starting kubelet.  Normal  NodeHasSufficientMemory  97s                    kubelet, k8s-master  Node k8s-master status is now: NodeHasSufficientMemory  Normal  NodeHasNoDiskPressure    97s                    kubelet, k8s-master  Node k8s-master status is now: NodeHasNoDiskPressure  Normal  NodeHasSufficientPID     97s                    kubelet, k8s-master  Node k8s-master status is now: NodeHasSufficientPID  Normal  NodeAllocatableEnforced  96s                    kubelet, k8s-master  Updated Node Allocatable limit across pods<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 kubectl describe 指令的输出，我们可以看到 NodeNotReady 的原因在于，我们尚未部署任何网络插件，kube-proxy等组件还处于starting状态。<br>另外，我们还可以通过 kubectl 检查这个节点上各个系统 Pod 的状态，其中，kube-system 是 Kubernetes 项目预留的系统 Pod 的工作空间（Namepsace，注意它并不是 Linux Namespace，它只是 Kubernetes 划分不同工作空间的单位）：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get pod -n kube-system -o wideNAME                                 READY   STATUS    RESTARTS   AGE    IP              NODE         NOMINATED NODE   READINESS GATEScoredns-7ff77c879f-5kmsp             <span class="token number">0</span>/1     Pending   <span class="token number">0</span>          58s    <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token operator">&lt;</span>none<span class="token operator">></span>       <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>coredns-7ff77c879f-z5v6h             <span class="token number">0</span>/1     Pending   <span class="token number">0</span>          58s    <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token operator">&lt;</span>none<span class="token operator">></span>       <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>etcd-k8s-master                      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          101s   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-apiserver-k8s-master            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          101s   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-controller-manager-k8s-master   <span class="token number">1</span>/1     Running   <span class="token number">1</span>          101s   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-nsj4g                     <span class="token number">0</span>/1     Pending   <span class="token number">0</span>          58s    <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token operator">&lt;</span>none<span class="token operator">></span>       <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-scheduler-k8s-master            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          101s   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，CoreDNS依赖于网络的 Pod 都处于 Pending 状态，即调度失败。这当然是符合预期的：因为这个 Master 节点的网络尚未就绪。<br>集群初始化如果遇到问题，可以使用kubeadm reset命令进行清理然后重新执行初始化。  </p><p>部署网络插件<br>要让 Kubernetes Cluster 能够工作，必须安装 Pod 网络，否则 Pod 之间无法通信。<br>Kubernetes 支持多种网络方案，这里我们使用 flannel<br>执行如下命令部署 flannel：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ymlThe connection to the server raw.githubusercontent.com was refused - did you specify the right <span class="token function">host</span> or port?<span class="token comment"># 报错了，你可以使用wget下载，或者访问访问网页把kube-flannel.yml文件内容复制出来</span><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl apply -f kube-flannel.yml podsecuritypolicy.policy/psp.flannel.unprivileged createdclusterrole.rbac.authorization.k8s.io/flannel configuredclusterrolebinding.rbac.authorization.k8s.io/flannel unchangedserviceaccount/flannel unchangedconfigmap/kube-flannel-cfg configureddaemonset.apps/kube-flannel-ds-amd64 createddaemonset.apps/kube-flannel-ds-arm64 createddaemonset.apps/kube-flannel-ds-arm createddaemonset.apps/kube-flannel-ds-ppc64le createddaemonset.apps/kube-flannel-ds-s390x created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署完成后，我们可以通过 kubectl get 重新检查 Pod 的状态：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get pod -n kube-system -o wideNAME                                 READY   STATUS     RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATEScoredns-7ff77c879f-5kmsp             <span class="token number">0</span>/1     Pending    <span class="token number">0</span>          16m   <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token operator">&lt;</span>none<span class="token operator">></span>       <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>coredns-7ff77c879f-z5v6h             <span class="token number">0</span>/1     Pending    <span class="token number">0</span>          16m   <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token operator">&lt;</span>none<span class="token operator">></span>       <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>etcd-k8s-master                      <span class="token number">1</span>/1     Running    <span class="token number">0</span>          17m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-apiserver-k8s-master            <span class="token number">1</span>/1     Running    <span class="token number">0</span>          17m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-controller-manager-k8s-master   <span class="token number">1</span>/1     Running    <span class="token number">1</span>          17m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-flannel-ds-amd64-vn6sj          <span class="token number">0</span>/1     Init:0/1   <span class="token number">0</span>          15s   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-nsj4g                     <span class="token number">1</span>/1     Running    <span class="token number">0</span>          16m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-scheduler-k8s-master            <span class="token number">1</span>/1     Running    <span class="token number">1</span>          17m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，所有的系统 Pod 都成功启动了，而刚刚部署的flannel网络插件则在 kube-system 下面新建了一个名叫kube-flannel-ds-amd64-vn6sj的 Pod，一般来说，这些 Pod 就是容器网络插件在每个节点上的控制组件。<br>Kubernetes 支持容器网络插件，使用的是一个名叫 CNI 的通用接口，它也是当前容器网络的事实标准，市面上的所有容器网络开源项目都可以通过 CNI 接入 Kubernetes，比如 Flannel、Calico、Canal、Romana 等等，它们的部署方式也都是类似的”一键部署”。<br>大概等待2分钟，再次查看master节点状态已经为ready状态：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get nodesNAME         STATUS   ROLES    AGE   VERSIONk8s-master   Ready    master   86m   v1.18.5<span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get csNAME                 STATUS    MESSAGE             ERRORcontroller-manager   Healthy   ok                  scheduler            Healthy   ok                  etcd-0               Healthy   <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span><span class="token string">"true"</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get pod -n kube-system -o wideNAME                                 READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATEScoredns-7ff77c879f-5kmsp             <span class="token number">1</span>/1     Running   <span class="token number">0</span>          20m     <span class="token number">10.244</span>.0.2      k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>coredns-7ff77c879f-z5v6h             <span class="token number">1</span>/1     Running   <span class="token number">0</span>          20m     <span class="token number">10.244</span>.0.3      k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>etcd-k8s-master                      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          21m     <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-apiserver-k8s-master            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          21m     <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-controller-manager-k8s-master   <span class="token number">1</span>/1     Running   <span class="token number">1</span>          21m     <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-flannel-ds-amd64-vn6sj          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4m24s   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-nsj4g                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          20m     <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-scheduler-k8s-master            <span class="token number">1</span>/1     Running   <span class="token number">1</span>          21m     <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，Kubernetes 的 Master 节点就部署完成了。如果你只需要一个单节点的 Kubernetes，现在你就可以使用了。不过，在默认情况下，Kubernetes 的 Master 节点是不能运行用户 Pod 的。 </p><h1 id="部署worker节点"><a href="#部署worker节点" class="headerlink" title="部署worker节点"></a>部署worker节点</h1><p>Kubernetes 的 Worker 节点跟 Master 节点几乎是相同的，它们运行着的都是一个 kubelet 组件。唯一的区别在于，在 kubeadm init 的过程中，kubelet 启动后，Master 节点上还会自动运行 kube-apiserver、kube-scheduler、kube-controller-manger 这三个系统 Pod。<br>在 k8s-node1 和 k8s-node2 上分别执行如下命令，将其注册到 Cluster 中：<br>执行以下命令将节点接入集群<br><code>kubeadm join 192.168.1.150:6443 --token snllb2.u0jdzy8295owjg8s --discovery-token-ca-cert-hash sha256:1dbb688b15c24740b288d300a5b2934828462f85f15599e047a7b5d91f0a4e1e</code><br>如果执行kubeadm init时没有记录下加入集群的命令，可以通过以下命令重新创建<br><code>kubeadm token create --print-join-command</code>  </p><p>在k8s-node1上执行kubeadm join ：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-node1 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm join 192.168.1.150:6443 --token snllb2.u0jdzy8295owjg8s --discovery-token-ca-cert-hash sha256:1dbb688b15c24740b288d300a5b2934828462f85f15599e047a7b5d91f0a4e1e </span>W0628 <span class="token number">13</span>:05:26.974118   <span class="token number">17888</span> join.go:346<span class="token punctuation">]</span> <span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Downloading configuration <span class="token keyword">for</span> the kubelet from the <span class="token string">"kubelet-config-1.18"</span> ConfigMap <span class="token keyword">in</span> the kube-system namespace<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This node has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this node <span class="token function">join</span> the cluster.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重复执行以上操作将k8s-node2也加进去（注意重新执行kubeadm token create –print-join-command）。<br>然后根据提示，我们可以通过 kubectl get nodes 查看节点的状态：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get nodesNAME         STATUS     ROLES    AGE   VERSIONk8s-master   Ready      master   87m   v1.18.5k8s-node1    NotReady   <span class="token operator">&lt;</span>none<span class="token operator">></span>   33s   v1.18.5k8s-node2    NotReady   <span class="token operator">&lt;</span>none<span class="token operator">></span>   29s   v1.18.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nodes状态全部为ready，由于每个节点都需要启动若干组件，如果node节点的状态是 NotReady，可以查看所有节点pod状态，确保所有pod成功拉取到镜像并处于running状态：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get pod --all-namespaces -o wideNAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATESkube-system   coredns-7ff77c879f-5kmsp             <span class="token number">1</span>/1     Running   <span class="token number">1</span>          3h11m   <span class="token number">10.244</span>.0.4      k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   coredns-7ff77c879f-z5v6h             <span class="token number">1</span>/1     Running   <span class="token number">1</span>          3h11m   <span class="token number">10.244</span>.0.5      k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   etcd-k8s-master                      <span class="token number">1</span>/1     Running   <span class="token number">1</span>          3h11m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-apiserver-k8s-master            <span class="token number">1</span>/1     Running   <span class="token number">1</span>          3h11m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-controller-manager-k8s-master   <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3h11m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-flannel-ds-amd64-22jwb          <span class="token number">1</span>/1     Running   <span class="token number">2</span>          105m    <span class="token number">192.168</span>.1.151   k8s-node1    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-flannel-ds-amd64-vn6sj          <span class="token number">1</span>/1     Running   <span class="token number">1</span>          174m    <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-flannel-ds-amd64-vtdqd          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          105m    <span class="token number">192.168</span>.1.152   k8s-node2    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-proxy-gb7qj                     <span class="token number">1</span>/1     Running   <span class="token number">1</span>          105m    <span class="token number">192.168</span>.1.151   k8s-node1    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-proxy-kfnmb                     <span class="token number">1</span>/1     Running   <span class="token number">1</span>          105m    <span class="token number">192.168</span>.1.152   k8s-node2    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-proxy-nsj4g                     <span class="token number">1</span>/1     Running   <span class="token number">1</span>          3h11m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-system   kube-scheduler-k8s-master            <span class="token number">1</span>/1     Running   <span class="token number">2</span>          3h11m   <span class="token number">192.168</span>.1.150   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时，所有的节点都已经 Ready，Kubernetes Cluster 创建成功，一切准备就绪。<br>如果pod状态为Pending、ContainerCreating、ImagePullBackOff 都表明 Pod 没有就绪，Running 才是就绪状态。<br>如果有pod提示Init:ImagePullBackOff，说明这个pod的镜像在对应节点上拉取失败，我们可以通过 kubectl describe pod 查看 Pod 具体情况，以确认拉取失败的镜像：<br><code>kubectl describe pod 坏掉的pod名 --namespace=kube-system</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl describe pod kube-flannel-ds-amd64-vtdqd --namespace<span class="token operator">=</span>kube-system<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Events:  Type     Reason     Age                 From                Message  ----     ------     ----                ----                -------  Normal   Scheduled  2m14s               default-scheduler   Successfully assigned kube-system/kube-flannel-ds-amd64-lzx5v to k8s-node2  Warning  Failed     109s                kubelet, k8s-node2  Failed to pull image <span class="token string">"quay.io/coreos/flannel:v0.12.0-amd64"</span><span class="token builtin class-name">:</span> rpc error: code <span class="token operator">=</span> Unknown desc <span class="token operator">=</span> Error response from daemon: Get https://quay.io/v2/: net/http: TLS handshake <span class="token function">timeout</span>  Warning  Failed     109s                kubelet, k8s-node2  Error: ErrImagePull  Normal   BackOff    108s                kubelet, k8s-node2  Back-off pulling image <span class="token string">"quay.io/coreos/flannel:v0.12.0-amd64"</span>  Warning  Failed     108s                kubelet, k8s-node2  Error: ImagePullBackOff  Normal   Pulling    94s <span class="token punctuation">(</span>x2 over 2m6s<span class="token punctuation">)</span>  kubelet, k8s-node2  pulling image <span class="token string">"quay.io/coreos/flannel:v0.12.0-amd64"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里看最后events输出内容，可以看到在下载 image 时失败，如果网络质量不好，这种情况是很常见的。我们可以耐心等待，因为 Kubernetes 会重试，我们也可以自己手工执行 docker pull 去下载这个镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment"># docker pull quay.io/coreos/flannel:v0.12.0-amd64</span>v0.12.0-amd64: Pulling from coreos/flannelff3a5c916c92: Already exists8a8433d1d437: Already exists306dc0ee491a: Already exists856cbd0b7b9c: Already existsaf6d1e4decc6: Already existsDigest: sha256:88f2b4d96fae34bfff3d46293f7f18d1f9f3ca026b4a4d288f28347fcb6580acStatus: Image is up to <span class="token function">date</span> <span class="token keyword">for</span> quay.io/coreos/flannel:v0.12.0-amd64<span class="token punctuation">[</span>root@k8s-node2 ~<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果无法从 quay.io/coreos/flannel:v0.12.0-amd64 下载镜像，可以从阿里云或者dockerhub镜像仓库下载，然后改回原来的tag即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull registry.cn-hangzhou.aliyuncs.com/kubernetes_containers/flannel:v0.12.0-amd64docker tag registry.cn-hangzhou.aliyuncs.com/kubernetes_containers/flannel:v0.12.0-amd64 quay.io/coreos/flannel:v0.12.0-amd64docker rmi registry.cn-hangzhou.aliyuncs.com/kubernetes_containers/flannel:v0.12.0-amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看master节点下载了哪些镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> docker imagesREPOSITORY                                                        TAG                 IMAGE ID            CREATED             SIZEregistry.aliyuncs.com/google_containers/kube-proxy                v1.18.3             3439b7546f29        <span class="token number">5</span> weeks ago         117MBregistry.aliyuncs.com/google_containers/kube-scheduler            v1.18.3             76216c34ed0c        <span class="token number">5</span> weeks ago         <span class="token number">95</span>.3MBregistry.aliyuncs.com/google_containers/kube-apiserver            v1.18.3             7e28efa976bd        <span class="token number">5</span> weeks ago         173MBregistry.aliyuncs.com/google_containers/kube-controller-manager   v1.18.3             da26705ccb4b        <span class="token number">5</span> weeks ago         162MBquay.io/coreos/flannel                                            v0.12.0-amd64       4e9f801d2217        <span class="token number">3</span> months ago        <span class="token number">52</span>.8MBregistry.aliyuncs.com/google_containers/pause                     <span class="token number">3.2</span>                 80d28bedfe5d        <span class="token number">4</span> months ago        683kBregistry.aliyuncs.com/google_containers/coredns                   <span class="token number">1.6</span>.7               67da37a9a360        <span class="token number">5</span> months ago        <span class="token number">43</span>.8MBregistry.aliyuncs.com/google_containers/etcd                      <span class="token number">3.4</span>.3-0             303ce5db0e90        <span class="token number">8</span> months ago        288MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看node节点下载了哪些镜像：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-node1 ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY                                           TAG                 IMAGE ID            CREATED             SIZEregistry.aliyuncs.com/google_containers/kube-proxy   v1.18.3             3439b7546f29        <span class="token number">5</span> weeks ago         117MBquay.io/coreos/flannel                               v0.12.0-amd64       4e9f801d2217        <span class="token number">3</span> months ago        <span class="token number">52</span>.8MBregistry.aliyuncs.com/google_containers/pause        <span class="token number">3.2</span>                 80d28bedfe5d        <span class="token number">4</span> months ago        683kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试集群各个组件"><a href="#测试集群各个组件" class="headerlink" title="测试集群各个组件"></a>测试集群各个组件</h2><p>首先验证kube-apiserver, kube-controller-manager, kube-scheduler, pod network 是否正常：<br>部署一个 Nginx Deployment，包含2个Pod  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl create deployment nginx --image<span class="token operator">=</span>nginx:alpinedeployment.apps/nginx created<span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl scale deployment nginx --replicas<span class="token operator">=</span><span class="token number">2</span>deployment.apps/nginx scaled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>验证Nginx Pod是否正确运行，并且会分配10.244.开头的集群IP</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get pods -l <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx -o wideNAME                     READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATESnginx-745b4df97d-cgdlt   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          50s   <span class="token number">10.244</span>.2.2   k8s-node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>nginx-745b4df97d-qn6rm   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          40s   <span class="token number">10.244</span>.1.2   k8s-node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再验证一下kube-proxy是否正常：<br>以 NodePort 方式对外提供服务  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl expose deployment nginx --port<span class="token operator">=</span><span class="token number">80</span> --type<span class="token operator">=</span>NodePortservice/nginx exposed<span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get services nginxNAME    TYPE       CLUSTER-IP   EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGEnginx   NodePort   <span class="token number">10.99</span>.83.4   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:30507/TCP   8s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过任意 NodeIP:Port 在集群外部访问这个服务：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">192.168</span>.1.150:30507<span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">192.168</span>.1.151:30507<span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">192.168</span>.1.152:30507<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后验证一下dns, pod network是否正常：<br>运行Busybox并进入交互模式  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl run -it <span class="token function">curl</span> --image<span class="token operator">=</span>radial/busyboxplus:curlIf you don't see a <span class="token builtin class-name">command</span> prompt, try pressing enter.<span class="token punctuation">[</span> root@curl:/ <span class="token punctuation">]</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入nslookup nginx查看是否可以正确解析出集群内的IP，以验证DNS是否正常  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> root@curl:/ <span class="token punctuation">]</span>$ <span class="token function">nslookup</span> nginxServer:    <span class="token number">10.96</span>.0.10Address <span class="token number">1</span>: <span class="token number">10.96</span>.0.10 kube-dns.kube-system.svc.cluster.localName:      nginxAddress <span class="token number">1</span>: <span class="token number">10.99</span>.83.4 nginx.default.svc.cluster.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过服务名进行访问，验证kube-proxy是否正常  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> root@curl:/ <span class="token punctuation">]</span>$ <span class="token function">curl</span> http://nginx/<span class="token punctuation">..</span>.<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分别访问一下2个Pod的内网IP，验证跨Node的网络通信是否正常  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> root@curl:/ <span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">10.244</span>.1.2<span class="token punctuation">..</span>.<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">..</span>.<span class="token punctuation">[</span> root@curl:/ <span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">10.244</span>.2.2<span class="token punctuation">..</span>.<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">..</span>.<span class="token comment"># 退出pod</span>Ctrl+P+Q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pod调度到Master节点"><a href="#Pod调度到Master节点" class="headerlink" title="Pod调度到Master节点"></a>Pod调度到Master节点</h2><p>出于安全考虑，默认配置下Kubernetes不会将Pod调度到Master节点。查看Taints字段默认配置：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl describe node k8s-master <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Taints:             node-role.kubernetes.io/master:NoSchedule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果希望将k8s-master也当作Node节点使用，可以执行如下命令,其中k8s-master是主机节点hostname：<br><code>kubectl taint node k8s-master node-role.kubernetes.io/master-</code><br>修改后Taints字段状态：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl describe node k8s-master                             <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Taints:             <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要恢复Master Only状态，执行如下命令：<br><code>kubectl taint node k8s-master node-role.kubernetes.io/master=:NoSchedule</code>  </p><h2 id="kube-proxy开启ipvs"><a href="#kube-proxy开启ipvs" class="headerlink" title="kube-proxy开启ipvs"></a>kube-proxy开启ipvs</h2><p>修改ConfigMap的kube-system/kube-proxy中的config.conf，<code>mode: &quot;ipvs&quot;</code>：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl edit cm kube-proxy -n kube-systemconfigmap/kube-proxy edited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后重启各个节点上的kube-proxy pod：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get pod -n kube-system <span class="token operator">|</span> <span class="token function">grep</span> kube-proxy <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;system("kubectl delete pod "$1" -n kube-system")&#125;'</span>pod <span class="token string">"kube-proxy-gb7qj"</span> deletedpod <span class="token string">"kube-proxy-kfnmb"</span> deletedpod <span class="token string">"kube-proxy-nsj4g"</span> deleted<span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl get pod -n kube-system <span class="token operator">|</span> <span class="token function">grep</span> kube-proxykube-proxy-469fj                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6skube-proxy-cwszg                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3skube-proxy-l7qzg                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          19s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>centos@k8s-master ~<span class="token punctuation">]</span>$ kubectl logs kube-proxy-469fj -n kube-systemI0628 07:17:58.726825       <span class="token number">1</span> node.go:136<span class="token punctuation">]</span> Successfully retrieved node IP: <span class="token number">192.168</span>.1.152I0628 07:17:58.726979       <span class="token number">1</span> server_others.go:259<span class="token punctuation">]</span> Using ipvs Proxier.W0628 07:17:58.738693       <span class="token number">1</span> proxier.go:429<span class="token punctuation">]</span> IPVS scheduler not specified, use rr by defaultI0628 07:17:58.739315       <span class="token number">1</span> server.go:583<span class="token punctuation">]</span> Version: v1.18.3I0628 07:17:58.761164       <span class="token number">1</span> conntrack.go:52<span class="token punctuation">]</span> Setting nf_conntrack_max to <span class="token number">131072</span>I0628 07:17:58.763090       <span class="token number">1</span> config.go:133<span class="token punctuation">]</span> Starting endpoints config controllerI0628 07:17:58.763140       <span class="token number">1</span> shared_informer.go:223<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> caches to <span class="token function">sync</span> <span class="token keyword">for</span> endpoints configI0628 07:17:58.763180       <span class="token number">1</span> config.go:315<span class="token punctuation">]</span> Starting <span class="token function">service</span> config controllerI0628 07:17:58.763187       <span class="token number">1</span> shared_informer.go:223<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> caches to <span class="token function">sync</span> <span class="token keyword">for</span> <span class="token function">service</span> configI0628 07:17:58.864362       <span class="token number">1</span> shared_informer.go:230<span class="token punctuation">]</span> Caches are synced <span class="token keyword">for</span> endpoints config I0628 07:17:58.880011       <span class="token number">1</span> shared_informer.go:230<span class="token punctuation">]</span> Caches are synced <span class="token keyword">for</span> <span class="token function">service</span> config <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日志中打印出了<code>Using ipvs Proxier</code>，说明ipvs模式已经开启。  </p><h2 id="移除节点和集群"><a href="#移除节点和集群" class="headerlink" title="移除节点和集群"></a>移除节点和集群</h2><p>kubernetes集群移除节点<br>以移除k8s-node2节点为例，在Master节点上运行：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl drain k8s-node2 --delete-local-data --force --ignore-daemonsetskubectl delete node k8s-node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面两条命令执行完成后，在k8s-node2节点执行清理命令，重置kubeadm的安装状态：<br><code>kubeadm reset</code><br>在master上删除node并不会清理k8s-node2运行的容器，需要在删除节点上面手动运行清理命令。<br>如果你想重新配置集群，使用新的参数重新运行kubeadm init或者kubeadm join即可。  </p><p>至此3个节点的集群搭建完成，后续可以继续添加node节点，或者部署dashboard、helm包管理工具、EFK日志系统、Prometheus Operator监控系统、rook+ceph存储系统等组件。  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS</title>
      <link href="/posts/8835.html"/>
      <url>/posts/8835.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 -->  <h1 id="北京"><a href="#北京" class="headerlink" title="北京:"></a>北京:</h1><p><code>202.96.0.133</code>     (ns.bta.net.cn)<br><code>202.96.199.133</code>   (ns.spt.net.cn)<br><code>202.97.16.195</code>    (ns.cn.net)<br><code>202.106.0.20</code>     (gjjline.bta.net.cn)<br><code>202.106.196.115</code>  (linedns.bta.net.cn)  </p><h1 id="广东"><a href="#广东" class="headerlink" title="广东:"></a>广东:</h1><p><code>202.96.128.143</code>   (ns.guangzhou.gd.cn)<br><code>202.96.128.68</code>    (dns.guangzhou.gd.cn)  </p><h1 id="上海"><a href="#上海" class="headerlink" title="上海:"></a>上海:</h1><p><code>202.96.199.132</code>    (ns.sta.net.cn)<br><code>202.96.209.133</code>    (ns-pd.online.sh.cn)  </p><h1 id="湖北武汉"><a href="#湖北武汉" class="headerlink" title="湖北武汉:"></a>湖北武汉:</h1><p><code>202.103.24.68</code>    (ns.wuhan.net.cn)<br><code>202.103.0.117</code>    (ns1.hbwhptt.net.cn)  </p><h1 id="浙江"><a href="#浙江" class="headerlink" title="浙江:"></a>浙江:</h1><p><code>202.96.102.3</code>     (dns.zj.cninfo.net)<br><code>202.96.96.68</code>     (ns.wuhan.net.cn)<br><code>202.96.104.18</code>    (ns.zjnbptt.net.cn)  </p><h1 id="陕西"><a href="#陕西" class="headerlink" title="陕西:"></a>陕西:</h1><p><code>202.100.13.11</code>    (ns.snnic.com)  </p><h1 id="西安"><a href="#西安" class="headerlink" title="西安:"></a>西安:</h1><p><code>202.100.4.15</code>     (ns1.xaonline.com)  </p><h1 id="天津"><a href="#天津" class="headerlink" title="天津:"></a>天津:</h1><p><code>202.99.96.68</code>     (ns.tpt.net.cn)  </p><h1 id="辽宁"><a href="#辽宁" class="headerlink" title="辽宁:"></a>辽宁:</h1><p><code>202.96.75.68</code>     (ns.dcb.ln.cn)<br><code>202.96.64.68</code>     (ns.lnpta.net.cn)<br><code>202.96.69.38</code>     (dns.dl.lnpta.net.cn)   </p><h1 id="江苏"><a href="#江苏" class="headerlink" title="江苏:"></a>江苏:</h1><p><code>202.102.29.3</code>     (pub.jsinfo.net)<br><code>202.102.13.141</code>   (info.ptt.js.cn)<br><code>202.102.24.35</code>    (dns.nj-online.nj.js.cn)  </p><h1 id="安徽："><a href="#安徽：" class="headerlink" title="安徽："></a>安徽：</h1><p><code>202.102.199.68</code>   (ns.ahwhtel.net.cn)  </p><h1 id="四川"><a href="#四川" class="headerlink" title="四川:"></a>四川:</h1><p><code>61.139.2.69</code>      (ns.sc.cninfo.net)  </p><h1 id="重庆"><a href="#重庆" class="headerlink" title="重庆:"></a>重庆:</h1><p><code>61.128.128.68</code>    (cq.cta.net.cn)<br><code>61.128.192.4</code>     (cq.cta.net.cn)  </p><h1 id="成都"><a href="#成都" class="headerlink" title="成都:"></a>成都:</h1><p><code>202.98.96.68</code>      (ns.sccdppt.net.cn)  </p><h1 id="河北"><a href="#河北" class="headerlink" title="河北:"></a>河北:</h1><p><code>202.99.160.68</code>     (ns.hesjptt.net.cn)  </p><h1 id="保定"><a href="#保定" class="headerlink" title="保定:"></a>保定:</h1><p><code>202.99.160.68</code>     (sjzdns.heinfo.net)<br><code>202.99.166.4</code>      (tsdns.heinfo.net)  </p><h1 id="山西"><a href="#山西" class="headerlink" title="山西:"></a>山西:</h1><p><code>202.99.198.6</code>      (ns.sxyzptt.net.cn)  </p><h1 id="吉林"><a href="#吉林" class="headerlink" title="吉林:"></a>吉林:</h1><p><code>202.98.5.68</code>       (ns.jlccptt.net.cn)  </p><h1 id="山东"><a href="#山东" class="headerlink" title="山东:"></a>山东:</h1><p><code>202.102.152.3</code>     (dns1.sdjnptt.net.cn)<br><code>202.102.128.68</code>    (ns.sdjnptt.net.cn)  </p><h1 id="福建"><a href="#福建" class="headerlink" title="福建:"></a>福建:</h1><p><code>202.101.98.55</code>     (dns.fz.fj.cn)  </p><h1 id="湖南"><a href="#湖南" class="headerlink" title="湖南:"></a>湖南:</h1><p><code>202.103.100.206</code>    </p><h1 id="广西"><a href="#广西" class="headerlink" title="广西:"></a>广西:</h1><p><code>202.103.224.68</code>    (nsc0.gxnnptt.net.cn)<br><code>202.103.225.68</code>    (nsc.lzptt.gx.cn)  </p><h1 id="江西"><a href="#江西" class="headerlink" title="江西:"></a>江西:</h1><p><code>202.101.224.68</code>    (ns.jxncptt.net.cn)<br><code>202.101.226.68</code>    (ns.jxjjptt.net.cn)  </p><h1 id="云南"><a href="#云南" class="headerlink" title="云南:"></a>云南:</h1><p><code>202.98.160.68</code>      (ns.ynkmptt.net.cn)  </p><h1 id="河南"><a href="#河南" class="headerlink" title="河南:"></a>河南:</h1><p><code>202.102.227.68</code>     (zz.163.ppp)<br><code>202.102.224.68</code>     (ns1.hazzptt.net.cn)  </p><h1 id="新疆"><a href="#新疆" class="headerlink" title="新疆:"></a>新疆:</h1><p><code>61.128.97.73</code>   </p><h1 id="厦门"><a href="#厦门" class="headerlink" title="厦门:"></a>厦门:</h1><p><code>202.101.103.55</code>     (dns.xm.fj.cn)<br><code>202.101.103.54</code>     (dns2.xm.fj.cn)  </p><h1 id="山东-1"><a href="#山东-1" class="headerlink" title="山东:"></a>山东:</h1><p><code>202.102.134.68</code>     (ns1.sdqdptt.net.cn)  </p><h1 id="长沙"><a href="#长沙" class="headerlink" title="长沙:"></a>长沙:</h1><p><code>202.103.96.68</code>      (dns1.cs.hn.cn)  </p><h1 id="各大网站DNS列表"><a href="#各大网站DNS列表" class="headerlink" title="各大网站DNS列表:"></a>各大网站DNS列表:</h1><p>天府热线:          <code>61.139.2.69</code><br>长春163：          <code>202.98.0.68</code>      <code>202.98.3.68</code><br>263在线：          <code>211.100.2.130</code>    <code>211.100.1.10</code>  </p><h1 id="中国万网："><a href="#中国万网：" class="headerlink" title="中国万网："></a>中国万网：</h1><p><code>218.244.147.40</code>    (dns1.hichina.com)<br><code>218.244.147.69</code>    (dns2.hichina.com)  </p><h1 id="新网："><a href="#新网：" class="headerlink" title="新网："></a>新网：</h1><p><code>211.99.199.194</code><br><code>211.99.199.195</code>   </p><h1 id="263IDC："><a href="#263IDC：" class="headerlink" title="263IDC："></a>263IDC：</h1><p><code>211.100.2.130</code>    (NS.263IDC.COM)<br><code>211.100.1.10</code>     (NSB.263IDC.COM)  </p><h1 id="教育网DNS服务器"><a href="#教育网DNS服务器" class="headerlink" title="教育网DNS服务器:"></a>教育网DNS服务器:</h1><p><code>202.114.64.2</code>     武大DNS1 (一区)<br><code>202.114.96.1</code>     武大DNS2 (二区)<br><code>202.114.96.2</code>     武大DNS3 (二区)<br><code>202.114.112.13</code>   武大DNS4 (三区)  </p><p><code>202.114.0.242</code>    (server20.hust.edu.cn)    华工DNS<br><code>202.112.0.35</code>     (dns.hust.edu.cn)         华工DNS2<br><code>202.112.20.131</code>   (dns.whnet.edu.cn)        华中地区网络中心DNS<br><code>166.111.8.28</code>     (dns-a.tsinghua.edu.cn)   清华DNS1<br><code>166.111.8.29</code>     (dns-b.tsinghua.edu.cn)   清华DNS2<br><code>166.111.8.30</code>     (dns.tsinghua.edu.cn)     清华DNS<br><code>202.117.0.20</code>     (dec3000.xjtu.edu.cn)     西交DNS1<br><code>202.117.0.21</code>     (ns2.xjtu.edu.cn)         西交DNS2<br><code>202.112.26.34</code>    (上交)<br><code>202.112.112.100</code>  (人大)<br><code>162.105.129.27</code>   (北大)<br><code>202.203.128.33</code>   (cernet云南中心主dns)<br><code>202.115.64.33</code>    (西南交大)<br><code>210.33.116.112</code>   (浙江电大)<br><code>202.116.160.33</code>   (华南农业)<br><code>202.112.0.33</code>     (华北网)  </p><h1 id="香港"><a href="#香港" class="headerlink" title="香港:"></a>香港:</h1><p><code>205.252.144.228</code>  (ns1.netvigator.com)  </p><h1 id="澳门"><a href="#澳门" class="headerlink" title="澳门:"></a>澳门:</h1><p><code>202.175.3.8</code>      (vassun2.macau.ctm.net)  </p><h1 id="深圳"><a href="#深圳" class="headerlink" title="深圳:"></a>深圳:</h1><p><code>202.96.134.133</code>   (ns.shenzhen.gd.cn)<br><code>202.96.154.8</code>     (public.szonline.net)<br><code>202.96.154.15</code>    (ns.szonline.net)  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免交互操作远程主机</title>
      <link href="/posts/c6da.html"/>
      <url>/posts/c6da.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>懒  </p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> sshpass   <span class="token comment"># 直接安装</span><span class="token function">apt-get</span> <span class="token function">install</span> sshpass   <span class="token comment"># ubuntu安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>应用范围：可以在命令行直接使用密码来进行远程连接和远程拉取文件。<br>使用前提：对于未连接过的主机。而又不输入yes进行确认，需要进行sshd服务的优化(文末有其它解决方案)：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi /etc/ssh/ssh_config   </span>StrictHostKeyChecking no<span class="token comment"># vi /etc/ssh/sshd_config  </span>GSSAPIAuthentication noUseDNS no<span class="token comment"># service sshd restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>直接远程连接某台主机：<br><code>sshpass -p xxx ssh root@192.168.11.11</code>  </p></li><li><p>本地执行远程机器的命令：<br><code>sshpass -p xxx ssh root@192.168.11.11 &quot;ethtool eth0&quot;</code>  </p></li><li><p>远程连接指定ssh的端口：<br><code>sshpass -p 123456 ssh -p 1000 root@192.168.11.11</code> (当远程主机不是默认的22端口时候)  </p></li><li><p>从密码文件读取文件内容作为密码去远程连接主机 (sshpass不可以直接接带特殊字符意义的密码，需要转义或者用小括号，或者指定文件的方式来连接都可以规避这个问题。)<br><code>sshpass -f xxx.txt  ssh root@192.168.11.11</code>  </p></li><li><p>从远程主机上拉取文件到本地<br><code>sshpass -p &#39;123456&#39; scp root@host_ip:/home/test/t ./tmp/</code><br>从本地上传文件到远程主机<br><code>sshpass -p &#39;123456&#39; scp ./tmp/ root@host_ip:/home/test/t</code>  </p></li><li><p>使用ssh连接远程主机时加上”-o StrictHostKeyChecking=no”的选项，如下：（推荐！！！）</p><pre class="line-numbers language-none"><code class="language-none">1. 做法是使用-o 这个参数，在ssh&#x2F;scp里加上 -o &quot;StrictHostKeyChecking no&quot; 即可跳过这个yes&#x2F;no询问，直接进入下一步，例：Use the -o option：scp -o &quot;StrictHostKeyChecking no&quot; 1.txt user@host:1.txt ssh -o &quot;StrictHostKeyChecking no&quot; user@host2. 一个彻底去掉这个提示的方法是，修改&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件（或$HOME&#x2F;.ssh&#x2F;config）中的配置，添加如下两行配置：一般为：StrictHostKeyChecking ask可改为：StrictHostKeyChecking no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 系统 </tag>
            
            <tag> sshpass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8时间同步</title>
      <link href="/posts/db88.html"/>
      <url>/posts/db88.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h1><p><code>yum -y install ntpdate</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">未找到匹配的参数： ntpdate错误：没有任何匹配: ntpdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h1><ol><li>配置epel源，阿里云Base源（测试不行）  </li><li>安装centos7的ntpdate（原因centos8安装的docker版本是centos7系统版本的）（未测试）  </li><li>更改/etc/chrony.conf授时地址210.72.145.44（中国国家授时中心服务器）（测试通过）  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart chronyd.servicesystemctl <span class="token builtin class-name">enable</span> chronyd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>然后通过date查询时间  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hwclock -s   <span class="token comment"># 从硬件时钟设置系统时间</span>hwclock -w   <span class="token comment"># 从当前系统时间设置硬件时钟</span>hwclock --systz   <span class="token comment"># 基于当前时区设置系统时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> error </tag>
            
            <tag> ntpdate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket ssl</title>
      <link href="/posts/972c.html"/>
      <url>/posts/972c.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>Workerman如何创建一个wss服务，使得客户端可以用过wss协来连接通讯，比如在微信小程序中连接服务端。</p><p>wss协议实际是websocket+SSL，就是在websocket协议上加入SSL层，类似https(http+SSL)。 所以只需要在websocket协议的基础上开启SSL即可支持wss协议。</p><p>方法一 ，直接用Workerman开启SSL<br>准备工作：</p><p>1、Workerman版本不小于3.3.7</p><p>2、PHP安装了openssl扩展</p><p>3、已经申请了证书（pem/crt文件及key文件）放在磁盘任意目录</p><p>代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/Workerman/Autoloader.php'</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token comment">// 证书最好是申请的证书</span><span class="token variable">$context</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token comment">// 更多ssl选项请参考手册 http://php.net/manual/zh/context.ssl.php</span>    <span class="token string single-quoted-string">'ssl'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token comment">// 请使用绝对路径</span>        <span class="token string single-quoted-string">'local_cert'</span>                 <span class="token operator">=></span> <span class="token string single-quoted-string">'磁盘路径/server.pem'</span><span class="token punctuation">,</span> <span class="token comment">// 也可以是crt文件</span>        <span class="token string single-quoted-string">'local_pk'</span>                   <span class="token operator">=></span> <span class="token string single-quoted-string">'磁盘路径/server.key'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'verify_peer'</span>                <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>        <span class="token comment">// 'allow_self_signed' => true, //如果是自签名证书需要开启此选项</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里设置的是websocket协议（端口任意，但是需要保证没被其它程序占用）</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'websocket://0.0.0.0:443'</span><span class="token punctuation">,</span> <span class="token variable">$context</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置transport开启ssl，websocket+ssl即wss</span><span class="token variable">$worker</span><span class="token operator">-></span><span class="token property">transport</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ssl'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-></span><span class="token property">onMessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$con</span><span class="token operator">-></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name static-context">Worker</span><span class="token operator">::</span><span class="token function">runAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上的代码，Workerman就监听了wss协议，客户端就可以通过wss协议来连接workerman实现安全即时通讯了。</p><p>测试</p><p>打开chrome浏览器，按F12打开调试控制台，在Console一栏输入(或者把下面代码放入到html页面用js运行)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">// 证书是会检查域名的，请使用域名连接ws = new WebSocket("wss://域名");ws.onopen = function() &#123;    alert("连接成功");    ws.send('tom');    alert("给服务端发送一个字符串：tom");&#125;;ws.onmessage = function(e) &#123;    alert("收到服务端的消息：" + e.data);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>1、如果无法启动，则一般是443端口被占用，请改成其它端口，注意改成其它端口后客户端连接时需要带上端口号，客户端连接时地址类似wss://domain.com:xxx ，xxx为端口号。如果必须使用443端口请使用方法二代理的方式实现wss。<br>2、wss端口只能通过wss协议访问，ws无法访问wss端口。<br>3、证书一般是与域名绑定的，所以测试的时候客户端请使用域名连接，不要使用ip去连。<br>4、如果出现无法访问的情况，请检查服务器防火墙。<br>5、此方法要求PHP版本&gt;=5.6，因为微信小程序要求tls1.2，而PHP5.6以下版本不支持tls1.2。</p><p>方法二、利用nginx/apache代理wss<br>除了用Workerman自身的SSL，也可以利用nginx/apache作为wss代理转发给workerman（注意此方法workerman部分千万不要设置ssl，否则将无法连接）。</p><p>通讯原理及流程是：<br>1、客户端发起wss连接连到nginx/apache<br>2、nginx/apache将wss协议的数据转换成ws协议数据并转发到Workerman的websocket协议端口<br>3、Workerman收到数据后做业务逻辑处理<br>4、Workerman给客户端发送消息时，则是相反的过程，数据经过nginx/apache转换成wss协议然后发给客户端  </p><p>前提条件及准备工作：<br>1、已经安装nginx，版本不低于1.3<br>2、假设Workerman监听的是8282端口(websocket协议)<br>3、已经申请了证书（pem/crt文件及key文件）放在了/etc/nginx/conf.d/ssl下<br>4、打算利用nginx开启443端口对外提供wss代理服务（端口可以根据需要修改）<br>5、nginx一般作为网站服务器运行着其它服务，为了不影响原来的站点使用，这里使用地址 域名/wss 作为wss的代理入口。也就是客户端连接地址为 <code>wss://域名/wss</code>  </p><p>nginx配置类似如下：  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server &#123;  listen 443;  ssl on;  ssl_certificate &#x2F;etc&#x2F;ssl&#x2F;server.pem;  ssl_certificate_key &#x2F;etc&#x2F;ssl&#x2F;server.key;  ssl_session_timeout 5m;  ssl_session_cache shared:SSL:50m;  ssl_protocols SSLv3 SSLv2 TLSv1 TLSv1.1 TLSv1.2;  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;  location &#x2F;wss  &#123;    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8282;    proxy_http_version 1.1;    proxy_set_header Upgrade $http_upgrade;    proxy_set_header Connection &quot;Upgrade&quot;;    proxy_set_header X-Real-IP $remote_addr;  &#125;  # location &#x2F; &#123;&#125; 站点的其它配置...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">// 证书是会检查域名的，请使用域名连接ws = new WebSocket("wss://域名/wss");ws.onopen = function() &#123;    alert("连接成功");    ws.send('tom');    alert("给服务端发送一个字符串：tom");&#125;;ws.onmessage = function(e) &#123;    alert("收到服务端的消息：" + e.data);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用apache代理wss<br>也可以利用apache作为wss代理转发给workerman（注意如使用apache代理SSL，则workerman部分千万不要设置ssl，否则将无法连接）。  </p><p>准备工作：<br>1、GatewayWorker 监听 8282 端口(websocket协议)<br>2、已经申请了ssl证书, 放在了/server/httpd/cert/ 下<br>3、利用apache转发443端口至指定端口8282<br>4、httpd-ssl.conf 已加载<br>5、openssl 已安装</p><p>启用 proxy_wstunnel_module 模块  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">LoadModule proxy_module modules&#x2F;mod_proxy.soLoadModule proxy_wstunnel_module modules&#x2F;mod_proxy_wstunnel.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置SSL及代理  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#extra&#x2F;httpd-ssl.confDocumentRoot &quot;&#x2F;网站&#x2F;目录&quot;ServerName 域名# Proxy ConfigSSLProxyEngine onProxyRequests OffProxyPass &#x2F;wss ws:&#x2F;&#x2F;127.0.0.1:8282&#x2F;wssProxyPassReverse &#x2F;wss ws:&#x2F;&#x2F;127.0.0.1:8282&#x2F;wss# 添加 SSL 协议支持协议,去掉不安全的协议SSLProtocol all -SSLv2 -SSLv3# 修改加密套件如下SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUMSSLHonorCipherOrder on# 证书公钥配置SSLCertificateFile &#x2F;server&#x2F;httpd&#x2F;cert&#x2F;your.pem# 证书私钥配置SSLCertificateKeyFile &#x2F;server&#x2F;httpd&#x2F;cert&#x2F;your.key# 证书链配置,SSLCertificateChainFile &#x2F;server&#x2F;httpd&#x2F;cert&#x2F;chain.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html">// 证书是会检查域名的，请使用域名连接ws = new WebSocket("wss://域名/wss");ws.onopen = function() &#123;    alert("连接成功");    ws.send('tom');    alert("给服务端发送一个字符串：tom");&#125;;ws.onmessage = function(e) &#123;    alert("收到服务端的消息：" + e.data);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://doc.workerman.net/faq/secure-websocket-server.html">参考链接</a>（此方法未验证）</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
            <tag> apache </tag>
            
            <tag> wss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode创建vue项目</title>
      <link href="/posts/3aa0.html"/>
      <url>/posts/3aa0.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="假设你已安装完vscode和nodejs"><a href="#假设你已安装完vscode和nodejs" class="headerlink" title="假设你已安装完vscode和nodejs"></a>假设你已安装完vscode和nodejs</h1><p><em>在电脑管家自带的软件管理里面可以下载</em>  </p><h2 id="新建文件夹，用vscode打开"><a href="#新建文件夹，用vscode打开" class="headerlink" title="新建文件夹，用vscode打开"></a>新建文件夹，用vscode打开</h2><h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h2><p><code>npm install -g vue-cli</code>  </p><h2 id="安装webpack，打包js"><a href="#安装webpack，打包js" class="headerlink" title="安装webpack，打包js"></a>安装webpack，打包js</h2><p><code>npm install -g webpack</code>  </p><h1 id="新建vue项目"><a href="#新建vue项目" class="headerlink" title="新建vue项目"></a>新建vue项目</h1><p><code>vue init webpack myvue</code>  </p><h2 id="根据提示一步步往下走，看不懂也可以直接回车"><a href="#根据提示一步步往下走，看不懂也可以直接回车" class="headerlink" title="根据提示一步步往下走，看不懂也可以直接回车"></a>根据提示一步步往下走，看不懂也可以直接回车</h2><h2 id="进入myvue文件夹"><a href="#进入myvue文件夹" class="headerlink" title="进入myvue文件夹"></a>进入myvue文件夹</h2><p><code>cd myvue</code>  </p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p><code>npm run dev</code>  </p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><code>http://localhost:8080</code>  </p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>npm run build</code>  </p><h2 id="访问打包好的项目"><a href="#访问打包好的项目" class="headerlink" title="访问打包好的项目"></a>访问打包好的项目</h2><h3 id="先设置iis服务器"><a href="#先设置iis服务器" class="headerlink" title="先设置iis服务器"></a>先设置iis服务器</h3><h3 id="在搜索框里面搜索"><a href="#在搜索框里面搜索" class="headerlink" title="在搜索框里面搜索"></a>在搜索框里面搜索</h3><p><img src="/medias/drawing-bed/notes/vue0.jpg">  </p><h3 id="启用或关闭Windows功能"><a href="#启用或关闭Windows功能" class="headerlink" title="启用或关闭Windows功能"></a>启用或关闭Windows功能</h3><p><img src="/medias/drawing-bed/notes/vue1.jpg">  </p><h3 id="点击Internet-Information-Services出现黑框即可，确定退出"><a href="#点击Internet-Information-Services出现黑框即可，确定退出" class="headerlink" title="点击Internet Information Services出现黑框即可，确定退出"></a>点击Internet Information Services出现黑框即可，确定退出</h3><p><img src="/medias/drawing-bed/notes/vue2.jpg">  </p><h3 id="搜索iis，进入IIS管理器"><a href="#搜索iis，进入IIS管理器" class="headerlink" title="搜索iis，进入IIS管理器"></a>搜索iis，进入IIS管理器</h3><p><img src="/medias/drawing-bed/notes/vue3.jpg">  </p><h3 id="顺序介绍"><a href="#顺序介绍" class="headerlink" title="顺序介绍"></a>顺序介绍</h3><p><img src="/medias/drawing-bed/notes/vue4.jpg">  </p><ol><li>点击这个<code>&gt;</code>符号  </li><li>点击<code>网站</code>  </li><li>点击<code>横条</code>任意位置  </li><li>点击<code>基本设置</code>  </li><li>点击<code>连接为</code>  </li><li>点击<code>特定用户``设置</code>  </li><li>填写当前<code>用户密码</code>，未测试PIN是否可行  </li><li>选择刚才<code>打包生成</code>的<code>dist</code>目录  </li><li><code>测试</code>一下  </li><li>测试不通过，尝试<code>重启</code>一下  <h2 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h2><code>http://localhost</code>  </li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker本地私有仓库</title>
      <link href="/posts/ebe4.html"/>
      <url>/posts/ebe4.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="docker-registry-生成本地私有镜像库"><a href="#docker-registry-生成本地私有镜像库" class="headerlink" title="docker registry 生成本地私有镜像库"></a>docker registry 生成本地私有镜像库</h1><h2 id="获取-registry-镜像"><a href="#获取-registry-镜像" class="headerlink" title="获取 registry　镜像"></a>获取 registry　镜像</h2><p><code>docker pull registry</code></p><h2 id="运行创建容器，-var-lib-registry挂载到本地"><a href="#运行创建容器，-var-lib-registry挂载到本地" class="headerlink" title="运行创建容器，/var/lib/registry挂载到本地"></a>运行创建容器，/var/lib/registry挂载到本地</h2><p><code>docker run -d -p 80:5000 --restart=always --name registry -v /opt/myregistry:/var/lib/registry registry</code></p><h2 id="新增本地镜像仓库地址"><a href="#新增本地镜像仓库地址" class="headerlink" title="新增本地镜像仓库地址"></a>新增本地镜像仓库地址</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span> <span class="token string">EOF&#123;  "registry-mirrors": ["https://fogd2pyo.mirror.aliyuncs.com"],  "insecure-registries": ["docker.registry.com"]&#125;EOF</span><span class="token assign-left variable">IP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ip</span> a <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">"^    inet .* ens| eth.*$"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token builtin class-name">:</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">' '</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F/ <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$IP</span> docker.registry.com"</span> <span class="token operator">>></span> /etc/hosts<span class="token builtin class-name">echo</span> <span class="token string">"其他机器请在hosts中映射 <span class="token variable">$IP</span> docker.registry.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h2><p>systemctl daemon-reload<br>systemctl restart docker</p><h2 id="获取nginx镜像"><a href="#获取nginx镜像" class="headerlink" title="获取nginx镜像"></a>获取nginx镜像</h2><p>docker pull nginx</p><h2 id="重新打上本地的仓库的tag"><a href="#重新打上本地的仓库的tag" class="headerlink" title="重新打上本地的仓库的tag"></a>重新打上本地的仓库的tag</h2><p>docker tag nginx docker.registry.com/nginx</p><h2 id="将打好标签的镜像push到本地仓库"><a href="#将打好标签的镜像push到本地仓库" class="headerlink" title="将打好标签的镜像push到本地仓库"></a>将打好标签的镜像push到本地仓库</h2><p>docker push docker.registry.com/nginx</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="curl访问"><a href="#curl访问" class="headerlink" title="curl访问"></a>curl访问</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://docker.registry.com/v2/_catalog<span class="token comment"># &#123;"repositories":["nginx"]&#125;   # 可以看到有nginx镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="其他机器拉取"><a href="#其他机器拉取" class="headerlink" title="其他机器拉取"></a>其他机器拉取</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/docker/daemon.json</span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://fogd2pyo.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,  <span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"docker.registry.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment"># docker pull docker.registry.com/nginx</span>Using default tag: latestTrying to pull repository docker.registry.com/nginx <span class="token punctuation">..</span>. latest: Pulling from docker.registry.com/nginx8559a31e96f4: Pull complete 8d69e59170f7: Pull complete 3f9f1ec1d262: Pull complete d1f5ff4f210d: Pull complete 1e22bfa8652e: Pull complete Digest: sha256:0efad4d09a419dc6d574c3c3baacb804a530acd61d5eba72cb1f14e1f5ac0c8fStatus: Downloaded newer image <span class="token keyword">for</span> docker.registry.com/nginx:latest<span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY                                                        TAG                 IMAGE ID            CREATED             SIZEmail                                                              latest              421b6fb6f3aa        <span class="token number">2</span> days ago          <span class="token number">167</span> MBregistry.cn-beijing.aliyuncs.com/wujiops/mail                     latest              421b6fb6f3aa        <span class="token number">2</span> days ago          <span class="token number">167</span> MBdocker.registry.com/nginx                                            latest              2622e6cca7eb        <span class="token number">13</span> days ago         <span class="token number">132</span> MB<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><h3 id="创建证书，有效期设置10年"><a href="#创建证书，有效期设置10年" class="headerlink" title="创建证书，有效期设置10年"></a>创建证书，有效期设置10年</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.certsopenssl req -newkey rsa:4096 -nodes -sha256 -keyout ~/.certs/docker.registry.com.key -x509 -days <span class="token number">3650</span> -out ~/.certs/docker.registry.com.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="带证书运行registry容器"><a href="#带证书运行registry容器" class="headerlink" title="带证书运行registry容器"></a>带证书运行registry容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d <span class="token punctuation">\</span>--restart<span class="token operator">=</span>always <span class="token punctuation">\</span>--name registry <span class="token punctuation">\</span>-v ~/.certs/:/certs <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_HTTP_ADDR</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:443 <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_HTTP_TLS_CERTIFICATE</span><span class="token operator">=</span>/certs/docker.registry.com.crt <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_HTTP_TLS_KEY</span><span class="token operator">=</span>/certs/docker.registry.com.key <span class="token punctuation">\</span>-p <span class="token number">443</span>:443 <span class="token punctuation">\</span>-v /opt/registry:/var/lib/registry <span class="token punctuation">\</span>registry:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull httpd   <span class="token comment"># 从官方pull httpd镜像</span>docker tag httpd docker.registry.com/httpd   <span class="token comment"># 重新打标签</span>docker push docker.registry.com/httpd   <span class="token comment"># 将打好标签的镜像push到本地仓库</span><span class="token function">curl</span> https://docker.registry.com/v2/_catalog -k   <span class="token comment"># 验证</span><span class="token punctuation">&#123;</span><span class="token string">"repositories"</span>:<span class="token punctuation">[</span><span class="token string">"docs"</span>,<span class="token string">"httpd"</span>,<span class="token string">"nginx"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 可以看到本地镜像库中已有的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>向服务器发送 <code>https</code> 请求<br><code>curl</code>需要加上<code>-k</code>，<code>wget</code>需要加上<code>--no-check-certificate</code>  </p><h3 id="其他主机访问仓库"><a href="#其他主机访问仓库" class="headerlink" title="其他主机访问仓库"></a>其他主机访问仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/docker/daemon.json   <span class="token comment"># 配置insecure-registries</span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://fogd2pyo.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,  <span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"docker.registry.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token function">cat</span> /etc/hosts <span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.1.40 docker.registry.com   <span class="token comment"># 主机映射</span>docker pull docker.registry.com/httpd   <span class="token comment"># pull镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于用户密码访问"><a href="#基于用户密码访问" class="headerlink" title="基于用户密码访问"></a>基于用户密码访问</h2><h3 id="使用htpasswd工具，生成验证文件"><a href="#使用htpasswd工具，生成验证文件" class="headerlink" title="使用htpasswd工具，生成验证文件"></a>使用htpasswd工具，生成验证文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> httpd-tools  htpasswd -Bbn wujiops <span class="token number">123456</span> <span class="token operator">></span> ~/.certs/.htpasswd   <span class="token comment"># 这里我和ssl加密文件放在一个文件夹下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="带证书和用户认证运行registry容器"><a href="#带证书和用户认证运行registry容器" class="headerlink" title="带证书和用户认证运行registry容器"></a>带证书和用户认证运行registry容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d <span class="token punctuation">\</span>--restart<span class="token operator">=</span>always <span class="token punctuation">\</span>--name registry <span class="token punctuation">\</span>-v ~/.certs/:/certs <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_HTTP_ADDR</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:443 <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_HTTP_TLS_CERTIFICATE</span><span class="token operator">=</span>/certs/docker.registry.com.crt <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_HTTP_TLS_KEY</span><span class="token operator">=</span>/certs/docker.registry.com.key <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_AUTH</span><span class="token operator">=</span>htpasswd <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_AUTH_HTPASSWD_REALM</span><span class="token operator">=</span><span class="token string">"Registry Realm"</span> <span class="token punctuation">\</span>-e <span class="token assign-left variable">REGISTRY_AUTH_HTPASSWD_PATH</span><span class="token operator">=</span>/certs/.htpasswd <span class="token punctuation">\</span>-p <span class="token number">443</span>:443 <span class="token punctuation">\</span>-v /opt/registry:/var/lib/registry <span class="token punctuation">\</span>docker.registry.com/registry:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>执行<code>docker-compose up -d</code>效果和上面的命令相同  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">registry</span><span class="token punctuation">:</span>  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.registry.com/registry  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> registry  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>  <span class="token key atrule">environment</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> REGISTRY_AUTH=htpasswd    <span class="token punctuation">-</span> REGISTRY_AUTH_HTPASSWD_REALM=Registry_Realm    <span class="token punctuation">-</span> REGISTRY_AUTH_HTPASSWD_PATH=~/.certs/.htpasswd    <span class="token punctuation">-</span> REGISTRY_HTTP_ADDR=0.0.0.0<span class="token punctuation">:</span><span class="token number">443</span>    <span class="token punctuation">-</span> REGISTRY_HTTP_TLS_CERTIFICATE=/certs/docker.registry.com.crt    <span class="token punctuation">-</span> REGISTRY_HTTP_TLS_KEY=/certs/docker.registry.com.key  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ~/.certs/<span class="token punctuation">:</span>/auth    <span class="token punctuation">-</span> /opt/registry<span class="token punctuation">:</span>/var/lib/registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看本地仓库的镜像"><a href="#查看本地仓库的镜像" class="headerlink" title="查看本地仓库的镜像"></a>查看本地仓库的镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://docker.registry.com/v2/_catalog -k<span class="token punctuation">&#123;</span><span class="token string">"errors"</span>:<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token builtin class-name">:</span><span class="token string">"UNAUTHORIZED"</span>,<span class="token string">"message"</span><span class="token builtin class-name">:</span><span class="token string">"authentication required"</span>,<span class="token string">"detail"</span>:<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"Type"</span><span class="token builtin class-name">:</span><span class="token string">"registry"</span>,<span class="token string">"Class"</span><span class="token builtin class-name">:</span><span class="token string">""</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span><span class="token string">"catalog"</span>,<span class="token string">"Action"</span><span class="token builtin class-name">:</span><span class="token string">"*"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此种方法与上述使用证书的区别在于，此时查看文件_catalog中的内容时，发现是加密过的，无法显示<br>注意：  </p><ol><li>_catalog相当于一个API接口,查看私有仓库中有哪些镜像  </li><li>必须先做加密后做认证，因为如果反着来就没有意义，直接可以通过数据包知道密码  </li></ol><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcpdump抓包分析</title>
      <link href="/posts/45a4.html"/>
      <url>/posts/45a4.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="三次握手四次断开"><a href="#三次握手四次断开" class="headerlink" title="三次握手四次断开"></a>三次握手四次断开</h1><p><img src="/medias/drawing-bed/others/0.jpg"></p><h1 id="tcpdump命令"><a href="#tcpdump命令" class="headerlink" title="tcpdump命令"></a>tcpdump命令</h1><p>Linux tcpdump命令用于倾倒网络传输数据。<br>执行tcpdump指令可列出经过指定网络界面的数据包文件头，在Linux操作系统中，你必须是系统管理员。<br><code>tcpdump [-adeflnNOpqStvx][-c&lt;数据包数目&gt;][-dd][-ddd][-F&lt;表达文件&gt;][-i&lt;网络界面&gt;][-r&lt;数据包文件&gt;][-s&lt;数据包大小&gt;][-tt][-T&lt;数据包类型&gt;][-vv][-w&lt;数据包文件&gt;][输出数据栏位]</code>   </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-a 尝试将网络和广播地址转换成名称。-c<span class="token operator">&lt;</span>数据包数目<span class="token operator">></span> 收到指定的数据包数目后，就停止进行倾倒操作。-d 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。-dd 把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。-ddd 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。-e 在每列倾倒资料上显示连接层级的文件头。-f 用数字显示网际网络地址。-F<span class="token operator">&lt;</span>表达文件<span class="token operator">></span> 指定内含表达方式的文件。-i<span class="token operator">&lt;</span>网络界面<span class="token operator">></span> 使用指定的网络截面送出数据包。-l 使用标准输出列的缓冲区。-n 不把主机的网络地址转换成名字。-N 不列出域名。-O 不将数据包编码最佳化。-p 不让网络界面进入混杂模式。-q 快速输出，仅列出少数的传输协议信息。-r<span class="token operator">&lt;</span>数据包文件<span class="token operator">></span> 从指定的文件读取数据包数据。-s<span class="token operator">&lt;</span>数据包大小<span class="token operator">></span> 设置每个数据包的大小。-S 用绝对而非相对数值列出TCP关联数。-t 在每列倾倒资料上不显示时间戳记。-tt 在每列倾倒资料上显示未经格式化的时间戳记。-T<span class="token operator">&lt;</span>数据包类型<span class="token operator">></span> 强制将表达方式所指定的数据包转译成设置的数据包类型。-v 详细显示指令执行过程。-vv 更详细显示指令执行过程。-x 用十六进制字码列出数据包资料。-w<span class="token operator">&lt;</span>数据包文件<span class="token operator">></span> 把数据包数据写入指定的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c2s SYN(seq=0)<br>s2c SYN(seq=0) ACK(ack=1)<br>c2s ACK(seq=1 ack=1)</p><hr><p>c2s FIN(seq=1) ACK(ack=1)<br>s2c ACK(seq=1 ack=2)<br>s2c FIN(seq=1) ACK(ack=2)<br>c2s ACK(seq=2 ack=2)</p><hr><hr><p>c2s SYN(seq=0)<br>s2c SYN(seq=0) ACK(ack=1)<br>c2s ACK(seq=1 ack=1)</p><hr><p>c2s PSH(seq=1) ACK(ack=1)<br>s2c ACK(seq=1 ack=3)</p><hr><p>c2s FIN(seq=3) ACK(ack=1)<br>s2c FIN(seq=1) ACK(ack=4)<br>c2s ACK(seq=4 ack=2)</p><p><img src="/medias/drawing-bed/others/1.jpg"></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux邮件服务</title>
      <link href="/posts/3c5e.html"/>
      <url>/posts/3c5e.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="关闭、卸载-sendmail-postfix"><a href="#关闭、卸载-sendmail-postfix" class="headerlink" title="关闭、卸载 sendmail/postfix"></a>关闭、卸载 sendmail/postfix</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sendmial</span><span class="token function">service</span> <span class="token function">sendmail</span> stop<span class="token function">chkconfig</span> <span class="token function">sendmail</span> off<span class="token comment"># postfix</span><span class="token function">service</span> postfix stop<span class="token function">chkconfig</span> postfix off<span class="token comment"># 直接卸载三思啊🥴</span>yum remove <span class="token function">sendmail</span>yum remove postfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装mailx"><a href="#安装mailx" class="headerlink" title="安装mailx"></a>安装mailx</h2><p><code>yum install mailx -y</code><br>Ubuntu安装：<br><code>sudo apt-get install heirloom-mailx</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 时间同步</span>yum -y <span class="token function">install</span> ntpdatentpdate <span class="token number">210.72</span>.145.44ntpdate ntp.api.bzntpdate -u <span class="token number">210.72</span>.145.44   <span class="token comment"># 可以越过主机防火墙</span>clock -w   <span class="token comment"># 将时间同步到硬件时钟</span>---分割线---<span class="token comment"># 163邮箱</span><span class="token number">1</span><span class="token punctuation">)</span>vim /etc/mail.rc   <span class="token comment"># 最后插入已下内容：</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>150xxxxxxxx@163.com<span class="token builtin class-name">set</span> <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtp.163.com<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>150xxxxxxxx@163.com<span class="token builtin class-name">set</span> smtp-auth-password<span class="token operator">=</span>xxxxxx   <span class="token comment"># 此密码为授权码，在163网页邮箱可设置</span><span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login<span class="token number">2</span><span class="token punctuation">)</span>echo <span class="token string">"test mail"</span> <span class="token operator">|</span> mail -vvv -s <span class="token string">"subject"</span> xxx@qq.com   <span class="token comment"># 命令行验证</span><span class="token comment"># qq邮箱</span><span class="token number">1</span><span class="token punctuation">)</span>vim /etc/mail.rc   <span class="token comment"># 最后插入已下内容：</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>xxxx@qq.com<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>xxxx@qq.com<span class="token builtin class-name">set</span> smtp-auth-password<span class="token operator">=</span>xxxxxx   <span class="token comment"># 此密码为授权码，在qq邮箱网页版中设置 </span><span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login<span class="token builtin class-name">set</span> ssl-verify<span class="token operator">=</span>ignore<span class="token builtin class-name">set</span> nss-config-dir<span class="token operator">=~</span>/.certs<span class="token builtin class-name">set</span> <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtps://smtp.qq.com:465<span class="token number">2</span><span class="token punctuation">)</span>mkdir ~/.certs <span class="token operator">&amp;&amp;</span> certutil -N -d ~/.certs   <span class="token comment"># 命令行执行此命令，输入8位密码(任意)，例如wj123123</span><span class="token number">3</span><span class="token punctuation">)</span>echo <span class="token string">"test mail"</span> <span class="token operator">|</span> mail -vvv -s <span class="token string">"subject"</span> 150xxxxxxxx@163.com   <span class="token comment"># 命令行验证</span><span class="token comment"># 腾讯企业邮箱</span><span class="token number">1</span><span class="token punctuation">)</span>vim /etc/mail.rc<span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>dev@xxx.com<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>dev@xxx.com<span class="token builtin class-name">set</span> smtp-auth-password<span class="token operator">=</span>xxxxxx<span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login<span class="token builtin class-name">set</span> <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtp://smtp.exmail.qq.com<span class="token number">3</span><span class="token punctuation">)</span>echo <span class="token string">"test mail"</span> <span class="token operator">|</span> mail -vvv -s <span class="token string">"subject"</span> 150xxxxxxxx@163.com   <span class="token comment"># 命令行验证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> mail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python TCP服务</title>
      <link href="/posts/f7a9.html"/>
      <url>/posts/f7a9.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>客户端连接超时自动断开，并不会向TCP server发送断开请求，导致server端一直处于连接状态，客户端重连失败。  </p><h1 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h1><ol><li><p>复现问题<br>用tcpdump抓包<code>tcpdump tcp port 10000</code>（结果展示如下：）<br>可以看到客户端<code>106.202.127.124</code>主动断开TCP server<code>www.tcpserver.com</code>是正常的（三次握手四次断开）<br>当客户端是因为超时断开（处于注二状态，TCPserver未得到回复），或者断网（处于注一状态，未发生挥手）  </p></li><li><p>解决问题<br>在TCP server设置socket 30s超时，客户端发送消息后，30s没有动作TCP server处于等待连接的状态<br>这时候需要客户端主动断开重连即可  </p><pre class="line-numbers language-none"><code class="language-none">Timeout.Server is running. Waiting client...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>附录tcpdump抓包内容：  </p><pre class="line-numbers language-none"><code class="language-none">①16:59:58.751349 IP 106.202.127.124.broad.bj.bj.static.163data.com.cn.40780 &gt; www.tcpserver.com.ndmp: Flags [S], seq 642708694, win 29200, options [mss 1440,sackOK,TS val 3136578883 ecr 0,nop,wscale 7], length 0②16:59:58.751428 IP www.tcpserver.com.ndmp &gt; 106.202.127.124.broad.bj.bj.static.163data.com.cn.40780: Flags [S.], seq 2548085368, ack 642708695, win 28960, options [mss 1460,sackOK,TS val 750917687 ecr 3136578883,nop,wscale 7], length 0③16:59:58.765865 IP 106.202.127.124.broad.bj.bj.static.163data.com.cn.40780 &gt; www.tcpserver.com.ndmp: Flags [.], ack 1, win 229, options [nop,nop,TS val 3136578896 ecr 750917687], length 0---分割线---①注一17:00:04.932512 IP 106.202.127.124.broad.bj.bj.static.163data.com.cn.40780 &gt; www.tcpserver.com.ndmp: Flags [F.], seq 1, ack 1, win 229, options [nop,nop,TS val 3136585065 ecr 750917687], length 0②③注二17:00:04.932669 IP www.tcpserver.com.ndmp &gt; 106.202.127.124.broad.bj.bj.static.163data.com.cn.40780: Flags [F.], seq 1, ack 2, win 227, options [nop,nop,TS val 750923869 ecr 3136585065], length 0④17:00:04.944759 IP 106.202.127.124.broad.bj.bj.static.163data.com.cn.40780 &gt; www.tcpserver.com.ndmp: Flags [.], ack 2, win 229, options [nop,nop,TS val 3136585075 ecr 750923869], length 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附录三个脚本：  </p><h1 id="TCP-server端"><a href="#TCP-server端" class="headerlink" title="TCP server端"></a>TCP server端</h1><p>开启端口，绑定到主机<br><code>tcp_update.py</code>  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># TCP server</span><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> pymysql<span class="token keyword">import</span> time<span class="token keyword">import</span> _thread<span class="token keyword">import</span> socketsocket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># Manual Data</span>db_2 <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'$IP'</span><span class="token punctuation">,</span> port<span class="token operator">=</span>$PORT<span class="token punctuation">,</span>                       user<span class="token operator">=</span><span class="token string">'$NAME'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'$PASSWORD'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">"$DATABASE"</span><span class="token punctuation">)</span>cursor_2 <span class="token operator">=</span> db_2<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp_str <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> temp_str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">database_update</span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"UPDATE dataTestUDP SET value = "</span> <span class="token operator">+</span> \        <span class="token builtin">str</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" WHERE attribute = \""</span> <span class="token operator">+</span> attribute <span class="token operator">+</span> <span class="token string">"\""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        db_2<span class="token punctuation">.</span>ping<span class="token punctuation">(</span>reconnect<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        cursor_2<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        db_2<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token comment"># 如果发生错误则回滚</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Database Error'</span><span class="token punctuation">)</span>        db_2<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 关闭数据库连接</span>        db_2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tcp_listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    HOST <span class="token operator">=</span> <span class="token string">'192.168.1.2'</span>    PORT <span class="token operator">=</span> <span class="token number">10000</span>    BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>    ADDRESS <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>    tcpServerSocket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">)</span>    tcpServerSocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server starts，listening port &#123;&#125;..."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ADDRESS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcpServerSocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            client_socket <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Server is running. Waiting client...'</span><span class="token punctuation">)</span>                client_socket<span class="token punctuation">,</span> client_address <span class="token operator">=</span> tcpServerSocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Client &#123;&#125; Connected！'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        data <span class="token operator">=</span> client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> data<span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>                                <span class="token string">'Received Message &#123;&#125;(&#123;&#125; bytes) from &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gb2312'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                               client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">try</span><span class="token punctuation">:</span>                                a<span class="token punctuation">,</span> v <span class="token operator">=</span> process<span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gb2312'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                database_update<span class="token punctuation">(</span>a<span class="token punctuation">,</span> v<span class="token punctuation">)</span>                            <span class="token keyword">except</span><span class="token punctuation">:</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Data Error'</span><span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Client &#123;&#125; disconnects!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">break</span>                    <span class="token keyword">except</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connenction Reset by &#123;&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Timeout.'</span><span class="token punctuation">)</span>                <span class="token keyword">pass</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> client_socket <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        tcpServerSocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_listener<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据微调"><a href="#数据微调" class="headerlink" title="数据微调"></a>数据微调</h1><p><code>auto_update.py</code>  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># auto update</span><span class="token keyword">import</span> pymysql<span class="token keyword">import</span> time<span class="token comment"># Auto Data</span>db_1 <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'$IP'</span><span class="token punctuation">,</span> port<span class="token operator">=</span>$PORT<span class="token punctuation">,</span>                       user<span class="token operator">=</span><span class="token string">'$NAME'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'$PASSWORD'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">"$DATABASE"</span><span class="token punctuation">)</span>cursor_1 <span class="token operator">=</span> db_1<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Update fake data automatically</span><span class="token keyword">def</span> <span class="token function">database_auto_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql_1 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""UPDATE dataTestFake SET id = 0 WHERE id = 10"""</span>    sql_2 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""UPDATE dataTestFake SET id = id + 1 WHERE id &lt; 10"""</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 执行sql语句</span>            db_1<span class="token punctuation">.</span>ping<span class="token punctuation">(</span>reconnect<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            cursor_1<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_1<span class="token punctuation">)</span>            cursor_1<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_2<span class="token punctuation">)</span>            <span class="token comment"># 提交到数据库执行</span>            db_1<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment"># 如果发生错误则回滚</span>            db_1<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 关闭数据库连接</span>            db_1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    database_auto_update<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="客户端发送数据"><a href="#客户端发送数据" class="headerlink" title="客户端发送数据"></a>客户端发送数据</h1><p><code>test.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test py</span><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>HOST <span class="token operator">=</span> <span class="token string">'192.168.1.2'</span>PORT <span class="token operator">=</span> <span class="token number">10000</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDRESS <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>tcpClientSocket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">)</span>tcpClientSocket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>        <span class="token keyword">break</span>    tcpClientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gb2312'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Disconnect!"</span><span class="token punctuation">)</span>tcpClientSocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
            <tag> python </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次docker安装报错</title>
      <link href="/posts/94b7.html"/>
      <url>/posts/94b7.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="centos8-安装docker-ce报错如下："><a href="#centos8-安装docker-ce报错如下：" class="headerlink" title="centos8 安装docker-ce报错如下："></a>centos8 安装docker-ce报错如下：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum install docker-ce docker-ce-cli containerd.io</span>上次元数据过期检查：0:00:42 前，执行于 <span class="token number">2020</span>年06月13日 星期六 <span class="token number">10</span>时05分18秒。错误： 问题: package docker-ce-3:19.03.11-3.el7.x86_64 requires containerd.io <span class="token operator">>=</span> <span class="token number">1.2</span>.2-3, but none of the providers can be installed  - cannot <span class="token function">install</span> the best candidate <span class="token keyword">for</span> the job  - package containerd.io-1.2.10-3.2.el7.x86_64 is excluded  - package containerd.io-1.2.13-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.13-3.2.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.3.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.el7.x86_64 is excluded  - package containerd.io-1.2.4-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.5-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.6-3.3.el7.x86_64 is excluded<span class="token punctuation">(</span>尝试添加 <span class="token string">'--skip-broken'</span> 来跳过无法安装的软件包 或 <span class="token string">'--nobest'</span> 来不只使用最佳选择的软件包<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装包 <code>docker-ce-3:19.03.11-3.el7.x86_64</code> 需要 <code>containerd.io</code> 版本 <code>&gt;= 1.2.2-3</code> <code>docker</code> 暂未更新到 <code>8</code> 版本支持。  </p><p>这里下载centos7的<code>containerd.io</code>最新包  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行如果报错：（再次执行或更换dnf安装，直接执行两边上面的命令即可）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package containerd.io-1.2.6-3.3.el7.x86_64 does not verify: no digest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错：<code>*.rpm is not signed</code>或者<code>*.rpm is not signed</code>或者<code>GPG 公钥</code>未安装  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--nogpgcheck <span class="token comment"># yum安装的时候使用此选项跳过公钥验证，你也可以到各大yum源的资源站下载导入公钥</span><span class="token comment"># rpm --import /公钥全名</span><span class="token comment"># gpgcheck=0或者在yum仓库里将其设置为0，不进行公钥验证。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> docker </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次nginx 413报错</title>
      <link href="/posts/5ad5.html"/>
      <url>/posts/5ad5.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>报错信息：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">**** - - <span class="token punctuation">[</span>05/Jun/2020:11:25:49 +0800<span class="token punctuation">]</span> <span class="token string">"POST /b****s HTTP/1.1"</span> <span class="token number">413</span> <span class="token number">183</span> <span class="token string">"-"</span> <span class="token string">"Apache-HttpClient/4.5.8 (Java/1.8.0_181)"</span> <span class="token string">"-"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决，在nginx配置文件中加入以下两行即可，配置文件需要根据自己实际nginx配置去找，我的是<code>/etc/nginx/conf.d/***com.conf</code>  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">client_max_body_size 10m;   # 设置成实际需要的大小即可，一般是8-10Mclient_body_buffer_size 128k;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要将上面两行配置放在报错接口的<code>location / &#123;&#125;</code>中即可<br>我的反向代理配置：  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">location &#x2F;**** &#123;    proxy_pass http:&#x2F;&#x2F;1****5;    proxy_redirect off;   # 对发送给客户端的URL进行修改    proxy_set_header        Host    $host;    proxy_set_header        X-Real-IP       $remote_addr;    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;    proxy_max_temp_file_size 0;   # 设置临时文件的总大小    proxy_connect_timeout 90;   # nginx跟后端服务器连接超时时间（代理连接超时）    proxy_send_timeout 90;   # 后端服务器数据回传时间(代理发送超时)    proxy_read_timeout 90;   # 连接成功后，后端服务器响应时间(代理接收超时)    proxy_buffer_size 4k;   # 设置代理服务器（nginx）保存用户头信息的缓冲区大小    proxy_buffers 4 32k;   # 该指令设置缓冲区的大小和数量,从被代理的后端服务器取得的响应内容,会放置到这里    proxy_busy_buffers_size 64k;   # 所有处在busy状态的buffer size加起来不能超过proxy_busy_buffers_size    proxy_temp_file_write_size 64k;   # 如果response的内容很大的话，Nginx会接收并把他们写入到temp_file里去。busy的buffer传输完了会从temp_file里面接着读数据，直到传输完毕  client_max_body_size 10m;   # 允许客户端请求的最大单文件字节数  client_body_buffer_size 128k;   # 缓冲区代理缓冲用户端请求的最大字节数（请求多）&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 413 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为云mrs报错</title>
      <link href="/posts/3c78.html"/>
      <url>/posts/3c78.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>两台电脑截图，导致图片丢失了一部分😭  </p><p>起因：开发同学使用sqlline.py操作HBase报错  </p><p>首先登陆MapReduce服务控制台查看报错：<br><img src="/medias/drawing-bed/mrs/0.png"></p><p>参考的排错<a href="https://support.huaweicloud.com/usermanual-mrs/mrs_01_0695.html">文档</a> 并没有用。<br>按文档所说zookeeper，时间，hdfs等都是好的<br><img src="/medias/drawing-bed/mrs/3.png"></p><p>根据报错信息查看服务器RegionServer是好的<br><img src="/medias/drawing-bed/mrs/1.png"></p><p>从这里也能看到各项数据正常，但是RegionServer时好时坏<br><img src="/medias/drawing-bed/mrs/4.png"></p><p>如下图所示（怀疑是拉起之后就被干掉，因为上图的HRegionServer也会消失）<br><img src="/medias/drawing-bed/mrs/5.png"></p><p>这里进行了重启大法，大法GG😩<br><img src="/medias/drawing-bed/mrs/2.png"></p><p>在mrs控制台找到hbase服务，进入监控页面，可以看到好几张表处于被打开的状态<br><img src="/medias/drawing-bed/mrs/7.png"></p><p>往下可以看到有25张表处于RIT状态！！！<br><img src="/medias/drawing-bed/mrs/8.png"></p><p>服务器日志也能看到OPENING状态的表：<br><img src="/medias/drawing-bed/mrs/0.jpg"></p><p>就是这个鬼，参考<a href="https://www.jianshu.com/p/d5697506741e">文章</a>实际并没有解决🤟<br>因为我的集群hbase是2.1.1版本，很多命令被2.0+的hbase抛弃了，文章中的命令我这里执行报错：不存在<br>另外一篇<a href="https://blog.csdn.net/kinglyjn/article/details/78790425">文章</a>给了解决思路，查看日志是否是内存泄漏导致的RIT  </p><p>这里的截图是错的，实际修改的是ThriftServer，原来的Xms128M Xmx128M修改为Xms1024M Xmx1024M<br><img src="/medias/drawing-bed/mrs/6.png"></p><p>修改之后重启相关服务<code>HBase</code> <code>Hue</code>，修改完会提示重启，按照提示来就行<br>3分钟内，告警消失，HBase恢复  </p><p>这里解决launcher.log过大350G+(磁盘空间告警)<br><img src="/medias/drawing-bed/mrs/9.png"></p><p>这里解决熵告警：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> –ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"haveged"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep"</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"haveged"</span>yum -y <span class="token function">install</span> havegedsystemctl start havegedsystemctl <span class="token builtin class-name">enable</span> haveged.service<span class="token function">cat</span> /dev/random <span class="token operator">|</span> od –x<span class="token function">cat</span> /opt/mrs_clusterinfo <span class="token function">cat</span> /proc/sys/kernel/random/entropy_avail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决磁盘满导致的数据不同步告警：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /srv/BigData/journalnode/hacluster/current/<span class="token function">rm</span> -rf edits_*<span class="token function">rm</span> committed-txid <span class="token function">cat</span> /etc/hosts<span class="token function">scp</span> root@192.168.1.73:/srv/BigData/journalnode/hacluster/current/edit_000* ./<span class="token function">scp</span> root@192.168.1.73:/srv/BigData/journalnode/hacluster/current/edits_000* ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细操作日志：<br>其中<code>/opt/Bigdata/nodeagent/bin/start-agent.sh</code>是禁止RegionServer被自动拉起，这里可以忽略，走的弯路  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /proc/sys/kernel/random/entropy_avail/bin/rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> -w <span class="token string">"rng-tools"</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep"</span> <span class="token operator">|</span> <span class="token function">grep</span> rngd <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">" "</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"\-o/dev/random"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"\-r/dev/urandom"</span><span class="token function">cat</span> /proc/sys/kernel/random/entropy_availss -anptl <span class="token operator">|</span> <span class="token function">grep</span> :16020<span class="token function">su</span> - omm<span class="token builtin class-name">cd</span> /srv/BigData/journalnode/hacluster/current/ll -ltr<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/<span class="token function">less</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.logll -ltr<span class="token function">vim</span> stop.log<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.out<span class="token function">df</span> -h<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.log ll -ltr<span class="token function">vim</span> regionserver-omm-20190826200902-pid11935-gc.log.0.current <span class="token function">df</span> -h<span class="token function">du</span> -sh /*<span class="token builtin class-name">cd</span> /var/<span class="token function">du</span> -sh /var/*<span class="token builtin class-name">cd</span> /var/log/<span class="token function">du</span> -sh ./*<span class="token builtin class-name">cd</span> Bigdata/<span class="token function">du</span> -sh ./*<span class="token builtin class-name">cd</span> presto<span class="token function">du</span> -sh ./*<span class="token builtin class-name">cd</span> worker/<span class="token function">du</span> -sh ./*<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token function">vi</span> regionserver-omm-20190828154122-pid6762-gc.log.0.current jpsll <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">10361</span><span class="token function">vi</span> regionserver-omm-20190828183909-pid10361-gc.log.3.current<span class="token function">ssh</span> node-master1rowr<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll -ltr<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.out<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token function">unzip</span> hbase-omm-regionserver-node-ana-corelSHL.2020-06-04_10-57-56.<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.log.zipll -ltr<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.2020-06-04_10-57-56.<span class="token punctuation">\</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">\</span><span class="token punctuation">]</span>.log<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.out<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll -ltr<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.out<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token function">free</span> -h<span class="token function">top</span> -c<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/<span class="token function">ls</span><span class="token builtin class-name">cd</span> rs/<span class="token function">ls</span><span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.2019-08-24_02-55-49.<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.log<span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> regionserver<span class="token function">ls</span><span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.out<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log<span class="token function">netstat</span> -apn <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">2181</span>ll<span class="token function">vi</span> stop.logll<span class="token builtin class-name">cd</span> /var/log/Bigdata/nodeagent/ll<span class="token builtin class-name">cd</span> agentlog/ll<span class="token function">vi</span> agent.log <span class="token builtin class-name">cd</span> -ll<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll<span class="token function">vi</span> regionserver-omm-20200604162930-pid7626-gc.log.0.current<span class="token function">free</span> -gjps<span class="token function">top</span> -cll<span class="token function">vi</span> stop.log<span class="token builtin class-name">cd</span> /var/log/Bigdata/nodeagent/ll<span class="token builtin class-name">cd</span> agentlog/ll<span class="token function">vi</span> agent.log <span class="token builtin class-name">cd</span> /opt/Bigdata/nodeagent/bin/ll<span class="token function">vi</span> start-agent.sh <span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nodeagentll<span class="token function">vi</span> start-agent.sh <span class="token builtin class-name">cd</span> /opt/Bigdata/MRS_Current/1_13_RegionServer/install/ll<span class="token builtin class-name">cd</span> hbasell<span class="token builtin class-name">cd</span> bin/ll<span class="token builtin class-name">cd</span> /opt/Bigdata/MRS_Current/ll<span class="token builtin class-name">cd</span> 1_13_RegionServer/ll<span class="token builtin class-name">cd</span> etc/ll<span class="token function">vi</span> ENV_VARS jps<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token builtin class-name">exit</span><span class="token builtin class-name">cd</span> /opt/Bigdata/nodeagent/ll<span class="token builtin class-name">cd</span> bin/ll<span class="token function">mv</span> start-agent.sh start-agent.sh.bak<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nodeagent<span class="token function">kill</span> -9 <span class="token number">7548</span><span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll<span class="token function">vi</span> <span class="token number">14316</span><span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log jps<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> region<span class="token builtin class-name">cd</span> /opt/Bigdata/nodeagent/ll<span class="token builtin class-name">cd</span> bin/ll<span class="token function">mv</span> start-agent.sh.bak start-agent.sh<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nodeagentjps<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll<span class="token function">date</span>jps<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> regionll<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nodeagetn<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nodeag<span class="token builtin class-name">cd</span> /opt/Bigdata/nodeagent/ll<span class="token builtin class-name">cd</span> bin/lljps<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nodeagentjps<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll<span class="token function">date</span>jps<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> agentjps<span class="token function">kill</span> -9 <span class="token number">10893</span><span class="token function">mv</span> /opt/Bigdata/nodeagent/bin/start-agent.sh /opt/Bigdata/nodeagent/bin/start-agent.sh.bakjpslll<span class="token function">date</span><span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log jps<span class="token builtin class-name">cd</span> /opt/Bigdata/MRS_Current/ll<span class="token builtin class-name">cd</span> 1_13_RegionServer/install/hbase/bin/<span class="token function">sh</span> hbase-daemon.sh start regionserverjps<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rs/ll<span class="token function">vi</span> <span class="token function">mv</span> /opt/Bigdata/nodeagent/bin/start-agent.sh /opt/Bigdata/nodeagent/bin/start-agent.sh.bakll<span class="token function">vi</span> stop.log<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log <span class="token builtin class-name">cd</span> /var/log/Bigdata/nodeagent/ll<span class="token function">vi</span> scriptlog/<span class="token builtin class-name">cd</span> scriptlog/ll<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>ll<span class="token builtin class-name">cd</span> agentlog/ll:qll<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>ll<span class="token builtin class-name">cd</span> monitorlog/ll<span class="token function">vi</span> monitor.log <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/ll<span class="token builtin class-name">cd</span> agentlog/ll<span class="token function">vi</span> agent.<span class="token function">vi</span> agent.log jps<span class="token function">mv</span> /opt/Bigdata/nodeagent/bin/start-agent.sh.bak /opt/Bigdata/nodeagent/bin/start-agent.shjps<span class="token function">kill</span> -9 <span class="token number">25046</span><span class="token function">mv</span> /opt/Bigdata/nodeagent/bin/start-agent.sh /opt/Bigdata/nodeagent/bin/start-agent.sh.bakjpsjps <span class="token function">netstat</span> -apn <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">28400</span>ll<span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/rsll<span class="token function">date</span><span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log jps<span class="token function">vi</span> <span class="token function">mv</span> /opt/Bigdata/nodeagent/bin/start-agent.sh /opt/Bigdata/nodeagent/bin/start-agent.sh.bak<span class="token function">vi</span> regionserver-omm-20200604170721-pid28400-gc.log.0.current <span class="token builtin class-name">cd</span> /opt/Bigdata/MRS_Current/1_13_RegionServer/ll<span class="token builtin class-name">cd</span> etc/ll<span class="token function">vi</span> ENV_VARS <span class="token function">mv</span> /opt/Bigdata/nodeagent/bin/start-agent.sh.bak /opt/Bigdata/nodeagent/bin/start-agent.sh<span class="token builtin class-name">exit</span><span class="token function">cat</span> /etc/hosts<span class="token function">ssh</span> <span class="token number">192.168</span>.1.233<span class="token builtin class-name">exit</span><span class="token builtin class-name">cd</span> /var/log/Bigdata/<span class="token function">ls</span><span class="token builtin class-name">cd</span> hbase/<span class="token function">ls</span><span class="token builtin class-name">cd</span> rs/<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.log ll<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.outll<span class="token function">vim</span> hbase-omm-regionserver-node-ana-corelSHL.logll<span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.outll<span class="token function">vi</span> regionserver-omm-20200604161255-pid12637-gc.log.0.currentlltailf hbase-omm-regionserver-node-ana-corelSHL.log <span class="token function">vi</span> hbase-omm-regionserver-node-ana-corelSHL.log ll /opt/Bigdata/tmp//hbase-omm-regionserver.pidll /opt/Bigdata/tmp/<span class="token builtin class-name">pwd</span><span class="token function">cat</span> /var/log/Bigdata/hbase/rs/hbase-omm-regionserver.pi<span class="token function">cat</span>  /opt/Bigdata/tmp/hbase-omm-regionserver.pid<span class="token builtin class-name">cd</span> /opt/Bigdata/tmp<span class="token function">ls</span>ll<span class="token function">cat</span> ll /opt/Bigdata/tmp/ll /opt/Bigdata/tmp/<span class="token builtin class-name">pwd</span><span class="token builtin class-name">cd</span> /opt/Bigdata/tmp/ll<span class="token function">cat</span> hbase-omm-regionserver.pidjps<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">12916</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">12902</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">12916</span><span class="token builtin class-name">cd</span> /var/log/Bigdata/hbase/<span class="token function">ls</span><span class="token builtin class-name">cd</span> rs/jps<span class="token builtin class-name">pwd</span><span class="token builtin class-name">cd</span> /srv/BigData/journalnode/hacluster/current/ll <span class="token function">rm</span> -rf edits_*ll<span class="token function">rm</span> committed-txid ll<span class="token function">cat</span> /etc/hosts<span class="token function">scp</span> root@192.168.1.73:/srv/BigData/journalnode/hacluster/current/edit_000* ./ll<span class="token function">scp</span> root@192.168.1.73:/srv/BigData/journalnode/hacluster/current/edits_000* .//bin/rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> -w <span class="token string">"rng-tools"</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep"</span> <span class="token operator">|</span> <span class="token function">grep</span> rngd <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">" "</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"\-o/dev/random"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"\-r/dev/urandom"</span><span class="token builtin class-name">echo</span> <span class="token string">'EXTRAOPTIONS="-r /dev/urandom -o /dev/random"'</span> <span class="token operator">>></span> /etc/sysconfig/rngd<span class="token function">service</span> rngd start<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep"</span> <span class="token operator">|</span> <span class="token function">grep</span> rngd <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">" "</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"\-o/dev/random"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"\-r/dev/urandom"</span><span class="token function">ps</span> –ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"haveged"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep"</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"haveged"</span>yum -y <span class="token function">install</span> havegedsystemctl start havegedsystemctl <span class="token builtin class-name">enable</span> haveged.service<span class="token function">cat</span> /dev/random <span class="token operator">|</span> od –x<span class="token function">cat</span> /opt/mrs_clusterinfo <span class="token function">cat</span> /proc/sys/kernel/random/entropy_availhdfs <span class="token function">fsck</span> /hbase/WALs<span class="token function">df</span> -hjps<span class="token function">free</span> -h<span class="token function">top</span> <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">14316</span><span class="token function">ps</span> -ef<span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">14316</span><span class="token builtin class-name">cd</span> /srv/BigData/journalnode/hacluster/current/ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> hadoop </tag>
            
            <tag> mapreduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 运行.net程序</title>
      <link href="/posts/950d.html"/>
      <url>/posts/950d.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="将打包好的包上传到服务器"><a href="#将打包好的包上传到服务器" class="headerlink" title="将打包好的包上传到服务器"></a>将打包好的包上传到服务器</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装yum源</span><span class="token function">rpm</span> -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm<span class="token comment"># 安装.net运行工具和依赖</span>yum <span class="token function">install</span> dotnet-sdk-3.1 aspnetcore-runtime-3.1 dotnet-runtime-3.1 -y<span class="token comment"># 将与.exe同名的.dll文件放入后台运行即可</span><span class="token function">nohup</span> dotnet FlowTestServer.dll <span class="token assign-left variable">urls</span><span class="token operator">=</span><span class="token string">"http://*:5000"</span> <span class="token operator">>></span> logs.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 查看端口是否启用</span>ss -anptl <span class="token operator">|</span> <span class="token function">grep</span> :5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 系统 </tag>
            
            <tag> .net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm连接服务器</title>
      <link href="/posts/61e3.html"/>
      <url>/posts/61e3.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="添加远程服务器"><a href="#添加远程服务器" class="headerlink" title="添加远程服务器"></a>添加远程服务器</h1><ol><li><p>打开 文件 –&gt; 设置<br><img src="/medias/drawing-bed/pycharm/0.jpg"></p></li><li><p>在 工具 SSH Config中添加远程服务器信息<br><img src="/medias/drawing-bed/pycharm/2.jpg"></p></li><li><p>在 项目 这里可以看到一些本机的环境信息<br><img src="/medias/drawing-bed/pycharm/1.jpg"></p></li><li><p>选择 Add 后，选择 SSH 连接，找到刚才配置好的远程服务器<br><img src="/medias/drawing-bed/pycharm/3.jpg"></p></li><li><p>配置好上面的内容，选择 next ，配置python环境、工作目录<br><img src="/medias/drawing-bed/pycharm/4.jpg"></p></li><li><p>配置好保存，会自动上传本地文件到远程，等待一会<br><img src="/medias/drawing-bed/pycharm/5.jpg"></p></li><li><p>查看项目环境已经是远程服务器的了<br><img src="/medias/drawing-bed/pycharm/11.jpg"></p></li></ol><h1 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h1><ol><li><p>修改文件字体编码<br><img src="/medias/drawing-bed/pycharm/6.jpg"></p></li><li><p>更改为自动保存<br><img src="/medias/drawing-bed/pycharm/7.jpg"></p></li><li><p>修改换行符<br><img src="/medias/drawing-bed/pycharm/8.jpg"></p></li><li><p>解决 pycharm terminal 显示进度条乱码<br><img src="/medias/drawing-bed/pycharm/9.jpg"></p></li><li><p>新建远程终端，选择自己的远程服务器即可<br><img src="/medias/drawing-bed/pycharm/10.jpg"></p></li><li><p>其它的电脑也可以拉取（配置好远程服务器地址即可）<br>&emsp;&emsp;在此更改不会被记录，建议工作目录和<a href="../../others/git/">git</a>配合使用<br><img src="/medias/drawing-bed/pycharm/12.jpg"></p></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>&emsp;&emsp;最后在 Windows 主机的工作目录，新建、删除文件和编辑内容会实时同步到远程服务器。  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> pycharm </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>psutil安装</title>
      <link href="/posts/5127.html"/>
      <url>/posts/5127.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>psutil</code> 是一个跨平台库<br>能够轻松实现获取系统运行的进程和系统利用率<br>包括 CPU、内存、磁盘、网络等信息<br><code>psutil</code> 主要应用于系统监控、分析和限制系统资源及进程的管理<br><code>psutil</code> 实现了同等命令行工具提供的功能，<br>如 <code>ps</code>、<code>top</code>、<code>lsof</code>、<code>netstat</code>、<code>ifconfig</code>、<code>who</code>、<code>df</code>、<code>kill</code>、<code>free</code>、<code>nice</code>、<code>ionice</code>、<code>iostat</code>、<code>iotop</code>、<code>uptime</code>、<code>pidof</code>、<code>tty</code>、<code>taskset</code>、<code>pmap</code> 等。<br>目前支持 32 位和 64 位的 <code>Linux</code>、<code>Windows</code>、<code>OS X</code>、<code>FreeBSD</code> 和 <code>Sun Solaris</code> 等操作系统  </p><p>Linux安装psutil报错：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unable to execute <span class="token string">'gcc'</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory   <span class="token comment"># gcc要安装</span>psutil/_psutil_common.c:9:20: 致命错误：Python.h：没有那个文件或目录   <span class="token comment"># python-devel要安装</span>Using legacy setup.py <span class="token function">install</span> <span class="token keyword">for</span> psutil, since package <span class="token string">'wheel'</span> is not installed.   <span class="token comment"># pip安装wheel</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装psutil  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> python36-devel gccpip <span class="token function">install</span> wheel   <span class="token comment"># pip3 install psutil</span><span class="token punctuation">[</span>root@bogon ~<span class="token punctuation">]</span><span class="token comment"># pip3 install psutil</span>Looking <span class="token keyword">in</span> indexes: http://mirrors.aliyun.com/pypi/simple/Collecting psutil  Downloading http://mirrors.aliyun.com/pypi/packages/1c/ca/5b8c1fe032a458c2c4bcbe509d1401dca9dda35c7fc46b36bb81c2834740/psutil-5.6.3.tar.gz <span class="token punctuation">(</span>435kB<span class="token punctuation">)</span>     <span class="token operator">|</span>████████████████████████████████<span class="token operator">|</span> 440kB <span class="token number">4</span>.6MB/s Installing collected packages: psutil  Running setup.py <span class="token function">install</span> <span class="token keyword">for</span> psutil <span class="token punctuation">..</span>. <span class="token keyword">done</span>Successfully installed psutil-5.6.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python杂记 </tag>
            
            <tag> psutil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip3安装</title>
      <link href="/posts/8828.html"/>
      <url>/posts/8828.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h1><p>在Linux系统中，可以直接使用  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> python36-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> -U pip   <span class="token comment"># 如果出问题，使用下面的命令升级</span>pip3 <span class="token function">install</span> --upgrade pipeasy_install-3.6 --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> <span class="token assign-left variable">Django</span><span class="token operator">==</span><span class="token number">1.7</span>   <span class="token comment"># 指定安装Django1.7版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 uninstall Django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 search Django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="显示安装包信息"><a href="#显示安装包信息" class="headerlink" title="显示安装包信息"></a>显示安装包信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 show <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看指定包的详细信息"><a href="#查看指定包的详细信息" class="headerlink" title="查看指定包的详细信息"></a>查看指定包的详细信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 show -f Django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="列出已安装的包"><a href="#列出已安装的包" class="headerlink" title="列出已安装的包"></a>列出已安装的包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看可升级的包"><a href="#查看可升级的包" class="headerlink" title="查看可升级的包"></a>查看可升级的包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 list -o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意如果需要安装Python3的安装包，请使用以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 -m pip <span class="token function">install</span> numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意如果需要安装Python2的安装包，请使用以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python2 -m pip <span class="token function">install</span> numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不建议大家直接用pip install的方式安装python包，这样你会不清楚装的是python2的包还是python3的包</p><h1 id="pip更换国内源"><a href="#pip更换国内源" class="headerlink" title="pip更换国内源"></a>pip更换国内源</h1><p>国内源：<br>新版ubuntu要求使用https源，要注意。<br>清华：<code>https://pypi.tuna.tsinghua.edu.cn/simple</code><br>阿里云：<code>http://mirrors.aliyun.com/pypi/simple/</code><br>中国科技大学：<code>https://pypi.mirrors.ustc.edu.cn/simple/</code><br>华中理工大学：<code>http://pypi.hustunique.com/</code><br>山东理工大学：<code>http://pypi.sdutlinux.org/</code><br>豆瓣：<code>http://pypi.douban.com/simple/</code><br>永久修改：<br>Linux下，修改 <code>~/.pip/pip.conf</code> (没有就创建一个文件夹及文件。文件夹要加”.”，表示是隐藏文件夹)<br>内容如下：  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple[install]trusted-host&#x3D;mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>windows下，直接在user目录中创建一个pip目录，如：<code>C:\Users\xx\pip</code>，新建文件<code>pip.ini</code>。内容同上。  </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python杂记 </tag>
            
            <tag> pip3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERR磁盘爆满</title>
      <link href="/posts/300f.html"/>
      <url>/posts/300f.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="记一次war包更新报错"><a href="#记一次war包更新报错" class="headerlink" title="记一次war包更新报错"></a>记一次war包更新报错</h1><p>&emsp;&emsp;删除tomcat下面的webapps目录中的war包，xftp上传新包失败，使用<code>du</code>和<code>df</code>命令查询的磁盘容量不一致</p><p>&emsp;&emsp;导致这个两个命令查看磁盘容量不一致的原因是，用户删除了大量的文件被删除后，在文件系统目录中已经不可见了，所以du就不会再统计它。然而如果此时还有运行的进程持有这个已经被删除的文件句柄，那么这个文件就不会真正在磁盘中被删除，分区超级块中的信息也就不会更改，df仍会统计这个被删除的文件。  </p><p>&emsp;&emsp;可通过 lsof命令查询处于deleted状态的文件，被删除的文件在系统中被标记为deleted。如果系统有大量deleted状态的文件，会导致du和df统计结果不一致。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> <span class="token operator">|</span> <span class="token function">grep</span> delted   <span class="token comment"># 在opt目录下执行lsof | grep deleted</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><font color=red>这里记录不完全，时间太长了，之前的记录不是很详细</font></em></p><p>解决: 执行kill 29080  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># kill 29080</span><span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>Filesystem      Size  Used Avail Use% Mounted ondevtmpfs        <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /devtmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /dev/shmtmpfs           <span class="token number">3</span>.9G  361M  <span class="token number">3</span>.5G  <span class="token number">10</span>% /runtmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /sys/fs/cgroup/dev/vda1        40G   10G   28G  <span class="token number">27</span>% /                          <span class="token comment"># 这里磁盘已经降下来了</span>tmpfs           783M     <span class="token number">0</span>  783M   <span class="token number">0</span>% /run/user/0/dev/vdb1       197G  <span class="token number">2</span>.3G  185G   <span class="token number">2</span>% /mnt/opt<span class="token punctuation">[</span>root@client ~<span class="token punctuation">]</span><span class="token comment"># du / -sh</span>du: cannot access ‘/proc/6406/task/6406/fd/4’: No such <span class="token function">file</span> or directorydu: cannot access ‘/proc/6406/task/6406/fdinfo/4’: No such <span class="token function">file</span> or directorydu: cannot access ‘/proc/6406/fd/3’: No such <span class="token function">file</span> or directorydu: cannot access ‘/proc/6406/fdinfo/3’: No such <span class="token function">file</span> or directory13G/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 系统 </tag>
            
            <tag> tomcat </tag>
            
            <tag> war </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sourcetree3.x 跳过注册bitbucket</title>
      <link href="/posts/b66.html"/>
      <url>/posts/b66.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>&emsp;&emsp;前提：使用腾讯电脑管家自带的软件管理工具，先安装git，在安装sourcetree，这两个软件在软件管理里面都有，<em>安装git不用修改配置，直接下一步，直到安装完成</em>，这个时候再安装sourcetree。如果你是菜鸟sourcetree全中文界面可以很好的带你入门git，一些错误仍需要您手动执行git命令，很少情况下会发生，如果你是用git的老手，sourcetree可以让您的工作效率事半功倍🏊‍。  </p><p><font color=red>测试jsdelivr加速GitHub图片，受jsdelivr服务器影响，可能会造成图片显示异常</font></p><h1 id="使用软件管理安装sourcetree"><a href="#使用软件管理安装sourcetree" class="headerlink" title="使用软件管理安装sourcetree"></a>使用软件管理安装sourcetree</h1><h2 id="第一步直接关闭此窗口。"><a href="#第一步直接关闭此窗口。" class="headerlink" title="第一步直接关闭此窗口。"></a>第一步直接关闭此窗口。</h2><p><img src="/medias/drawing-bed/sourcetree/0.jpg"></p><p>使用<i class="fab fa-windows"></i>+R键，输入<code>%LocalAppData%\Atlassian</code>回车，接着进入SourceTree目录，创建accounts.json文件：  </p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"$id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"$type"</span><span class="token operator">:</span> <span class="token string">"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity"</span><span class="token punctuation">,</span>    <span class="token property">"Authenticate"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"HostInstance"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"$id"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>      <span class="token property">"$type"</span><span class="token operator">:</span> <span class="token string">"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount"</span><span class="token punctuation">,</span>      <span class="token property">"Host"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"$id"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>        <span class="token property">"$type"</span><span class="token operator">:</span> <span class="token string">"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount"</span><span class="token punctuation">,</span>        <span class="token property">"Id"</span><span class="token operator">:</span> <span class="token string">"atlassian account"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"BaseUrl"</span><span class="token operator">:</span> <span class="token string">"https://id.atlassian.com/"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"Credentials"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"$id"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>      <span class="token property">"$type"</span><span class="token operator">:</span> <span class="token string">"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account"</span><span class="token punctuation">,</span>      <span class="token property">"Username"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token property">"Email"</span><span class="token operator">:</span> <span class="token null keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"IsDefault"</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<i class="fab fa-windows"></i>+R键，输入<code>%LocalAppData%\Atlassian</code>回车，接着进入<code>SourceTree.exe_Url_czfpfghshbirstykwmn1gvqek200yvfx</code>目录，此目录名会随着版本变化，接着进入3.3.8.3848目录，打开user.config文件，在里面加入六行代码。我的是3.3.8，而腾讯软件管理的版本是3.2.6，可在”工具T”–&gt;”选项O”中，关闭updates，禁用更新检查。<br>放入<code>&lt;SourceTree.Properties.Settings&gt;...&lt;/SourceTree.Properties.Settings&gt;</code>标签中即可  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">&lt;setting name&#x3D;&quot;AgreedToEULA&quot; serializeAs&#x3D;&quot;String&quot;&gt;    &lt;value&gt;True&lt;&#x2F;value&gt;&lt;&#x2F;setting&gt;&lt;setting name&#x3D;&quot;AgreedToEULAVersion&quot; serializeAs&#x3D;&quot;String&quot;&gt;    &lt;value&gt;20160201&lt;&#x2F;value&gt;&lt;&#x2F;setting&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在软件管理中打开sourcetree"><a href="#在软件管理中打开sourcetree" class="headerlink" title="在软件管理中打开sourcetree"></a>在软件管理中打开sourcetree</h2><p><img src="/medias/drawing-bed/sourcetree/1.jpg"></p><h2 id="提示未找到Mercurial"><a href="#提示未找到Mercurial" class="headerlink" title="提示未找到Mercurial"></a>提示未找到Mercurial</h2><p><img src="/medias/drawing-bed/sourcetree/2.jpg"></p><h2 id="选择不想使用Mercurial"><a href="#选择不想使用Mercurial" class="headerlink" title="选择不想使用Mercurial"></a>选择不想使用Mercurial</h2><p>这里是选择了第一个选项。<br><img src="/medias/drawing-bed/sourcetree/3.jpg"></p><h2 id="跳过Mercurial或者下载，完成后就进入使用界面了"><a href="#跳过Mercurial或者下载，完成后就进入使用界面了" class="headerlink" title="跳过Mercurial或者下载，完成后就进入使用界面了"></a>跳过Mercurial或者下载，完成后就进入使用界面了</h2><p><img src="/medias/drawing-bed/sourcetree/4.jpg"></p><h1 id="配置git和openssh"><a href="#配置git和openssh" class="headerlink" title="配置git和openssh"></a>配置git和openssh</h1><p>git安装完成后，在桌面右键打开git gui，选择show ssh key<br><img src="/medias/drawing-bed/sourcetree/5.jpg"></p><h2 id="选择Generate-Key"><a href="#选择Generate-Key" class="headerlink" title="选择Generate Key"></a>选择Generate Key</h2><p><img src="/medias/drawing-bed/sourcetree/6.jpg"></p><h2 id="连续点两次yes"><a href="#连续点两次yes" class="headerlink" title="连续点两次yes"></a>连续点两次yes</h2><p><img src="/medias/drawing-bed/sourcetree/7.jpg"><br><img src="/medias/drawing-bed/sourcetree/8.jpg"></p><h2 id="完成之后会在当前用户家目录生成公钥和私钥"><a href="#完成之后会在当前用户家目录生成公钥和私钥" class="headerlink" title="完成之后会在当前用户家目录生成公钥和私钥"></a>完成之后会在当前用户家目录生成公钥和私钥</h2><p>这里的公钥长期存在，您可以复制到剪切板<code>Copy To Clipboard</code>，粘贴到GitHub、coding等SSH公钥位置，从而进行免密<code>git push origin branch</code><br><img src="/medias/drawing-bed/sourcetree/9.jpg"></p><h2 id="在”工具”-“选项”中，选择openssh即可"><a href="#在”工具”-“选项”中，选择openssh即可" class="headerlink" title="在”工具” “选项”中，选择openssh即可"></a>在”工具” “选项”中，选择openssh即可</h2><p><img src="/medias/drawing-bed/sourcetree/10.jpg"></p><p>这个时候你就可以把状态栏的”戴蓝帽子的小电脑”干掉了，点击”ssh密钥”后面的”…”可以进入<code>.ssh</code>目录查看自己的私钥id_rsa和公钥id_rsa.pub</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> git </tag>
            
            <tag> sourcetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS8安装docker-ce报错</title>
      <link href="/posts/4e4e.html"/>
      <url>/posts/4e4e.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装依赖</span>yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span class="token comment"># 配置阿里云镜像库</span>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum -y install docker-ce</span>CentOS-8 - Base - mirrors.aliyun.com                             <span class="token number">22</span> kB/s <span class="token operator">|</span> <span class="token number">3.9</span> kB     00:00    CentOS-8 - Extras - mirrors.aliyun.com                           <span class="token number">24</span> kB/s <span class="token operator">|</span> <span class="token number">1.5</span> kB     00:00    CentOS-8 - AppStream - mirrors.aliyun.com                       <span class="token number">125</span> kB/s <span class="token operator">|</span> <span class="token number">4.3</span> kB     00:00    Docker CE Stable - x86_64                                        <span class="token number">45</span> kB/s <span class="token operator">|</span>  <span class="token number">23</span> kB     00:00    Extra Packages <span class="token keyword">for</span> Enterprise Linux Modular <span class="token number">8</span> - x86_64           <span class="token number">90</span> kB/s <span class="token operator">|</span> <span class="token number">3.0</span> kB     00:00    Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">8</span> - x86_64                   <span class="token number">34</span> kB/s <span class="token operator">|</span> <span class="token number">4.7</span> kB     00:00    错误： 问题: package docker-ce-3:19.03.9-3.el7.x86_64 requires containerd.io <span class="token operator">>=</span> <span class="token number">1.2</span>.2-3, but none of the providers can be installed  - cannot <span class="token function">install</span> the best candidate <span class="token keyword">for</span> the job  - package containerd.io-1.2.10-3.2.el7.x86_64 is excluded  - package containerd.io-1.2.13-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.13-3.2.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.3.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.el7.x86_64 is excluded  - package containerd.io-1.2.4-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.5-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.6-3.3.el7.x86_64 is excluded<span class="token punctuation">(</span>尝试添加 <span class="token string">'--skip-broken'</span> 来跳过无法安装的软件包 或 <span class="token string">'--nobest'</span> 来不只使用最佳选择的软件包<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错：<code>package docker-ce-3:19.03.9-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3, but none of the providers can be installed</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># yum -y install containerd.io</span>上次元数据过期检查：0:01:55 前，执行于 <span class="token number">2020</span>年05月20日 星期三 <span class="token number">20</span>时41分10秒。依赖关系解决。<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 软件包              架构        版本              仓库                      大小<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>安装: containerd.io       x86_64      <span class="token number">1.2</span>.0-3.el7       docker-ce-stable          <span class="token number">22</span> M事务概要<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>安装  <span class="token number">1</span> 软件包总下载：22 M安装大小：88 M下载软件包：containerd.io-1.2.0-3.el7.x86_64.rpm     <span class="token number">8.4</span> MB/s <span class="token operator">|</span>  <span class="token number">22</span> MB     00:02    -------------------------------------------------------------------------总计                                     <span class="token number">8.4</span> MB/s <span class="token operator">|</span>  <span class="token number">22</span> MB     00:02     警告：/var/cache/dnf/docker-ce-stable-3e5647bf4960c796/packages/containerd.io-1.2.0-3.el7.x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID 621e9f35: NOKEYDocker CE Stable - x86_64             <span class="token number">3.3</span> kB/s <span class="token operator">|</span> <span class="token number">1.6</span> kB     00:00    导入 GPG 公钥 0x621E9F35: Userid: <span class="token string">"Docker Release (CE rpm) &lt;docker@docker.com>"</span> 指纹: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 来自: https://mirrors.aliyun.com/docker-ce/linux/centos/gpg导入公钥成功运行事务检查事务检查成功。运行事务测试事务测试成功。运行事务  准备中  <span class="token builtin class-name">:</span>                                       <span class="token number">1</span>/1   安装    <span class="token builtin class-name">:</span> containerd.io-1.2.0-3.el7.x86_64      <span class="token number">1</span>/1   运行脚本: containerd.io-1.2.0-3.el7.x86_64      <span class="token number">1</span>/1   验证    <span class="token builtin class-name">:</span> containerd.io-1.2.0-3.el7.x86_64      <span class="token number">1</span>/1 已安装:  containerd.io-1.2.0-3.el7.x86_64                                                                                                                            完毕！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>版本是1.2.0，手动下载高版本软件（dnf等同yum，也是包管理器）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># dnf install https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span>上次元数据过期检查：0:03:48 前，执行于 <span class="token number">2020</span>年05月20日 星期三 <span class="token number">20</span>时41分10秒。containerd.io-1.2.6-3.3.el7.x86_64.rpm                                                                                        <span class="token number">2.2</span> MB/s <span class="token operator">|</span>  <span class="token number">26</span> MB     00:11    依赖关系解决。<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 软件包                架构        版本                                          仓库                 大小<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>升级: containerd.io         x86_64      <span class="token number">1.2</span>.6-3.3.el7                                 @commandline         <span class="token number">26</span> M安装依赖关系: container-selinux     noarch      <span class="token number">2</span>:2.124.0-1.module_el8.1.0+298+41f9343a       AppStream            <span class="token number">47</span> k启用模块流: container-tools                   rhel8                                                                  事务概要<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>安装  <span class="token number">1</span> 软件包升级  <span class="token number">1</span> 软件包总计：26 M总下载：47 k确定吗？<span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>： y下载软件包：container-selinux-2.124.0-1.module_el8.1.0+298+41f9343a.noarch.rpm              <span class="token number">331</span> kB/s <span class="token operator">|</span>  <span class="token number">47</span> kB     00:00    -------------------------------------------------------------------------------------------------------------总计                                                                            <span class="token number">322</span> kB/s <span class="token operator">|</span>  <span class="token number">47</span> kB     00:00     运行事务检查事务检查成功。运行事务测试事务测试成功。运行事务  准备中  <span class="token builtin class-name">:</span>                                                                                   <span class="token number">1</span>/1   运行脚本: container-selinux-2:2.124.0-1.module_el8.1.0+298+41f9343a.noarch                  <span class="token number">1</span>/1   运行脚本: container-selinux-2:2.124.0-1.module_el8.1.0+298+41f9343a.noarch                  <span class="token number">1</span>/3   安装    <span class="token builtin class-name">:</span> container-selinux-2:2.124.0-1.module_el8.1.0+298+41f9343a.noarch                  <span class="token number">1</span>/3   运行脚本: container-selinux-2:2.124.0-1.module_el8.1.0+298+41f9343a.noarch                  <span class="token number">1</span>/3   升级    <span class="token builtin class-name">:</span> containerd.io-1.2.6-3.3.el7.x86_64                                                <span class="token number">2</span>/3   运行脚本: containerd.io-1.2.6-3.3.el7.x86_64                                                <span class="token number">2</span>/3   运行脚本: containerd.io-1.2.0-3.el7.x86_64                                                  <span class="token number">3</span>/3   清理    <span class="token builtin class-name">:</span> containerd.io-1.2.0-3.el7.x86_64                                                  <span class="token number">3</span>/3   运行脚本: containerd.io-1.2.0-3.el7.x86_64                                                  <span class="token number">3</span>/3   运行脚本: container-selinux-2:2.124.0-1.module_el8.1.0+298+41f9343a.noarch                  <span class="token number">3</span>/3   运行脚本: containerd.io-1.2.0-3.el7.x86_64                                                  <span class="token number">3</span>/3   验证    <span class="token builtin class-name">:</span> container-selinux-2:2.124.0-1.module_el8.1.0+298+41f9343a.noarch                  <span class="token number">1</span>/3   验证    <span class="token builtin class-name">:</span> containerd.io-1.2.6-3.3.el7.x86_64                                                <span class="token number">2</span>/3   验证    <span class="token builtin class-name">:</span> containerd.io-1.2.0-3.el7.x86_64                                                  <span class="token number">3</span>/3 已升级:  containerd.io-1.2.6-3.3.el7.x86_64                                                              已安装:  container-selinux-2:2.124.0-1.module_el8.1.0+298+41f9343a.noarch                                                                                            完毕！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="再次安装docker-ce"><a href="#再次安装docker-ce" class="headerlink" title="再次安装docker-ce"></a>再次安装docker-ce</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># dnf install -y docker-ce</span>上次元数据过期检查：0:05:53 前，执行于 <span class="token number">2020</span>年05月20日 星期三 <span class="token number">20</span>时41分10秒。依赖关系解决。<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 软件包            架构        版本                  仓库                     大小<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>安装: docker-ce         x86_64      <span class="token number">3</span>:19.03.9-3.el7       docker-ce-stable         <span class="token number">24</span> M安装依赖关系: libcgroup         x86_64      <span class="token number">0.41</span>-19.el8           base                     <span class="token number">70</span> k docker-ce-cli     x86_64      <span class="token number">1</span>:19.03.9-3.el7       docker-ce-stable         <span class="token number">38</span> M事务概要<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>安装  <span class="token number">3</span> 软件包总下载：62 M安装大小：263 M下载软件包：<span class="token punctuation">(</span><span class="token number">1</span>/3<span class="token punctuation">)</span>: libcgroup-0.41-19.el8.x86_64.rpm         <span class="token number">530</span> kB/s <span class="token operator">|</span>  <span class="token number">70</span> kB     00:00    <span class="token punctuation">(</span><span class="token number">2</span>/3<span class="token punctuation">)</span>: docker-ce-19.03.9-3.el7.x86_64.rpm       <span class="token number">5.3</span> MB/s <span class="token operator">|</span>  <span class="token number">24</span> MB     00:04    <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>: docker-ce-cli-19.03.9-3.el7.x86_64.rpm   <span class="token number">6.7</span> MB/s <span class="token operator">|</span>  <span class="token number">38</span> MB     00:05    --------------------------------------------------------------------------------总计                                             <span class="token number">11</span> MB/s <span class="token operator">|</span>  <span class="token number">62</span> MB     00:05     运行事务检查事务检查成功。运行事务测试事务测试成功。运行事务  准备中  <span class="token builtin class-name">:</span>                                                                                                                                               <span class="token number">1</span>/1   安装    <span class="token builtin class-name">:</span> docker-ce-cli-1:19.03.9-3.el7.x86_64      <span class="token number">1</span>/3   运行脚本: docker-ce-cli-1:19.03.9-3.el7.x86_64      <span class="token number">1</span>/3   运行脚本: libcgroup-0.41-19.el8.x86_64              <span class="token number">2</span>/3   安装    <span class="token builtin class-name">:</span> libcgroup-0.41-19.el8.x86_64              <span class="token number">2</span>/3   运行脚本: libcgroup-0.41-19.el8.x86_64              <span class="token number">2</span>/3   安装    <span class="token builtin class-name">:</span> docker-ce-3:19.03.9-3.el7.x86_64          <span class="token number">3</span>/3   运行脚本: docker-ce-3:19.03.9-3.el7.x86_64          <span class="token number">3</span>/3   验证    <span class="token builtin class-name">:</span> libcgroup-0.41-19.el8.x86_64              <span class="token number">1</span>/3   验证    <span class="token builtin class-name">:</span> docker-ce-3:19.03.9-3.el7.x86_64          <span class="token number">2</span>/3   验证    <span class="token builtin class-name">:</span> docker-ce-cli-1:19.03.9-3.el7.x86_64      <span class="token number">3</span>/3 已安装:  docker-ce-3:19.03.9-3.el7.x86_64   libcgroup-0.41-19.el8.x86_64  docker-ce-cli-1:19.03.9-3.el7.x86_64                   完毕！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="启动设置开机自启"><a href="#启动设置开机自启" class="headerlink" title="启动设置开机自启"></a>启动设置开机自启</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># systemctl enable docker</span>Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /usr/lib/systemd/system/docker.service.<span class="token punctuation">[</span>root@test yum.repos.d<span class="token punctuation">]</span><span class="token comment"># systemctl start docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS8安装之后的一些配置</title>
      <link href="/posts/4430.html"/>
      <url>/posts/4430.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="网卡固定IP"><a href="#网卡固定IP" class="headerlink" title="网卡固定IP"></a>网卡固定IP</h1><p>&emsp;&emsp;修改网卡信息  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"Ethernet"</span><span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span><span class="token string">"none"</span>   <span class="token comment"># 设置静态</span><span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span><span class="token string">"stable-privacy"</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"ens160"</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"1f22ea44-481f-410e-b062-7b05fa7a8375"</span>   <span class="token comment"># 设备唯一标识，不要更改自己的UUID!!!</span><span class="token assign-left variable">DEVICE</span><span class="token operator">=</span><span class="token string">"ens160"</span>   <span class="token comment"># 网卡名，不要更改自己的!!!</span><span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span><span class="token string">"yes"</span>   <span class="token comment"># 开机自动加载网卡</span><span class="token assign-left variable">HWADDR</span><span class="token operator">=</span><span class="token string">"00:0C:29:D5:D6:DE"</span>   <span class="token comment"># 唯一MAC地址，不要更改自己的!!!</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token string">"192.168.1.221"</span>   <span class="token comment"># 设置一个固定IP</span><span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token string">"24"</span>   <span class="token comment"># 掩码长度 另一种写法NETMASK="255.255.255.0"</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token string">"192.168.1.1"</span>   <span class="token comment"># 网关（路由器、交换机IP）</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token string">"114.114.114.114"</span>　　<span class="token comment"># DNS地址，开机默认加载</span><span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span><span class="token string">"no"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;使配置生效  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifdown</span> ens160 <span class="token operator">&amp;&amp;</span> <span class="token function">ifup</span> ens160   <span class="token comment"># 执行完之后重新连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h1><p>&emsp;&emsp;编辑/etc/profile文件最后添加vi别名  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">vi</span><span class="token operator">=</span>vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h1><p>&emsp;&emsp;编辑/etc/vimrc文件最后加入  </p><pre class="line-numbers language-vimrc" data-language="vimrc"><code class="language-vimrc">&quot; 设置tab建4个空格set ts&#x3D;4set expandtabset autoindent&quot; 设置vim显示行号set nu&quot; 设置F9粘贴缩进，默认原格式粘贴，按F9自动缩进粘贴set pastetoggle&#x3D;&lt;F9&gt;set paste<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>&emsp;&emsp;修改已保存的文件  </p><ol><li>Tab 键替换为空格  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:set <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">4</span>:set expandtab:%retab<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>空格替换为Tab  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:set <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">4</span>:set noexpandtab:%retab<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>冷知识：加感叹号!是用于处理非空白字符之后的Tab，即所有的Tab；不加，则只处理行首的Tab。<br>&emsp;&emsp;好冷~ ≡(▔﹏▔)≡ 🥶  </p><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>&emsp;&emsp;这里配置的是aliyun的yum源  </p><ol><li>CentOS-Base.repo仓库  </li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/yum.repos.d/<span class="token function">mkdir</span> old<span class="token function">mv</span> *.repo old/<span class="token function">curl</span> -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo<span class="token comment"># 非阿里云ECS用户会出现 Couldn't resolve host 'mirrors.cloud.aliyuncs.com' 信息，不影响使用。可自行修改相关配置: </span><span class="token function">sed</span> -i -e <span class="token string">'/mirrors.cloud.aliyuncs.com/d'</span> -e <span class="token string">'/mirrors.aliyuncs.com/d'</span> /etc/yum.repos.d/CentOS-Base.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>epel(RHEL 8)软件仓库  </li></ol><blockquote><p>安装 epel 配置包  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>将 repo 配置中的地址替换为阿里云镜像站地址  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|'</span> /etc/yum.repos.d/epel*<span class="token function">sed</span> -i <span class="token string">'s|^metalink|#metalink|'</span> /etc/yum.repos.d/epel*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h1><p>&emsp;&emsp;关闭firewalld  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h1><p>&emsp;&emsp;关闭selinux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> -i.bak <span class="token string">'s/enforcing$/disabled/g'</span> /etc/selinux/configsetenforce <span class="token number">0</span>   <span class="token comment"># 临时关闭，重启失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">vim</span> yum update -y   <span class="token comment"># 软件升级</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="配置好之后重启"><a href="#配置好之后重启" class="headerlink" title="配置好之后重启"></a>配置好之后重启</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span><span class="token builtin class-name">source</span> /etc/profile   <span class="token comment"># 不想重启的话使用此，使配置文件生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> centos8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次CentOS 8网卡配置</title>
      <link href="/posts/63a3.html"/>
      <url>/posts/63a3.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="CentOS8重启Network新的配置不生效"><a href="#CentOS8重启Network新的配置不生效" class="headerlink" title="CentOS8重启Network新的配置不生效"></a>CentOS8重启Network新的配置不生效</h1><p>开始涉及到以下命令不生效  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmcli c reload ens160systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="网卡配置如下"><a href="#网卡配置如下" class="headerlink" title="网卡配置如下"></a>网卡配置如下</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"Ethernet"</span><span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span><span class="token string">"none"</span><span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span><span class="token string">"stable-privacy"</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"ens160"</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"1f22ea44-481f-410e-b062-7b05fa7a8375"</span><span class="token assign-left variable">DEVICE</span><span class="token operator">=</span><span class="token string">"ens160"</span><span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">HWADDR</span><span class="token operator">=</span><span class="token string">"00:0C:29:D5:D6:DE"</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token string">"192.168.1.223"</span><span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token string">"24"</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token string">"114.114.114.114"</span><span class="token assign-left variable">IPV6_PRIVACY</span><span class="token operator">=</span><span class="token string">"no"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="解决-reload-配置不生效BUG"><a href="#解决-reload-配置不生效BUG" class="headerlink" title="解决 reload 配置不生效BUG"></a>解决 reload 配置不生效BUG</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 测试可用</span><span class="token function">ifdown</span> ens160 <span class="token operator">&amp;&amp;</span> <span class="token function">ifup</span> ens160<span class="token comment"># 测试可用</span>nmcli c reload <span class="token operator">&amp;&amp;</span> nmcli d reapply ens160<span class="token comment"># 测试可用</span>nmcli c reload <span class="token operator">&amp;&amp;</span> nmcli networking off <span class="token operator">&amp;&amp;</span> nmcli networking on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：以上设置完IP后使用上面的命令可以使新配置生效，涉及到down和off等，一定要一条命令行执行！<br>养成好习惯，否则只能去服务器执行up和on了。<br>祝好运💕  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nmcli </tag>
            
            <tag> centos8 </tag>
            
            <tag> 网卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java打包问题</title>
      <link href="/posts/71c0.html"/>
      <url>/posts/71c0.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>前言：从gitee clone的源代码打包报错：  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">execute</span> goal on project weblog<span class="token operator">:</span> <span class="token class-name">Could</span> not resolve dependencies <span class="token keyword">for</span> project com<span class="token punctuation">.</span>leejuen<span class="token operator">:</span>weblog<span class="token operator">:</span>jar<span class="token operator">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token operator">:</span> <span class="token class-name">Failure</span> <span class="token keyword">to</span> <span class="token namespace">find</span> io<span class="token punctuation">.</span>springfox<span class="token operator">:</span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">:</span>jar<span class="token operator">:</span><span class="token number">2.9</span><span class="token number">.0</span> in http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">121.42</span><span class="token number">.166</span><span class="token number">.202</span><span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span> was cached in the local repository<span class="token punctuation">,</span> resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">Help</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>源码地址：<a href="https://gitee.com/leejun/weblog.git">Download</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol><li>修改start.sh文件  </li></ol><p>将端口和日志地址替换成自己的地方  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#这里可替换为你自己的执行程序，其他代码无需更改</span><span class="token assign-left variable">APP_NAME</span><span class="token operator">=</span>weblog.jar<span class="token comment">#端口号默认8080</span><span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">8080</span><span class="token comment">#日志地址</span><span class="token assign-left variable">LOG_PATH</span><span class="token operator">=</span>/data/logs/server.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将start.sh和weblog.jar放到相同目录下  </li><li>运行方法  </li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>其他命令方法</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> start.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>进入后台web页面查看</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://服务端IP:端口/serverLog.html例如http://192.168.0.213:8080/serverLog.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="打包之前搭建mvn环境"><a href="#打包之前搭建mvn环境" class="headerlink" title="打包之前搭建mvn环境"></a>打包之前搭建mvn环境</h1><p>我这里有jenkins服务器，配置好了mvn环境，不再赘述。  </p><h1 id="克隆源码"><a href="#克隆源码" class="headerlink" title="克隆源码"></a>克隆源码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/leejun/weblog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> weblogmvn clean package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="报错参考上文"><a href="#报错参考上文" class="headerlink" title="报错参考上文"></a>报错参考上文</h2><h1 id="新学的一招"><a href="#新学的一招" class="headerlink" title="新学的一招"></a>新学的一招</h1><p>提取错误关键信息springfox-swagger-ui:jar:2.9.0找不到，拿着springfox-swagger-ui，到<code>https://mvnrepository.com/</code>网站查询。  </p><p>在Central中最新的版本为2.9.1和2.9.2<br><img src="/medias/drawing-bed/blob/master/java/0.jpg"><br>在Spring Plugins中最新为2.9.0<br><img src="/medias/drawing-bed/blob/master/java/1.jpg"><br>点击版本号2.9.0会显示代码<br><img src="/medias/drawing-bed/blob/master/java/2.jpg"><br>在pom.xml文件里面写入下面的标签中<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>  </p><p>后来发现没有用，因为缺少插件，不是插件没配置😥  </p><p>只能另辟奇径，打算配置软件仓库（事实胜于雄辩，也没用😫）<br>在<code>&lt;repositories&gt;&lt;/repositories&gt;</code>标签里面配置仓库  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://121.42.166.202:8081/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着再来修改版本（原因是因为使用上面说的网站直接查询到的插件版本为2.9.1和2.9.2）  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着使用mvn打包  </p><p>OOPS~改版本是可行的，但是按理说配置mvn仓库也是可行的，一些想法没有验证，挖坑以后填<br>TODO </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(十二)</title>
      <link href="/posts/8f7f.html"/>
      <url>/posts/8f7f.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="匿名函数：定义函数时不需要定义函数名"><a href="#匿名函数：定义函数时不需要定义函数名" class="headerlink" title="匿名函数：定义函数时不需要定义函数名"></a>匿名函数：定义函数时不需要定义函数名</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> yf <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>f1 <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x<span class="token operator">+</span>y   <span class="token comment"># 匿名函数定义（其它语言：称为lambda表达式"lambda parameter_list: expression"）</span><span class="token comment"># f1 = lambda x,y: a=x+y   不能写a=x+y，只能是表达式，不能是代码块</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三元表达式（表达式版本的if-else）"><a href="#三元表达式（表达式版本的if-else）" class="headerlink" title="三元表达式（表达式版本的if/else）"></a>三元表达式（表达式版本的if/else）</h1><blockquote><p>x &gt; y ? x : y   # 其他语言的三元表达式：比较x&gt;y 为真(?) 返回x : 否则返回y<br>python三元表达式：条件为真时返回的结果 if 条件判断 else 条件为假时返回的结果(x if x&gt;y else y)  </p></blockquote><p>闭包应用场景：不建议在业务代码里大量使用闭包；写框架、包、类库的时候可以尝试写一下闭包  </p><h1 id="函数式编程推荐用法"><a href="#函数式编程推荐用法" class="headerlink" title="函数式编程推荐用法"></a>函数式编程推荐用法</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span>list_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>list_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> xr <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> list_x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda不能让代码运行速度变快，只能让代码更简洁"><a href="#lambda不能让代码运行速度变快，只能让代码更简洁" class="headerlink" title="lambda不能让代码运行速度变快，只能让代码更简洁"></a>lambda不能让代码运行速度变快，只能让代码更简洁</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span>list_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>x<span class="token punctuation">,</span> list_x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>list_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>list_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>   <span class="token comment"># 传入的参数个数要注意相等，如果不相等，不会报错，会按最少参数的变量走。</span>r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">*</span>x <span class="token operator">+</span> y<span class="token punctuation">,</span> list_x<span class="token punctuation">,</span> list_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reduce-连续的计算，连续调用lambda"><a href="#reduce-连续的计算，连续调用lambda" class="headerlink" title="reduce(连续的计算，连续调用lambda)"></a>reduce(连续的计算，连续调用lambda)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>list_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>r <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">,</span>list_x<span class="token punctuation">)</span><span class="token comment"># 第一次调用x=1，y=2，第二次调用，x=x+y，y=3，第三次调用，x=x+y，y=4依此类推。相当于(((((((1+2)+3)+4)+5)+6)+7)+8)=36</span>r1 <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">,</span>list_x<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment"># 这里是((((10+1)+2)+3)...+8)=46</span>r2 <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">,</span>list_x<span class="token punctuation">,</span><span class="token string">'aa'</span><span class="token punctuation">)</span>   <span class="token comment"># 这里结果为'aa112345678'</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Google提出的大数据计算模型–map/reduce，是一种编程模型，map是映射；reduce规约；用于大数据并行计算。  </p><h2 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter(过滤)"></a>filter(过滤)</h2><p>函数式编程&amp;命令式编程（lisp函数式编程的鼻祖，在人工智能领域应用的是比较多的）  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span>list_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>r <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token punctuation">,</span> list_x<span class="token punctuation">)</span>   <span class="token comment"># filter的lambda表达式返回结果为True/False，能表示True/False的返回结果就行（比如0/1）</span>r1 <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">,</span> list_x<span class="token punctuation">)</span>   <span class="token comment"># 因为这里x取值只有0/1，x为0就是False，x为1就是True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="装饰器-python进阶中使用较多的"><a href="#装饰器-python进阶中使用较多的" class="headerlink" title="装饰器(python进阶中使用较多的)"></a>装饰器(python进阶中使用较多的)</h2><blockquote><p>对修改是封闭的，对扩展是开放的–编写代码的封闭原则<br>通过扩展一个函数/类，来解决需求变更的问题  </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># unix时间戳（格林威治时间1970/01/01 00:00:00到执行此段话的总秒数；现在距格林威治时间多少秒）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function'</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function2'</span><span class="token punctuation">)</span><span class="token comment"># 下面定义函数没有体现与f1/f2相关联</span><span class="token keyword">def</span> <span class="token function">print_current_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>print_current_time<span class="token punctuation">(</span>f1<span class="token punctuation">)</span>print_current_time<span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token comment"># 上面定义函数,和下面的几乎没有区别</span><span class="token comment"># print(time.time())</span><span class="token comment"># f1()</span><span class="token comment"># print(time.time())</span><span class="token comment"># f2()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="这里就是装饰器-没啥价值"><a href="#这里就是装饰器-没啥价值" class="headerlink" title="这里就是装饰器(没啥价值)"></a>这里就是装饰器(没啥价值)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token comment"># 这里也没有体现与f2相关联</span><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function'</span><span class="token punctuation">)</span>f <span class="token operator">=</span> decorator<span class="token punctuation">(</span>f1<span class="token punctuation">)</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装饰器的灵魂"><a href="#装饰器的灵魂" class="headerlink" title="装饰器的灵魂"></a>装饰器的灵魂</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@decorator</span>   <span class="token comment"># 装饰器的灵魂</span><span class="token comment"># @+装饰器的名字，使用@decorator不改变调用方式直接使用f1()调用</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function'</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 下面两行是原来的调用方式</span><span class="token comment"># f = decorator(f1)</span><span class="token comment"># f()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python中的装饰器引用了AOP的编程思想  </p><h2 id="在装饰器中调用参数"><a href="#在装饰器中调用参数" class="headerlink" title="在装饰器中调用参数"></a>在装饰器中调用参数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 这里也要存在f1定义的参数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span>func_name<span class="token punctuation">)</span>   <span class="token comment"># 传参</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 定义一个func_name参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name<span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token string">'test func'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面函数执行流程：  </p><ol><li>加载python内置的time函数  </li><li>到decorator（装饰器）方法  </li><li>直接到@decorator这个装饰器  </li><li>这时候执行decorator方法的函数体（这里是一个wrapper函数）  </li><li>直接到return wrapper  </li><li>直接到f1()函数调用/执行这里  </li><li>下面才是执行wrapper函数/方法里面的函数体print()、func()  </li><li>最后是f1方法里面的函数体print() def f1(func_name):此段没有走，但是走了此方法下的函数体和函数调用  </li></ol><h1 id="扩展：-后面传入元祖-后面传入字典，哥们提供，未验证。"><a href="#扩展：-后面传入元祖-后面传入字典，哥们提供，未验证。" class="headerlink" title="扩展：*后面传入元祖**后面传入字典，哥们提供，未验证。"></a>扩展：*后面传入元祖**后面传入字典，哥们提供，未验证。</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 可变参数(这里*args是其它语言通用写法，可以是别的*单词，表示任意参数/任意参数个数),遵循封闭原则。</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 利用装饰器的可变参数定义一个参数名</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>func_name1<span class="token punctuation">,</span> func_name2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 利用可变参数定义多个参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name2<span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token string">'test func'</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">,</span> <span class="token string">'test2'</span><span class="token punctuation">)</span>    <span class="token comment"># 调用这里要和定义保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python里面使用-args，和-kw"><a href="#python里面使用-args，和-kw" class="headerlink" title="python里面使用*args，和**kw"></a>python里面使用*args，和**kw</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>func_name1<span class="token punctuation">,</span> func_name2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name2<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span>func_name3<span class="token punctuation">,</span> func_name4<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># **kw关键字参数(key word)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name3<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name4<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kw<span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token string">'test func'</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">,</span> <span class="token string">'test2'</span><span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token string">'name3'</span><span class="token punctuation">,</span> <span class="token string">'name4'</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装饰器最基本的思想：<br>&emsp;&emsp;如果我们对某一个被封装的单元（比如说函数），做出代码上的修改，我们可以不去具体的实现，而是通过装饰器的这种形式，来改变函数的行为—-代码的稳定性<br>&emsp;&emsp;比如说打印时间这个功能，是我们新增的一个逻辑，我们把这个逻辑封装成一个装饰器，凡是需要有打印时间功能的函数，可以通过 @装饰器名 来加在要打印时间的函数上面—-代码的复用性  </p><h1 id="没有可变参数和关键字参数的情况："><a href="#没有可变参数和关键字参数的情况：" class="headerlink" title="没有可变参数和关键字参数的情况："></a>没有可变参数和关键字参数的情况：</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>i<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span>q<span class="token punctuation">,</span>i<span class="token punctuation">,</span>p<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>we<span class="token punctuation">,</span>qw<span class="token punctuation">,</span>da<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token string">'we'</span><span class="token punctuation">,</span><span class="token string">'qw'</span><span class="token punctuation">,</span><span class="token string">'da'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="几个例子，装饰器的作用"><a href="#几个例子，装饰器的作用" class="headerlink" title="几个例子，装饰器的作用"></a>几个例子，装饰器的作用</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># flask框架</span><span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_javasctipt_http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> <span class="token number">200</span><span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/psw'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@auth<span class="token punctuation">.</span>login_required</span><span class="token keyword">def</span> <span class="token function">get_psw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'psw'</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> generate_password_hash<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'aaaaaa'</span><span class="token punctuation">,</span> <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="以下为菜鸟笔记"><a href="#以下为菜鸟笔记" class="headerlink" title="以下为菜鸟笔记"></a>以下为菜鸟笔记</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the greet() function"</span>    <span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"now you are in the welcome() function"</span>    <span class="token comment"># 每次运行只解开一段if/else语句，对比不同。</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"yasoob"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 这里返回的是greet()</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> welcome<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">#     if name == "yasoob":</span><span class="token comment">#         return greet   # 这里返回的是greet</span><span class="token comment">#     else:</span><span class="token comment">#         return welcome</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">print(hi()())   # 仔细看这里和上面的不同，上面是返回greet()，所以打印的是hi()，而这里返回的是greet,所以是hi()()查询到的资料：再次看看这个代码。在 if&#x2F;else 语句中我们返回 greet 和 welcome，而不是 greet() 和 welcome()。为什么那样？这是因为当你把一对小括号放在后面，这个函数就会执行；然而如果你不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。 你明白了吗？让我再稍微多解释点细节。当我们写下 a &#x3D; hi()，hi() 会被执行，而由于 name 参数默认是 yasoob，所以函数 greet 被返回了。如果我们把语句改为 a &#x3D; hi(name &#x3D; &quot;ali&quot;)，那么 welcome 函数将被返回。我们还可以打印出 hi()()，这会输出 now you are in the greet() function。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="装饰器释义"><a href="#装饰器释义" class="headerlink" title="装饰器释义"></a>装饰器释义</h1><p>以下只涉及装饰器和函数调用  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 第一步将此加载到内存（个人理解：python脚本运行的时候，会先把类和函数加载到内存中，利用pycharm调试模式验证）</span>    <span class="token keyword">return</span> <span class="token string">"hi yasoob!"</span>  <span class="token comment"># 第六步，众所周知，这里被执行是因为第五步调用了hi()方法。</span><span class="token keyword">def</span> <span class="token function">doSomethingBeforeHi</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 第二步，将此加载到内存，参考一。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing hi()"</span><span class="token punctuation">)</span>  <span class="token comment"># 第四步，第三步调用的是此函数/方法，给的参数是hi，</span>    <span class="token comment"># 这时候func=hi（如果第三步给的是其它字符串str，例如'ha'，这里就是func='ha'，注意第五步）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 第五步，因为第四步，我们知道func=hi，所以这里func()就变成hi()了，上面定义的hi()函数被调用,</span>    <span class="token comment"># 这时候看第四步，如果是上面说的func='ha'，这里就会变成'ha'()，执行就会报错，字符串变成了一个函数？？？</span>doSomethingBeforeHi<span class="token punctuation">(</span>hi<span class="token punctuation">)</span>  <span class="token comment"># 第三步，将函数调用加载到内存（利用pycharm调试模式，得到的结果，先加载函数体，再加载函数调用）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="这里就是装饰器-没啥价值的装饰器"><a href="#这里就是装饰器-没啥价值的装饰器" class="headerlink" title="这里就是装饰器(没啥价值的装饰器)"></a>这里就是装饰器(没啥价值的装饰器)</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time  <span class="token comment"># 加载内置time方法</span><span class="token comment"># 这里也没有体现与f2相关联，这里的f2参考 函数式编程.py 文档</span><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义decorator方法，内置func参数；这里被下文 f 调用了传入参数是f1，注一！</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义wrapper方法；接注五，此方法被执行了。</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取时间戳；接注二，这里会先被执行，打印时间戳。注三！</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 函数调用，靠别人传参调用；接注一，所以这里是f1()，注二！</span>    <span class="token keyword">return</span> wrapper  <span class="token comment"># 返回wrapper，这里是decorator的函数体（包括wrapper方法），当decorator方法被调用的时候，才会返回wrapper</span><span class="token comment"># 接注三，return wrapper，返回时间戳。注意这里是wrapper，，不是wrapper()，</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义f1方法</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function'</span><span class="token punctuation">)</span>  <span class="token comment"># f1的函数体；接注一，注一那里调用了f1()方法，此段被执行</span>f <span class="token operator">=</span> decorator<span class="token punctuation">(</span>f1<span class="token punctuation">)</span>  <span class="token comment"># 这里调用了decorator方法，传入的参数是f1函数；同时把decorator()结果赋值给f，结果是return wrapper；注四！</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 接注四，结果为f=wrapper，这里就变成f()=wrapper()，注五！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比有无@decorator的区别：没有的时候，需要把f1作为参数，传递给decorator，然后把执行结果交给f，最后在执行一遍f()<br>有了@decorator之后：可以直接调用f1()，如果没有@decorator，只是执行f1()函数而已，不会去调用装饰器。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 注：上面两个注释太多了，弄懂之后，下面就不需要太多注释</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@decorator</span>  <span class="token comment"># 装饰器的灵魂</span><span class="token comment"># @+装饰器的名字，使用@decorator不改变调用方式直接使用f1()调用</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function'</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 下面两行是原来的调用方式</span><span class="token comment"># f = decorator(f1)</span><span class="token comment"># f()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在装饰器中调用参数-1"><a href="#在装饰器中调用参数-1" class="headerlink" title="在装饰器中调用参数"></a>在装饰器中调用参数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 这里是传入的f1，所以func=f1</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 这里也要有形参，参考注一，如果f1()被调用，一定是有实参的。</span>        <span class="token comment"># 通过上面的两个例子我们知道，这里是被wrapper('实参')调用的，所以这里必须有形参。</span>        <span class="token comment"># 参考文末实参形参的区别（这里遵循第3条，参数的一致性）</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span>func_name<span class="token punctuation">)</span>   <span class="token comment"># 这里是f1()，这样就解释了为什么wrapper那里要加参数，因为下文调用时是f1('test func')</span>    <span class="token keyword">return</span> wrapper   <span class="token comment"># 这里返回decorator(f1)的结果</span><span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># f1函数内置了func_name参数（同事提供：这里可以填入约束形参的类型str之类）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name<span class="token punctuation">)</span>   <span class="token comment"># 打印'This is a function ' + func_name</span>f1<span class="token punctuation">(</span><span class="token string">'test func'</span><span class="token punctuation">)</span>   <span class="token comment"># 调用必须传入实参，注一！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数<em>args，</em>后面可以是其它，*a,<em>b等等，这样以后调用，不用更改装饰器的内容（遵循开闭原则，Just a suggestion）<br>扩展：</em>后面传入元祖**后面传入字典，哥们提供，未验证。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 可变参数(这里*args是其它语言通用写法，可以是别的*单词，表示任意参数/任意参数个数),遵循开闭原则。</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 利用装饰器的可变参数定义一个参数名</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>func_name1<span class="token punctuation">,</span> func_name2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 利用可变参数定义多个参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function '</span> <span class="token operator">+</span> func_name2<span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token string">'test func'</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">,</span> <span class="token string">'test2'</span><span class="token punctuation">)</span>  <span class="token comment"># 调用这里要和定义保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="没有使用可变参数的情况"><a href="#没有使用可变参数的情况" class="headerlink" title="没有使用可变参数的情况"></a>没有使用可变参数的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span>q<span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token decorator annotation punctuation">@decorator</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>we<span class="token punctuation">,</span> qw<span class="token punctuation">,</span> da<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token string">'we'</span><span class="token punctuation">,</span> <span class="token string">'qw'</span><span class="token punctuation">,</span> <span class="token string">'da'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外：没有 不使用@decorator，多次调用，一次传入多个函数的 示例  </p><h1 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h1><p>形参和实参的区别:  </p><ul><li>形参出现在函数定义中，在整个函数体内都可以使用， 离开该函数则不能使用。  </li><li>实参出现在主调函数中，进入被调函数后，实参变量也不能使用。   </li><li>形参和实参的功能是作数据传送。发生函数调用时， 主调函数把实参的值传送给被调函数的形参从而实现主调函数向被调函数的数据传送。  </li></ul><ol><li>形参变量只有在被调用时才分配内存单元，在调用结束时， 即刻释放所分配的内存单元。因此，形参只有在函数内部有效。 函数调用结束返回主调函数后则不能再使用该形参变量。   </li><li>实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值， 以便把这些值传送给形参。 因此应预先用赋值，输入等办法使实参获得确定值。   </li><li>实参和形参在数量上，类型上，顺序上应严格一致， 否则会发生“类型不匹配”的错误。   </li><li>函数调用中发生的数据传送是单向的。 即只能把实参的值传送给形参，而不能把形参的值反向地传送给实参。 因此在函数调用过程中，形参的值发生改变，而实参中的值不会变化。  </li><li>当形参和实参不是指针类型时，在该函数运行时，形参和实参是不同的变量，他们在内存中位于不同的位置，形参将实参的内容复制一份，在该函数运行结束的时候形参被释放，而实参内容不会改变。<br>而如果函数的参数是指针类型变量,在调用该函数的过程中，传给函数的是实参的地址，在函数体内部使用的也是实参的地址，即使用的就是实参本身。所以在函数体内部可以改变实参的值。  </li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> 形参和实参 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(十一)</title>
      <link href="/posts/4fdb.html"/>
      <url>/posts/4fdb.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="枚举的意义在于它的标签，不在于它的取值"><a href="#枚举的意义在于它的标签，不在于它的取值" class="headerlink" title="枚举的意义在于它的标签，不在于它的取值"></a>枚举的意义在于它的标签，不在于它的取值</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">VIP</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>    GREEN <span class="token operator">=</span> <span class="token number">2</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span>VIP<span class="token punctuation">.</span>YELLOW<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现枚举的功能"><a href="#实现枚举的功能" class="headerlink" title="实现枚举的功能"></a>实现枚举的功能</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span>yellow <span class="token operator">=</span> <span class="token number">1</span>green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">&#123;</span><span class="token string">'yellow'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 最贴近枚举</span><span class="token keyword">class</span> <span class="token class-name">TypeDiamond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    yellow <span class="token operator">=</span> <span class="token number">1</span>    green <span class="token operator">=</span> <span class="token number">2</span><span class="token comment"># 缺点：可变、没有防止相同标签的功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举的类型、枚举的值、枚举的名字"><a href="#枚举的类型、枚举的值、枚举的名字" class="headerlink" title="枚举的类型、枚举的值、枚举的名字"></a>枚举的类型、枚举的值、枚举的名字</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">VIP</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 枚举类型VIP</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>   <span class="token comment"># 枚举标签 = 枚举值</span>    GREEN <span class="token operator">=</span> <span class="token number">2</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span>    <span class="token comment"># RED = 5   相同标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>VIP<span class="token punctuation">.</span>YELLOW<span class="token punctuation">)</span><span class="token comment"># VIP.YELLOW = 5    对YELLOW赋值，改变YELLOW</span><span class="token keyword">print</span><span class="token punctuation">(</span>VIP<span class="token punctuation">.</span>GREEN<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token comment"># 打印标签的值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>VIP<span class="token punctuation">.</span>GREEN<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 这是一个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>VIP<span class="token punctuation">.</span>GREEN<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token comment"># 标签的名字</span><span class="token keyword">print</span><span class="token punctuation">(</span>VIP<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>VIP<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 这是enum的类型（枚举类型）</span><span class="token keyword">print</span><span class="token punctuation">(</span>VIP<span class="token punctuation">[</span><span class="token string">'GREEN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 枚举类['枚举名称']，打印具体的枚举的类型VIP.GREEN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举的遍历，for循环"><a href="#枚举的遍历，for循环" class="headerlink" title="枚举的遍历，for循环"></a>枚举的遍历，for循环</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">VIP</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>    GREEN <span class="token operator">=</span> <span class="token number">2</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">for</span> v <span class="token keyword">in</span> VIP<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举之间的比较"><a href="#枚举之间的比较" class="headerlink" title="枚举之间的比较"></a>枚举之间的比较</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">VIP</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>    GREEN <span class="token operator">=</span> <span class="token number">2</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">class</span> <span class="token class-name">VIP1</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>    GREEN <span class="token operator">=</span> <span class="token number">2</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span>result <span class="token operator">=</span> VIP<span class="token punctuation">.</span>GREEN <span class="token operator">==</span> VIP<span class="token punctuation">.</span>RED     <span class="token comment"># 枚举之间比较返回bool值</span>result1 <span class="token operator">=</span> VIP<span class="token punctuation">.</span>GREEN <span class="token operator">==</span> VIP<span class="token punctuation">.</span>GREEN<span class="token comment"># result2 = VIP.GREEN > VIP.RED   # 不可以这样比较</span>result3 <span class="token operator">=</span> VIP<span class="token punctuation">.</span>GREEN <span class="token operator">==</span> <span class="token number">2</span>   <span class="token comment"># 等值比较</span>result4 <span class="token operator">=</span> VIP<span class="token punctuation">.</span>GREEN <span class="token keyword">is</span> VIP<span class="token punctuation">.</span>GREEN   <span class="token comment"># 枚举之间可以进行身份比较</span>result5 <span class="token operator">=</span> VIP<span class="token punctuation">.</span>GREEN <span class="token operator">==</span> VIP1<span class="token punctuation">.</span>GREEN   <span class="token comment"># 不同枚举类型不能比较</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举的注意事项"><a href="#枚举的注意事项" class="headerlink" title="枚举的注意事项"></a>枚举的注意事项</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">VIP</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>    GREEN <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 这里GREEN是YELLOW的别名，GREEN最好更改为YELLOW_ALIAS。在使用for遍历的时候，此行不会出现。</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span><span class="token comment"># print(VIP.GREEN)   # 这里结果为VIP.YELLOW</span><span class="token keyword">for</span> v <span class="token keyword">in</span> VIP<span class="token punctuation">:</span>    <span class="token comment">#遍历不会打印出GREEN。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token comment"># 想要遍历GREEN的方法：</span><span class="token comment"># for v in VIP.__members__.items():   # 调用items方法，会打印出一个元组，是包括GREEN的</span>    <span class="token comment"># print(v)</span><span class="token comment"># for v in VIP.__members__:    # 不想要元组，可以不用items方法，这样的结果为枚举的标签的名称。</span>    <span class="token comment"># print(v)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平常使用枚举经常遇到的问题  </p><ol><li>在数据库里存储数值表示枚举类型，和存储标签名表示枚举类型。  </li><li>建议使用数字表示（简洁，占空间小）  </li><li>在代码里面用数字代表枚举类型，不建议。  </li><li>建议在代码里面显式的定义一个枚举类，用枚举类下面的每一个枚举类型来对应数据库的每一个数值  </li></ol><p><strong>例如：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment">#不建议</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> a<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> a<span class="token operator">==</span>VIP<span class="token punctuation">.</span>YELLOW<span class="token punctuation">:</span>   <span class="token comment">#建议这样</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> a<span class="token operator">==</span>VIP<span class="token punctuation">.</span>BLACK<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何把数字转换成枚举类型"><a href="#如何把数字转换成枚举类型" class="headerlink" title="如何把数字转换成枚举类型"></a>如何把数字转换成枚举类型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">VIP</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>    GREEN <span class="token operator">=</span> <span class="token number">2</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">class</span> <span class="token class-name">Common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>VIP<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> IntEnum<span class="token punctuation">,</span>unique   <span class="token comment"># IntEnum要求必须是整型，Enum没有限制</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token decorator annotation punctuation">@unique</span>    <span class="token comment"># 引入uniqe使用IntEnum的时候，不同标签的值不同会报错。</span><span class="token keyword">class</span> <span class="token class-name">VIP</span><span class="token punctuation">(</span>IntEnum<span class="token punctuation">)</span><span class="token punctuation">:</span>    YELLOW <span class="token operator">=</span> <span class="token number">1</span>    GREEN <span class="token operator">=</span> <span class="token number">1</span>    BLACK <span class="token operator">=</span> <span class="token number">3</span>    RED <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举类型在python中实现的是一种单例模式，也就是说对枚举类型是不能实例化的，对枚举实例化没有意义<br>23种设计模式  单例模式  </p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>函数：在python中是对象，在其它语言只是一段可执行的代码<br>python：一切皆对象<br>python可以把函数当作一个参数，传递给另一个函数里。<br>也可以把一个函数，当作另外一个函数的返回结果  </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token string">'2'</span>c <span class="token operator">=</span> <span class="token string">'def'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">curve_pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 定义curve_pre函数</span>    <span class="token keyword">def</span> <span class="token function">curve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 定义curve函数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a function'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> curve   <span class="token comment"># 在curve_pre函数中调用curve函数</span>f <span class="token operator">=</span> curve_pre<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 调用curve_pre函数（直接写curve_pre是没有内容的，因为函数没有被调用）</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 调用f函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>闭包：函数在定义时候的由外部环境变量所构成的整体，不会受外部函数的影响<br>闭包 = 函数 + 环境变量<br>环境变量一定是在定义在函数的外部（这里是在curve外部），也不能是全局变量（不能在curve_pre上面）。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">curve_pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">25</span>    <span class="token keyword">def</span> <span class="token function">curve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 函数接受参数x</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>x<span class="token operator">*</span>x    <span class="token keyword">return</span> curvea <span class="token operator">=</span> <span class="token number">10</span>f <span class="token operator">=</span> curve_pre<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>__closure__<span class="token punctuation">)</span>   <span class="token comment"># 闭包的环境变量，保存在closure里面</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>__closure__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cell_contents<span class="token punctuation">)</span>   <span class="token comment"># 取出闭包的环境变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包的意义：保存的是一个环境。"><a href="#闭包的意义：保存的是一个环境。" class="headerlink" title="闭包的意义：保存的是一个环境。"></a>闭包的意义：保存的是一个环境。</h2><p>他把函数调用的现场保存起来了  </p><p>单一的函数是不能决定运行结果的，还需要环境变量  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">curve_pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">25</span>    <span class="token keyword">def</span> <span class="token function">curve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>x<span class="token operator">*</span>x    <span class="token keyword">return</span> curve<span class="token keyword">def</span> <span class="token function">curve_pre1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 不同的闭包</span>    a <span class="token operator">=</span> <span class="token number">25</span>    <span class="token keyword">def</span> <span class="token function">curve1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>x<span class="token operator">*</span>x    <span class="token keyword">return</span> curve1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token number">20</span>   <span class="token comment"># 这里a会被python认为局部变量，不叫作闭包</span>        <span class="token comment"># c = 20 * a   # 这里是引用上面的变量a，所以才是闭包。（关键在于这里的a是引用的上面的环境变量）</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment"># 从外往里，这里a=10，f2函数没有被调用</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment"># 这里a=20，是f2函数被调用了</span>    f2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment"># 这里a=10，是调用的f1函数</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># f = f1()</span><span class="token comment"># print(f)</span><span class="token comment"># print(f.__closure__)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局变量编程"><a href="#全局变量编程" class="headerlink" title="全局变量编程"></a>全局变量编程</h2><p>不建议，因为不能保证其它函数改变全局变量  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span>origin <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> origin   <span class="token comment"># global声明全局变量，表示这是一个全局变量，而不是局部变量</span>    new_pos <span class="token operator">=</span> origin <span class="token operator">+</span> step    origin <span class="token operator">=</span> new_pos    <span class="token keyword">return</span> new_pos<span class="token keyword">print</span><span class="token punctuation">(</span>go<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>go<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>go<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>保护现场功能，记忆了上一次调用的状态  </p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span>origin <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">factory</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> pos   <span class="token comment"># 声明变量在整个闭包中都有效</span>        new_pos <span class="token operator">=</span> pos <span class="token operator">+</span> step        pos <span class="token operator">=</span> new_pos        <span class="token keyword">return</span> new_pos    <span class="token keyword">return</span> gotourist <span class="token operator">=</span> factory<span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tourist<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span>   <span class="token comment"># 这样验证全局变量没有被改变。</span><span class="token keyword">print</span><span class="token punctuation">(</span>tourist<span class="token punctuation">.</span>__closure__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cell_contents<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tourist<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tourist<span class="token punctuation">.</span>__closure__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cell_contents<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tourist<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tourist<span class="token punctuation">.</span>__closure__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cell_contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>闭包问题，容易造成内存泄漏，如果是JS页面有大量闭包，会造成浏览器卡顿(因为闭包的变量是存储在内存里面)</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次VMware虚拟机扩容</title>
      <link href="/posts/d79.html"/>
      <url>/posts/d79.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p><strong><font color=red>更正：虚拟机安装的时候磁盘分区是默认未配置，或者选择lvm逻辑卷管理才可使用本方法，遇到BUG和ERR欢迎留言或+Q</font></strong>  </p><p>前言：编写lamp编译安装文档的时候，MySQL8.0 cmake完成，make编译的时候磁盘空间不足（原/有17G，一共20G，swap2G，boot1G）  </p><p>故有此次扩容文档，适用于服务器系统盘扩容（不建议这样做，应当提前规划好各系统目录的作用，做好逻辑卷等等）  </p><p>不涉及到关机操作，应急使用，操作步骤：  </p><ol><li>打开要扩容的虚拟机设置–&gt;选中磁盘–&gt;点击扩展，输入扩容后的大小，等待扩容完成。</li></ol><h1 id="进入虚拟机经行命令操作"><a href="#进入虚拟机经行命令操作" class="headerlink" title="进入虚拟机经行命令操作"></a>进入虚拟机经行命令操作</h1><p>命令下是执行此命令打印的信息，删除了大部分，留下的是关键信息部分  </p><h2 id="查看可用磁盘大小，我的是20G扩容到40G"><a href="#查看可用磁盘大小，我的是20G扩容到40G" class="headerlink" title="查看可用磁盘大小，我的是20G扩容到40G"></a>查看可用磁盘大小，我的是20G扩容到40G</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> -l<span class="token comment"># Disk /dev/nvme0n1：40 GiB，42949672960 字节，83886080 个扇区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="仍然显示17G"><a href="#仍然显示17G" class="headerlink" title="仍然显示17G"></a>仍然显示17G</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> -h<span class="token comment"># 文件系统             容量  已用  可用 已用% 挂载点</span><span class="token comment"># /dev/mapper/cl-root   17G  1.8G   16G   11% /</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="对其进行新的分区"><a href="#对其进行新的分区" class="headerlink" title="对其进行新的分区"></a>对其进行新的分区</h2><p>由fdisk -l得到的信息，对其进行新的分区，除了第一次输入n，最后一次输入w，其它可以直接回车  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> /dev/nvme0n1<span class="token comment"># 命令(输入 m 获取帮助)：n</span><span class="token comment"># 选择 (默认 p)：</span><span class="token comment"># 分区号 (3,4, 默认  3): </span><span class="token comment"># 第一个扇区 (41943040-83886079, 默认 41943040): </span><span class="token comment"># 上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (41943040-83886079, 默认 83886079): </span><span class="token comment"># 创建了一个新分区 3，类型为“Linux”，大小为 20 GiB。</span><span class="token comment"># 命令(输入 m 获取帮助)：w</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看新建的分区"><a href="#查看新建的分区" class="headerlink" title="查看新建的分区"></a>查看新建的分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk -l<span class="token comment"># nvme0n1p3 259:3    0  20G  0 part </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="对新分区做物理卷"><a href="#对新分区做物理卷" class="headerlink" title="对新分区做物理卷"></a>对新分区做物理卷</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pvcreate /dev/nvme0n1p3<span class="token comment"># Physical volume "/dev/nvme0n1p3" successfully created.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查询root分区所在的卷组"><a href="#查询root分区所在的卷组" class="headerlink" title="查询root分区所在的卷组"></a>查询root分区所在的卷组</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vgdisplay -v<span class="token comment"># --- Logical volume ---</span><span class="token comment"># LV Path                /dev/cl/root</span><span class="token comment"># LV Name                root   # 逻辑卷名</span><span class="token comment"># VG Name                cl   # 卷组名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展cl卷组"><a href="#扩展cl卷组" class="headerlink" title="扩展cl卷组"></a>扩展cl卷组</h2><p>扩展cl卷组，即把物理卷/dev/nvme0n1p3分配到cl卷组  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vgextend cl /dev/nvme0n1p3<span class="token comment"># Volume group "cl" successfully extended</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="将cl卷组的剩余容量全部分给根分区"><a href="#将cl卷组的剩余容量全部分给根分区" class="headerlink" title="将cl卷组的剩余容量全部分给根分区"></a>将cl卷组的剩余容量全部分给根分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvextend -l +100%FREE /dev/cl/root<span class="token comment"># Size of logical volume cl/root changed from &lt;17.00 GiB (4351 extents) to 36.99 GiB (9470 extents).</span><span class="token comment"># Logical volume cl/root successfully resized.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="同步文件系统"><a href="#同步文件系统" class="headerlink" title="同步文件系统"></a>同步文件系统</h2><p>同步文件系统，另外一种写法xfs_growfs /dev/cl/root报错，酌情使用。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xfs_growfs  /<span class="token comment"># meta-data=/dev/mapper/cl-root    isize=512    agcount=4, agsize=1113856 blks</span><span class="token comment">#          =                       sectsz=512   attr=2, projid32bit=1</span><span class="token comment">#          =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><span class="token comment">#          =                       reflink=1</span><span class="token comment"># data     =                       bsize=4096   blocks=4455424, imaxpct=25</span><span class="token comment">#          =                       sunit=0      swidth=0 blks</span><span class="token comment"># naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><span class="token comment"># log      =internal log           bsize=4096   blocks=2560, version=2</span><span class="token comment">#          =                       sectsz=512   sunit=0 blks, lazy-count=1</span><span class="token comment"># realtime =none                   extsz=4096   blocks=0, rtextents=0</span><span class="token comment"># data blocks changed from 4455424 to 9697280</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看扩容后的根分区大小"><a href="#查看扩容后的根分区大小" class="headerlink" title="查看扩容后的根分区大小"></a>查看扩容后的根分区大小</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> -h<span class="token comment"># /dev/mapper/cl-root   37G  2.0G   36G    6% /</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(十)</title>
      <link href="/posts/4f83.html"/>
      <url>/posts/4f83.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>正则表达式是一个特殊的字符序列，一个字符串是否与我们所设定的这样的字符序列，相匹配<br>快速检索文本，实现一些替换文本的操作  </p><ol><li>检查一串数字是否是电话号码</li><li>检测一个字符串是否符合email</li><li>把一个文本里指定的单词替换成另外一个单词</li></ol><h1 id="python正则表达式"><a href="#python正则表达式" class="headerlink" title="python正则表达式"></a>python正则表达式</h1><h2 id="从长字符串中取出特定的字符串’Python’"><a href="#从长字符串中取出特定的字符串’Python’" class="headerlink" title="从长字符串中取出特定的字符串’Python’"></a>从长字符串中取出特定的字符串’Python’</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 正则表达式、JSON（XML用的少）</span><span class="token keyword">import</span> re   <span class="token comment"># re是python自带的内置函数，用于匹配规则</span><span class="token comment"># re.findall('字符串', a)   # re用法|在a里面匹配指定的'字符串'</span>a <span class="token operator">=</span> <span class="token string">'C|C++|Java|C#|Python|Javascript'</span><span class="token comment"># print(a.index('Python')>-1)   # 利用python的内置函数index()</span><span class="token comment"># print('Python' in a)   #利用in</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>   <span class="token comment"># 打印结果是一个列表，因为匹配到的正则表达式可能有多个</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串包含Python'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串不包含Python'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取出字符串中的数字-d"><a href="#取出字符串中的数字-d" class="headerlink" title="取出字符串中的数字\d"></a>取出字符串中的数字\d</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'C0C++1Java2C#3Python4Javascript'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>   <span class="token comment"># 这里的字符串可以填写"P.*n"或者"[0-9]",表示匹配P开头n结尾的字符串，和0-9所有数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串包含Python'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字符串不包含Python'</span><span class="token punctuation">)</span><span class="token comment"># 'Python'普通字符</span><span class="token comment"># '\d'元字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则中字符集的使用"><a href="#正则中字符集的使用" class="headerlink" title="正则中字符集的使用"></a>正则中字符集的使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 字符集</span><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'abc, acc, adc, aec, afc, ahc'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'a[cf]c'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>   <span class="token comment"># 这里"a[cf]c"，前后的a和c变成了定界符，规定了a开头中间是c或者f以c结尾的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment"># []中括号里面是 或 关系，[^abc]反选 除了 abc 其他的都选。[a-d]连续 代表abcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="概括字符集和数量词num"><a href="#概括字符集和数量词num" class="headerlink" title="概括字符集和数量词num"></a>概括字符集和数量词num</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 概括字符集(\d,\D,\w,etc)etc意思是"及其他"。下文不解释。</span><span class="token comment"># 数量词</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'python1111java678php'</span><span class="token comment"># r = re.findall('\d', a)</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[a-z]&#123;3,6&#125;'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>   <span class="token comment"># 匹配[a-z]最少3次至多6次</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="贪婪模式😋"><a href="#贪婪模式😋" class="headerlink" title="贪婪模式😋"></a>贪婪模式😋</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 贪婪与非贪婪，python默认为贪婪模式，比如&#123;3,6&#125;python不会匹配到3就停止，而是按最多匹配到6次停止</span><span class="token comment"># 非贪婪的表示|在正则表达式后面加上?</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'python1111java678php'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[a-z]&#123;3,6&#125;?'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>   <span class="token comment">#加上?使用非贪婪的模式，平常写代码，这里处理不好会经常有BUG</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数量词，非num"><a href="#数量词，非num" class="headerlink" title="数量词，非num"></a>数量词，非num</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 数量词，</span><span class="token comment"># * ，匹配 * 前面的字符 0次或者无限多次</span><span class="token comment"># + ，匹配1次或者无限多次</span><span class="token comment"># ? ，匹配0次或者1次</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'pytho0 python1 pythonn2'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'python?'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="边界匹配"><a href="#边界匹配" class="headerlink" title="边界匹配"></a>边界匹配</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 边界匹配</span><span class="token keyword">import</span> reqq <span class="token operator">=</span> <span class="token string">'1000000001'</span><span class="token comment"># 打印4-8位qq号</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'^\d&#123;4,8&#125;$'</span><span class="token punctuation">,</span> qq<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 组</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'PythonPythonPythonPythonPython'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'(Python)&#123;2&#125;'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment"># []中括号代表或关系，()小括号代表一组数据。</span><span class="token comment"># r = re.findall('(python)&#123;2&#125;', a, re.I)   # re.I表示不区分大小写</span><span class="token comment"># '(Python)&#123;3&#125;(JS)'表示3个Python为一组，后面是JS的，匹配出来。</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="且-n匹配"><a href="#且-n匹配" class="headerlink" title="且\n匹配"></a>且\n匹配</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'PythonC#\nJavaPHP'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'c#.&#123;1&#125;'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I <span class="token operator">|</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>   <span class="token comment">#这里的 | 表示并且。</span><span class="token comment"># .点表示匹配任意字符，除了\n。而re.S表示要求.匹配到\n。</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">'PythonC#JavaC#PHP'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'C#'</span><span class="token punctuation">,</span> <span class="token string">'GO'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>   <span class="token comment"># re.sub()替换。('C#', 'GO', a, 0) 把C#替换成GO，0代表替换所有，1代表替换第一个，不填默认是0</span><span class="token comment"># b = a.replace('C#', 'GO')   # 另一种替换方式。使用b是因为字符串不可以被修改，所以要重新赋值。</span><span class="token comment"># print(b)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Ctrl + Alt + L可以调 整缩进，因为此篇即以前以后的大部分为笔记，为节省行数不会刻意调整。</span><span class="token keyword">import</span> relanguage <span class="token operator">=</span> <span class="token string">'PythonC#JavaC#PHPC#'</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 这里打印一下value的值，会发现有三行&lt;re.Match object; span=(6, 8), match='C#'></span>    <span class="token comment"># object表示对象 span代表位置 match是匹配的字符，意思就是匹配value，获得了3个结果。</span>    <span class="token comment"># value就是下面 re.sub传进来的参数C#</span>    matched <span class="token operator">=</span> value<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 这样以后会经常使用</span>    <span class="token keyword">return</span> <span class="token string">'!!'</span> <span class="token operator">+</span> matched <span class="token operator">+</span> <span class="token string">'!!'</span>  <span class="token comment"># 返回的结果，会替换C#</span>    <span class="token comment"># return返回的结果会替换value</span>    <span class="token comment"># 实际上就是函数作为re.sub第二个参数，convert返回结果替换掉C#（可以把函数当作参数）</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'C#'</span><span class="token punctuation">,</span> convert<span class="token punctuation">,</span> language<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># re.sub第二个参数可以是一个函数。这里0不写默认是所有。</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'A8C3721D86'</span>   <span class="token comment"># 匹配所有数字，将>=6的改为9，&lt;6改为0.</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    matched <span class="token operator">=</span> value<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'9'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'0'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">,</span> convert<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment"># 从软件设计的角度，一个函数接收另一个函数作为参数，在软件里面是一个非常经典的思想，这样做的一个好处|</span><span class="token comment"># 比如sub函数的编写方，有一些逻辑是无法帮助调用方去做决定的，所以编写方开放一个接口，让调用方编写一个函数（这里是convert），</span><span class="token comment"># 然后把调用方的函数作为sub的参数，给调用方一个中间的结果value，不管调用方如何处理这个value，最后返回一个字符串给编写方即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 把单个数字剔除，以两位为一组找出大于50的替换成100，小于50的替换成0</span><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'A83B4C45D67E1'</span><span class="token comment"># str = '.?'</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    matched <span class="token operator">=</span> value<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># print(matched)</span>    <span class="token comment"># print(value)b</span>    <span class="token comment"># print(str)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'\d&#123;1,2&#125;'</span><span class="token punctuation">,</span> convert<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="match和search"><a href="#match和search" class="headerlink" title="match和search"></a>match和search</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># re模块的另外的函数|re.match和re.search</span><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'1A83B4C45D67E1'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>r1 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># match从字符串的首字母开始匹配，匹配不到返回空（None）</span><span class="token comment"># search是搜索整个字符串，直到匹配到第一个满足结果，就把结果返回（返回的是对象）</span><span class="token comment"># match和search只匹配一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'life is short, i use python'</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'life(.*)python'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 爬虫爬取html网页时，标签是不需要的，所以使用group获取；(life(.*)python)外面括号可以不加，但是group(0)永远表示最外面的括号，group(1)才是(.*)</span><span class="token comment"># a = re.findall('life(.*)python', s)</span><span class="token comment"># print(a)    #使用findall，把(.*)括起来，可以直接打印出来要匹配的组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'life is short, i use python, i love python'</span><span class="token comment"># r = re.search('life(.*)python', s)   # 这里会匹配到最后一个python</span>r <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'life(.*)python(.*)python'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># group也可以这样用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>什么是JSON|</p><blockquote><p>是一种轻量级的数据交换格式<br>JSON是一种数据格式<br>字符串是JSON的表现形式  </p></blockquote><p>JSON字符串|符合JSON格式的字符串，看一下例子|  </p><blockquote><p>{a: “haha”&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;❌<br>{“name”: “haha”}&emsp;&emsp;&emsp;✔</p></blockquote><p>JSON VS XML（互联网产品大部分先择JSON来做数据交换）<br>JSON优势|  </p><blockquote><p>易于阅读<br>易于解析<br>网络传输效率高<br>跨语言交换数据</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> jsonjson_str <span class="token operator">=</span> <span class="token string">'&#123;"name":"haha", "age":9&#125;'</span>   <span class="token comment"># 若定义json字符串，&#123;&#125;里面必须是双引号，所以&#123;&#125;外面是单引号</span><span class="token comment"># JSON 中表示上面的字符串是object对象，还有array数组</span>json_array <span class="token operator">=</span> <span class="token string">'[&#123;"name":"haha", "age":9, "flag":false&#125;, &#123;"name":"xixi", "age":8&#125;]'</span>student <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span>student1 <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_array<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token comment"># print(student['name'])</span><span class="token comment"># print(student['age'])</span><span class="token comment"># 不同的语言会把同样的JSON字符串转换成不同的数据类型</span><span class="token comment"># 反序列化，字符串到python数据类型的过程。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>json中数据类型对应的python数据类型  </p><table><thead><tr><th align="left">json</th><th align="left">python</th></tr></thead><tbody><tr><td align="left">object</td><td align="left">dict</td></tr><tr><td align="left">array</td><td align="left">list</td></tr><tr><td align="left">string</td><td align="left">str</td></tr><tr><td align="left">number</td><td align="left">int</td></tr><tr><td align="left">number</td><td align="left">float</td></tr><tr><td align="left">true</td><td align="left">True</td></tr><tr><td align="left">false</td><td align="left">False</td></tr><tr><td align="left">null</td><td align="left">None</td></tr></tbody></table><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 序列化</span><span class="token keyword">import</span> jsonstudent <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'haha'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'flag'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xixi'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>json_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token comment"># NOSQL MongoDB 比较适合存储对象，</span><span class="token comment"># 将对象序列化成字符串，存到MySQL中，读出来之后反序列化成对象。--不建议这样做。</span><span class="token comment"># 或者将对象拆分之后，以目录树的形式，存储到MySQL中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSON、JSON对象  </p><blockquote><p>JSON|数据交换的标准格式<br>JSON对象|在Javascript中是存在JSON对象的，对于python来说是没有JSON对象说法的。  </p></blockquote><p>&emsp;&emsp;JavaScript是实现ECMASCRIPT（W3C制定的脚本标准）标准之一，同样也有ActionScript，JSON，TypeScript（微软）  </p><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><style>table th:first-of-type {    width: 120px;}</style><table><thead><tr><th align="left">元字符</th><th>描述</th></tr></thead><tbody><tr><td align="left"><code>\</code></td><td>将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，”<code>\\n</code>“匹配<code>\n</code>。”<code>\n</code>“匹配换行符。序列”<code>\\</code>“匹配”<code>\</code>“而”<code>\(</code>“则匹配”<code>(</code>“。即相当于多种编程语言中都有的”转义字符”的概念。</td></tr><tr><td align="left"><code>^</code></td><td>匹配输入字行首。如果设置了RegExp对象的Multiline属性，<code>^</code>也匹配”<code>\n</code>“或”<code>\r</code>“之后的位置。</td></tr><tr><td align="left"><code>$</code></td><td>匹配输入行尾。如果设置了RegExp对象的Multiline属性，<code>$</code>也匹配”<code>\n</code>“或”<code>\r</code>“之前的位置。</td></tr><tr><td align="left"><code>*</code></td><td>匹配前面的子表达式任意次。例如，<code>zo*</code>能匹配”<code>z</code>“，也能匹配”<code>zo</code>“以及”<code>zoo</code>“。<code>*</code>等价于{<code>0,</code>}。</td></tr><tr><td align="left"><code>+</code></td><td>匹配前面的子表达式一次或多次(大于等于1次）。例如，”<code>zo+</code>“能匹配”<code>zo</code>“以及”<code>zoo</code>“，但不能匹配”<code>z</code>“。<code>+</code>等价于<code>&#123;1,&#125;</code>。</td></tr><tr><td align="left"><code>?</code></td><td>匹配前面的子表达式零次或一次。例如，”<code>do(es)?</code>“可以匹配”<code>do</code>“或”<code>does</code>“。<code>?</code>等价于<code>&#123;0,1&#125;</code>。</td></tr><tr><td align="left"><code>&#123;*n*&#125;</code></td><td><code>*n*</code>是一个非负整数。匹配确定的<code>*n*</code>次。例如，”<code>o&#123;2&#125;</code>“不能匹配”<code>Bob</code>“中的”<code>o</code>“，但是能匹配”<code>food</code>“中的两个<code>o</code>。</td></tr><tr><td align="left"><code>&#123;*n*,&#125;</code></td><td><code>*n*</code>是一个非负整数。至少匹配<code>*n*</code>次。例如，”<code>o&#123;2,&#125;</code>“不能匹配”<code>Bob</code>“中的”<code>o</code>“，但能匹配”<code>foooood</code>“中的所有<code>o</code>。”<code>o&#123;1,&#125;</code>“等价于”<code>o+</code>“。”<code>o&#123;0,&#125;</code>“则等价于”<code>o*</code>“。</td></tr><tr><td align="left"><code>&#123;*n*,*m*&#125;</code></td><td><code>*m*</code>和<code>*n*</code>均为非负整数，其中<code>*n*</code>&lt;=<code>*m*</code>。最少匹配<code>*n*</code>次且最多匹配<code>*m*</code>次。例如，”<code>o&#123;1,3&#125;</code>“将匹配”<code>fooooood</code>“中的前三个o为一组，后三个o为一组。”<code>o&#123;0,1&#125;</code>“等价于”<code>o?</code>“。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left"><code>?</code></td><td>当该字符紧跟在任何一个其他限制符（<code>*,+,?，&#123;*n*&#125;，&#123;*n*,&#125;，&#123;*n*,*m*&#125;</code>）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少地匹配所搜索的字符串，而默认的贪婪模式则尽可能多地匹配所搜索的字符串。例如，对于字符串”oooo”，”o+”将尽可能多地匹配”o”，得到结果[“oooo”]，而”<code>o+?</code>“将尽可能少地匹配”o”，得到结果 <code>[&#39;o&#39;, &#39;o&#39;, &#39;o&#39;, &#39;o&#39;]</code></td></tr><tr><td align="left"><code>.</code></td><td>匹配除”<code>\n</code>“和”<code>\r</code>“之外的任何单个字符。要匹配包括”<code>\n</code>“和”<code>\r</code>“在内的任何字符，请使用像”<code>[\s\S]</code>“的模式。</td></tr><tr><td align="left"><code>(pattern)</code></td><td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用<code>$0…$9</code>属性。要匹配圆括号字符，请使用”<code>\(</code>“或”<code>\)</code>“。</td></tr><tr><td align="left"><code>(?:pattern)</code></td><td>非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符”<code>(|)</code>“来组合一个模式的各个部分时很有用。例如”<code>industr(?:y|ies)</code>“就是一个比”<code>industry|industries</code>“更简略的表达式。</td></tr><tr><td align="left"><code>(?=pattern)</code></td><td>非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，”<code>Windows(?=95|98|NT|2000)</code>“能匹配”<code>Windows2000</code>“中的”<code>Windows</code>“，但不能匹配”<code>Windows3.1</code>“中的”<code>Windows</code>“。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left"><code>(?!pattern)</code></td><td>非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如”<code>Windows(?!95|98|NT|2000)</code>“能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。</td></tr><tr><td align="left"><code>(?&lt;=pattern)</code></td><td>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，”<code>(?&lt;=95|98|NT|2000)Windows</code>“能匹配”2000Windows”中的”Windows”，但不能匹配”3.1Windows”中的”Windows”。</td></tr><tr><td align="left"><code>(?&lt;!patte_n)</code></td><td>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如”<code>(?&lt;!95|98|NT|2000)Windows</code>“能匹配”3.1Windows”中的”Windows”，但不能匹配”2000Windows”中的”Windows”。</td></tr><tr><td align="left"><code>x|y</code></td><td>匹配<code>x</code>或<code>y</code>。例如，”<code>z|food</code>“能匹配”<code>z</code>“或”<code>food</code>“(此处请谨慎)。”<code>[z|f]ood</code>“则匹配”<code>zood</code>“或”<code>food</code>“。</td></tr><tr><td align="left"><code>[xyz]</code></td><td>字符集合。匹配所包含的任意一个字符。例如，”<code>[abc]</code>“可以匹配”plain”中的”a”。</td></tr><tr><td align="left"><code>[^xyz]</code></td><td>负值字符集合。匹配未包含的任意字符。例如，”<code>[^abc]</code>“可以匹配”plain”中的”plin”任一字符。</td></tr><tr><td align="left"><code>[a-z]</code></td><td>字符范围。匹配指定范围内的任意字符。例如，”<code>[a-z]</code>“可以匹配”a”到”z”范围内的任意小写字母字符。注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.</td></tr><tr><td align="left"><code>[^a-z]</code></td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，”<code>[^a-z]</code>“可以匹配任何不在”a”到”z”范围内的任意字符。</td></tr><tr><td align="left"><code>\b</code></td><td>匹配一个单词的边界，也就是指单词和空格间的位置（即正则表达式的”匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的<code>\b</code>就是匹配位置的）。例如，”<code>er\b</code>“可以匹配”never”中的”er”，但不能匹配”verb”中的”er”；”<code>\b1_</code>“可以匹配”1_23”中的”1_”，但不能匹配”21_3”中的”1_”。</td></tr><tr><td align="left"><code>\B</code></td><td>匹配非单词边界。”<code>er\B</code>“能匹配”verb”中的”er”，但不能匹配”never”中的”er”。</td></tr><tr><td align="left"><code>\cx</code></td><td>匹配由x指明的控制字符。例如，<code>\cM</code>匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的”c”字符。</td></tr><tr><td align="left"><code>\d</code></td><td>匹配一个数字字符。等价于<code>[0-9]</code>。grep 要加上-P，perl正则支持</td></tr><tr><td align="left"><code>\D</code></td><td>匹配一个非数字字符。等价于<code>[^0-9]</code>。grep要加上-P，perl正则支持</td></tr><tr><td align="left"><code>\f</code></td><td>匹配一个换页符。等价于<code>\x0c</code>和<code>\cL</code>。</td></tr><tr><td align="left"><code>\n</code></td><td>匹配一个换行符。等价于<code>\x0a</code>和<code>\cJ</code>。</td></tr><tr><td align="left"><code>\r</code></td><td>匹配一个回车符。等价于<code>\x0d</code>和<code>\cM</code>。</td></tr><tr><td align="left"><code>\s</code></td><td>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code>。</td></tr><tr><td align="left"><code>\S</code></td><td>匹配任何可见字符。等价于<code>[^ \f\n\r\t\v]</code>。</td></tr><tr><td align="left"><code>\t</code></td><td>匹配一个制表符。等价于<code>\x09</code>和<code>\cI</code>。</td></tr><tr><td align="left"><code>\v</code></td><td>匹配一个垂直制表符。等价于<code>\x0b</code>和<code>\cK</code>。</td></tr><tr><td align="left"><code>\w</code></td><td>匹配包括下划线的任何单词字符。类似但不等价于”<code>[A-Za-z0-9_]</code>“，这里的”单词”字符使用Unicode字符集。</td></tr><tr><td align="left"><code>\W</code></td><td>匹配任何非单词字符。等价于”<code>[^A-Za-z0-9_]</code>“。</td></tr><tr><td align="left"><code>\x*n*</code></td><td>匹配<code>*n*</code>，其中<code>*n*</code>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，”<code>\x41</code>“匹配”<code>A</code>“。”<code>\x041</code>“则等价于”<code>\x04&amp;1</code>“。正则表达式中可以使用ASCII编码。</td></tr><tr><td align="left"><code>\*num*</code></td><td>匹配<code>*num*</code>，其中<code>*num*</code>是一个正整数。对所获取的匹配的引用。例如，”<code>(.)\1</code>“匹配两个连续的相同字符。</td></tr><tr><td align="left"><code>\*n*</code></td><td>标识一个八进制转义值或一个向后引用。如果<code>\*n*</code>之前至少<code>*n*</code>个获取的子表达式，则<code>*n*</code>为向后引用。否则，如果<code>*n*</code>为八进制数字（0-7），则<code>*n*</code>为一个八进制转义值。</td></tr><tr><td align="left"><code>\*nm*</code></td><td>标识一个八进制转义值或一个向后引用。如果<code>\*nm*</code>之前至少有<code>*nm*</code>个获得子表达式，则<code>*nm*</code>为向后引用。如果<code>\*nm*</code>之前至少有<code>*n*</code>个获取，则<code>*n*</code>为一个后跟文字<code>*m*</code>的向后引用。如果前面的条件都不满足，若<code>*n*</code>和<code>*m*</code>均为八进制数字（0-7），则<code>\*nm*</code>将匹配八进制转义值<code>*nm*</code>。</td></tr><tr><td align="left"><code>\*nml*</code></td><td>如果<code>*n*</code>为八进制数字（0-7），且<code>*m*</code>和<code>*l*</code>均为八进制数字（0-7），则匹配八进制转义值<code>*nml*</code>。</td></tr><tr><td align="left"><code>\u*n*</code></td><td>匹配<code>*n*</code>，其中<code>*n*</code>是一个用四个十六进制数字表示的Unicode字符。例如，<code>\u00A9</code>匹配版权符号（<code>&amp;copy;</code>）。</td></tr><tr><td align="left"><code>\p&#123;P&#125;</code></td><td>小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的”P”表示Unicode 字符集七个字符属性之一：标点字符。其他六个属性L：字母；M：标记符号（一般不会单独出现）；Z：分隔符（比如空格、换行等）；S：符号（比如数学符号、货币符号等）；N：数字（比如阿拉伯数字、罗马数字等）；C：其他字符。*注：此语法部分语言不支持，例</td></tr><tr><td align="left"><code>\&lt;\&gt;</code></td><td>匹配词（word）的开始（<code>\&lt;</code>）和结束（<code>\&gt;</code>）。例如正则表达式<code>\&lt;the\&gt;</code>能够匹配字符串”for the wise”中的”the”，但是不能匹配字符串”otherwise”中的”the”。注意：这个元字符不是所有的软件都支持的。</td></tr><tr><td align="left"><code>( )</code></td><td>将<code>(</code> 和 <code>)</code> 之间的表达式定义为”组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 <code>\1</code> 到<code>\9</code> 的符号来引用。</td></tr><tr><td align="left"><code>|</code></td><td>将两个匹配条件进行逻辑”或”（Or）运算。例如正则表达式(<code>him|her</code>) 匹配”it belongs to him”和”it belongs to her”，但是不能匹配”it belongs to them.”。注意：这个元字符不是所有的软件都支持的。</td></tr></tbody></table><h1 id="正则表达式语法支持情况"><a href="#正则表达式语法支持情况" class="headerlink" title="正则表达式语法支持情况"></a>正则表达式语法支持情况</h1><table><thead><tr><th><strong>命令或环境</strong></th><th><strong>.</strong> <strong>[ ]</strong> <strong>^</strong> <strong>$</strong></th><th><strong>( )</strong></th><th><strong>{ }</strong></th><th><strong>?</strong> <strong>+</strong> <strong>|</strong> <strong>( )</strong></th></tr></thead><tbody><tr><td><strong>vi</strong></td><td>√</td><td>√</td><td></td><td></td></tr><tr><td><strong>Visual C++</strong></td><td>√</td><td>√</td><td></td><td></td></tr><tr><td><strong>awk</strong></td><td>√</td><td></td><td>awk是支持该语法的，只是要在命令行加入<code>--posix</code> or <code>--re-interval</code>参数即可，可见man awk中的 r{n,m}</td><td>√</td></tr><tr><td><strong>sed</strong></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td><strong>delphi</strong></td><td>√</td><td>√</td><td></td><td>√</td></tr><tr><td><strong>python</strong></td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>java</strong></td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>javascript</strong></td><td>√</td><td>√</td><td></td><td>√</td></tr><tr><td><strong>php</strong></td><td>√</td><td>√</td><td></td><td></td></tr><tr><td><strong>perl</strong></td><td>√</td><td>√</td><td></td><td>√</td></tr><tr><td><strong>C#</strong></td><td>√</td><td></td><td></td><td>√</td></tr></tbody></table><h1 id="shell正则"><a href="#shell正则" class="headerlink" title="shell正则"></a>shell正则</h1><p>字符匹配、匹配次数、位置锚定、分组  </p><table><thead><tr><th align="left">表达式</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>.</code></td><td align="left">匹配任意单个字符</td></tr><tr><td align="left"><code>[]</code></td><td align="left">匹配指定范围内的任意单个字符</td></tr><tr><td align="left"><code>[^]</code></td><td align="left">匹配指定范围外的任意字符</td></tr><tr><td align="left"><code>[:blank:]</code></td><td align="left">空白字符（空格和制表符）</td></tr><tr><td align="left"><code>[:punct:]</code></td><td align="left">标点符号</td></tr><tr><td align="left"><code>*</code></td><td align="left">匹配前面字符任意次，包括0次和尽可能长的匹配</td></tr><tr><td align="left"><code>.*</code></td><td align="left">任意字符任意次</td></tr><tr><td align="left"><code>\?</code></td><td align="left">匹配前面的字符0或1次</td></tr><tr><td align="left"><code>\+</code></td><td align="left">匹配前面的字符1次以上</td></tr><tr><td align="left"><code>\&#123;n，m\&#125;</code></td><td align="left">匹配前面的字符至少n次至多m次</td></tr><tr><td align="left"><code>\&#123;n\&#125;</code></td><td align="left">匹配前面的字符n次</td></tr><tr><td align="left"><code>\&#123;,n\&#125;</code></td><td align="left">匹配前面的字符至多n次</td></tr><tr><td align="left"><code>\&#123;n,\&#125;</code></td><td align="left">匹配前面的字符至少n次</td></tr><tr><td align="left"><code>^</code></td><td align="left">行首锚定</td></tr><tr><td align="left"><code>$</code></td><td align="left">行尾锚定</td></tr><tr><td align="left"><code>\&lt;</code></td><td align="left">词首锚定</td></tr><tr><td align="left"><code>\&gt;</code></td><td align="left">词尾锚定</td></tr><tr><td align="left"><code>^$</code></td><td align="left">空行</td></tr><tr><td align="left"><code>^[[:space:]]*$</code></td><td align="left">空白行</td></tr></tbody></table><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><table><thead><tr><th align="left">分组</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>\(\)</code></td><td align="left">将一个或多个字符捆绑在一起，当作一个整体进行处理</td></tr><tr><td align="left"><code>\1</code></td><td align="left">后向引用：引用前面的分组括号中的模式所匹配的字符（而非模式本身）</td></tr><tr><td align="left"><code>[[:alnum:]]</code></td><td align="left">文字数字字符</td></tr><tr><td align="left"><code>[[:alpha:]]</code></td><td align="left">文字字符</td></tr><tr><td align="left"><code>[[:digit:]]</code></td><td align="left">数字字符</td></tr><tr><td align="left"><code>[[:graph:]]</code></td><td align="left">非空字符（非空格，非控制字符）</td></tr><tr><td align="left"><code>[[:lower:]]</code></td><td align="left">小写字符</td></tr><tr><td align="left"><code>[[:cntrl:]]</code></td><td align="left">控制字符</td></tr><tr><td align="left"><code>[[:print:]]</code></td><td align="left">非空字符（包括空格）</td></tr><tr><td align="left"><code>[[:punct:]]</code></td><td align="left">标点符号</td></tr><tr><td align="left"><code>[[:space:]]</code></td><td align="left">所有空白字符（新行，空格，制表符）</td></tr><tr><td align="left"><code>[[:upper:]]</code></td><td align="left">大写字符</td></tr><tr><td align="left"><code>[[:xdigit:]]</code></td><td align="left">十六进制数字（0-9，a-f，A-F）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git仓库</title>
      <link href="/posts/3680.html"/>
      <url>/posts/3680.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h1><p>&emsp;&emsp;hexo搭建个人网站，使用OSS+CDN加速。（涉及到域名备案（又涉及到服务器购买）、因为购买了ECS打算利用一下做Git仓库，做web访问）  </p><p>阿里云备案必花钱！备案免费，服务器要钱具体看下图：<br><img src="/medias/drawing-bed/git/0.jpg">  </p><p>买了一个最便宜的服务器102元/年，好像有99元/年的，域名wujiops.cn首年29元/年，续费39元/年  </p><p>备案成本：102+29=131元  </p><p>以后花费：39+OSS+CDN≈100左右，预算超过300元/年，打算用GitHub pages+免费CDN，年费0元。  </p><p>接着介绍git仓库搭建情况，及上线  </p><h1 id="系统情况："><a href="#系统情况：" class="headerlink" title="系统情况："></a>系统情况：</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 系统版本</span><span class="token punctuation">[</span>root@www opt<span class="token punctuation">]</span><span class="token comment"># cat /etc/redhat-release </span>CentOS Linux release <span class="token number">8.1</span>.1911 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span> <span class="token comment"># yum源</span><span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cat CentOS-Base.repo </span><span class="token comment"># ...注释省略</span><span class="token punctuation">[</span>BaseOS<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Base<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.cloud.aliyuncs.com/<span class="token variable">$contentdir</span>/<span class="token variable">$releasever</span>/BaseOS/<span class="token variable">$basearch</span>/os/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial<span class="token comment"># epel源</span><span class="token punctuation">[</span>root@www yum.repos.d<span class="token punctuation">]</span><span class="token comment"># cat CentOS-epel.repo </span><span class="token punctuation">[</span>epel<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">8</span> - <span class="token variable">$basearch</span><span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.cloud.aliyuncs.com/epel/8/Everything/<span class="token variable">$basearch</span><span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 均为yum安装</span><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># yum -y install httpd vim git</span><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable httpd</span><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># systemctl start httpd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git仓库"><a href="#git仓库" class="headerlink" title="git仓库"></a>git仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span><span class="token punctuation">[</span>root@www opt<span class="token punctuation">]</span><span class="token comment"># git init --bare wujiops.git</span><span class="token punctuation">[</span>root@www opt<span class="token punctuation">]</span><span class="token comment"># ls</span>wujiops.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"1"</span><span class="token comment">#    git config --global --edit</span><span class="token comment">#    git config --global user.name "Your Name"</span><span class="token comment">#    git config --global user.email you@example.com</span><span class="token function">git</span> config --global --edit   <span class="token comment"># 执行，设置全局配置</span><span class="token comment"># 或者执行下面两个命令</span><span class="token comment"># git config --global user.name "Your Name"   # 提交者姓名</span><span class="token comment"># git config --global user.email you@example.com   # 提交者邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地仓库连接远程仓库"><a href="#本地仓库连接远程仓库" class="headerlink" title="本地仓库连接远程仓库"></a>本地仓库连接远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://xxx.git   <span class="token comment"># ssh://xxx.git，有些仓库没有.git后缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h2><p><img src="/medias/drawing-bed/git/1.jpg"><br>&emsp;&emsp;指明ECS服务器IP地址和端口  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-copy-id root@*.*.*.*: -p ***<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="本地上传"><a href="#本地上传" class="headerlink" title="本地上传"></a>本地上传</h1><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">repository</span><span class="token punctuation">:</span> ssh<span class="token punctuation">:</span>//root@<span class="token important">*.*.*.*:***/opt/wujiops.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="服务器获取"><a href="#服务器获取" class="headerlink" title="服务器获取"></a>服务器获取</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@www www<span class="token punctuation">]</span><span class="token comment"># rm -fr html</span><span class="token punctuation">[</span>root@www www<span class="token punctuation">]</span><span class="token comment"># git clone ssh://root@localhost:xxx/opt/wujiops.git html</span><span class="token punctuation">[</span>root@www www<span class="token punctuation">]</span><span class="token comment"># cd html/</span><span class="token punctuation">[</span>root@www html<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token number">404</span>.html  archives  categories  err          friends  index.html  lanmp  medias  other   page    search.xml  wu-ji-opsabout     atom.xml  css         favicon.png  hadoop   js          libs   notes   others  python  tags<span class="token punctuation">[</span>root@www html<span class="token punctuation">]</span><span class="token comment"># git pull</span>Already up to date.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> git </tag>
            
            <tag> 私有仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kylin搭建报错</title>
      <link href="/posts/abbb.html"/>
      <url>/posts/abbb.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>修改hdfs用户为root,hive对root授权<br>启动apache-kylin报错:<br><code>&lt;font color=red&gt; Caused by: java.lang.ClassNotFoundException: org.apache.commons.configuration.ConfigurationException&lt;/font&gt;</code><br>解决:将commons-configuration-1.6.jar复制到kylin/lib/目录下面即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@client2 logs<span class="token punctuation">]</span><span class="token comment"># find / -name commons-configuration-*.jar</span>/var/lib/ambari-agent/cred/lib/commons-configuration-1.6.jar/usr/hdp/3.1.0.0-78/ranger-hdfs-plugin/install/lib/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/ranger-yarn-plugin/install/lib/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/hbase/lib/atlas-hbase-plugin-impl/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/ranger-hbase-plugin/install/lib/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/atlas/hook/hbase/atlas-hbase-plugin-impl/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/atlas/hook/hive/atlas-hive-plugin-impl/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/ranger-atlas-plugin/install/lib/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/kafka/libs/ranger-kafka-plugin-impl/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/ranger-kafka-plugin/install/lib/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/ranger-kafka-plugin/lib/ranger-kafka-plugin-impl/commons-configuration-1.10.jar/usr/hdp/3.1.0.0-78/ranger-hive-plugin/install/lib/commons-configuration-1.10.jar<span class="token comment">#/usr/hdp/3.1.0.0-78/kylin/lib/commons-configuration-1.6.jar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搭建步骤:<br>下载apache-kylin-3.0.1-bin-hadoop3.tar.gz<br>配置环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /etc/profile</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">KYLIN_HOME</span><span class="token operator">=</span>/usr/hdp/3.1.0.0-78/kylin<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span>https://npm.taobao.org/mirrors/node<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_IOJS_ORG_MIRROR</span><span class="token operator">=</span>https://npm.taobao.org/mirrors/iojs<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/usr/hdp/3.1.0.0-78/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable">SPARK_HOME</span><span class="token operator">=</span>/usr/hdp/3.1.0.0-78/spark2<span class="token builtin class-name">export</span> <span class="token assign-left variable">KYLIN_CONF</span><span class="token operator">=</span>/usr/hdp/3.1.0.0-78/kylin/conf<span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/usr/hdp/3.1.0.0-78/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$MAVEN_HOME</span>/bin:<span class="token variable">$KYLIN_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 kylin.sh start 即可</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kylin </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机启动失败</title>
      <link href="/posts/7bd9.html"/>
      <url>/posts/7bd9.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>&emsp;&emsp;在启用了Hyper-V的Windows 10主机上启动VMware Workstation中的虚拟机。会看到类似于以下内容的错误：<br>&emsp;&emsp;VMware Workstation和Device / Credential Guard不兼容。禁用Device / Credential Guard后，可以运行VMware Workstation。<br>原因：<br>&emsp;&emsp;1、出现此问题的原因是Device Guard或Credential Guard与Workstation不兼容。<br>&emsp;&emsp;2、Windows系统的Hyper-V不兼容导致。<br><strong>解决方法：</strong><br>有热心网友反馈：1909版本的win用不了很有可能是沙盒没关，把沙盒功能关了重启一下就好 （我没试过！）<br>步骤一：禁用Device Guard或Credential Guard：<br>&emsp;&emsp;禁用用于启用Credential Guard的组策略设置。<br>&emsp;&emsp;在主机操作系统上，右键单击”<strong>开始</strong>“&gt; “<strong>运行</strong>“，键入gpedit.msc，然后单击”<strong>确定</strong>“。本地组策略编辑器打开。<br>&emsp;&emsp;转至<strong>本地计算机策略</strong> &gt; <strong>计算机配置</strong> &gt; <strong>管理模板</strong>&gt;<strong>系统</strong> &gt;<strong>Device Guard</strong>（或者是： <strong>设备防护</strong>） &gt; <strong>启用基于虚拟化的安全性</strong>。<br>选择<strong>已禁用</strong>。<br>&emsp;&emsp;转到”<strong>控制面板</strong>“&gt;”<strong>卸载程序</strong>“&gt;”<strong>打开或关闭Windows功能</strong>“以关闭Hyper-V。<br>选择<strong>不重启</strong>。<br>步骤二：通过命令关闭Hyper-V（控制面板关闭Hyper-V起不到决定性作用，要彻底关闭Hyper-V） <br>&emsp;&emsp;<strong>以管理员身份运行Windows Powershell (管理员)（Windows键+X）</strong><br>&emsp;&emsp;运行下面命令并重启电脑：  </p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">bcdedit &#x2F;set hypervisorlaunchtype off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~ </p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
            <tag> VMware </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序连接mongodb超时</title>
      <link href="/posts/cf89.html"/>
      <url>/posts/cf89.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>主要是介绍运维经验  </p><p>因为运维的时候不知道是谁搭建的环境，更不知到安装的软件方式是什么样的。  </p><p>故记录此次排错过程。   </p><p>获取到程序的日志信息大致如下：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-05-06 <span class="token number">10</span>:14:16.470  INFO <span class="token number">16447</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> org.mongodb.driver.cluster               <span class="token builtin class-name">:</span> Cluster created with settings <span class="token punctuation">&#123;</span>hosts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">192.168</span>.1.113:8081<span class="token punctuation">]</span>, <span class="token assign-left variable">mode</span><span class="token operator">=</span>SINGLE, <span class="token assign-left variable">requiredClusterType</span><span class="token operator">=</span>UNKNOWN, <span class="token assign-left variable">serverSelectionTimeout</span><span class="token operator">=</span><span class="token string">'30000 ms'</span>, <span class="token assign-left variable">maxWaitQueueSize</span><span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token number">2020</span>-05-06 <span class="token number">10</span>:14:16.565  INFO <span class="token number">16447</span> --- <span class="token punctuation">[</span>.168.1.113:8081<span class="token punctuation">]</span> org.mongodb.driver.cluster               <span class="token builtin class-name">:</span> Exception <span class="token keyword">in</span> monitor thread <span class="token keyword">while</span> connecting to server <span class="token number">192.168</span>.1.113:8081com.mongodb.MongoSocketOpenException: Exception opening socketat com.mongodb.internal.connection.SocketStream.open<span class="token punctuation">(</span>SocketStream.java:67<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mongodb-driver-core-3.8.2.jar<span class="token operator">!</span>/:na<span class="token punctuation">]</span>at com.mongodb.internal.connection.InternalStreamConnection.open<span class="token punctuation">(</span>InternalStreamConnection.java:126<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mongodb-driver-core-3.8.2.jar<span class="token operator">!</span>/:na<span class="token punctuation">]</span>at com.mongodb.internal.connection.DefaultServerMonitor<span class="token variable">$ServerMonitorRunnable</span>.run<span class="token punctuation">(</span>DefaultServerMonitor.java:117<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mongodb-driver-core-3.8.2.jar<span class="token operator">!</span>/:na<span class="token punctuation">]</span>at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span> <span class="token punctuation">[</span>na:1.8.0_151<span class="token punctuation">]</span>Caused by: java.net.ConnectException: 拒绝连接 <span class="token punctuation">(</span>Connection refused<span class="token punctuation">)</span>at java.net.PlainSocketImpl.socketConnect<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_151<span class="token punctuation">]</span>at java.net.AbstractPlainSocketImpl.doConnect<span class="token punctuation">(</span>AbstractPlainSocketImpl.java:350<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_151<span class="token punctuation">]</span>at java.net.AbstractPlainSocketImpl.connectToAddress<span class="token punctuation">(</span>AbstractPlainSocketImpl.java:206<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_151<span class="token punctuation">]</span>at java.net.AbstractPlainSocketImpl.connect<span class="token punctuation">(</span>AbstractPlainSocketImpl.java:188<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_151<span class="token punctuation">]</span>at java.net.SocksSocketImpl.connect<span class="token punctuation">(</span>SocksSocketImpl.java:392<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_151<span class="token punctuation">]</span>at java.net.Socket.connect<span class="token punctuation">(</span>Socket.java:589<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_151<span class="token punctuation">]</span>at com.mongodb.internal.connection.SocketStreamHelper.initialize<span class="token punctuation">(</span>SocketStreamHelper.java:64<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mongodb-driver-core-3.8.2.jar<span class="token operator">!</span>/:na<span class="token punctuation">]</span>at com.mongodb.internal.connection.SocketStream.open<span class="token punctuation">(</span>SocketStream.java:62<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mongodb-driver-core-3.8.2.jar<span class="token operator">!</span>/:na<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token number">3</span> common frames omitted<span class="token number">2020</span>-05-06 <span class="token number">10</span>:14:17.216  INFO <span class="token number">16447</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> org.mongodb.driver.cluster               <span class="token builtin class-name">:</span> Cluster description not yet available. Waiting <span class="token keyword">for</span> <span class="token number">30000</span> ms before timing out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面日志中提取关键词 “timeout=30000”  “192.168.1.113:8081”  “拒绝连接”  “mongodb-driver-core-3.8.2.jar!”  </p><p>初步怀疑mongodb挂掉，IP端口为192.168.1.113:8081  </p><p>登录主机，查询历史命令发现是docker pull的mongo的镜像  </p><p>docker运行镜像  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart dockerdocker imagesdocker run --name mongo -p <span class="token number">27017</span>:27017 -d mongo --auth   <span class="token comment"># 补全</span>docker <span class="token function">ps</span> -adocker start 64ca<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>端口不对，处理端口问题  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/lib/docker/containers/64ca58ae81<span class="token punctuation">..</span>.ddfc992ac212/   <span class="token comment"># 镜像ID</span><span class="token function">vim</span> hostconfig.json<span class="token punctuation">..</span>.<span class="token string">"PortBindings"</span>:<span class="token punctuation">&#123;</span><span class="token string">"27017/tcp"</span>:<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"HostIp    "</span><span class="token builtin class-name">:</span><span class="token string">""</span>,<span class="token string">"HostPort"</span><span class="token builtin class-name">:</span><span class="token string">"8081"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token string">"HostPort"</span><span class="token builtin class-name">:</span><span class="token string">"8081"</span>这里是宿主机端口<span class="token string">"27017/tcp"</span>这里是容器端口<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改完重启docker和容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart dockerdocker stop <span class="token number">64</span>docker start <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主机再次启动程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-05-06 <span class="token number">10</span>:23:19.244  INFO <span class="token number">18145</span> --- <span class="token punctuation">[</span>.168.1.113:8081<span class="token punctuation">]</span> org.mongodb.driver.cluster               <span class="token builtin class-name">:</span> Monitor thread successfully connected to server with description ServerDescription<span class="token punctuation">&#123;</span>address<span class="token operator">=</span><span class="token number">192.168</span>.1.113:8081, <span class="token assign-left variable">type</span><span class="token operator">=</span>STANDALONE, <span class="token assign-left variable">state</span><span class="token operator">=</span>CONNECTED, <span class="token assign-left variable">ok</span><span class="token operator">=</span>true, <span class="token assign-left variable">version</span><span class="token operator">=</span>ServerVersion<span class="token punctuation">&#123;</span>versionList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">2</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">minWireVersion</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">maxWireVersion</span><span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">maxDocumentSize</span><span class="token operator">=</span><span class="token number">16777216</span>, <span class="token assign-left variable">logicalSessionTimeoutMinutes</span><span class="token operator">=</span><span class="token number">30</span>, <span class="token assign-left variable">roundTripTimeNanos</span><span class="token operator">=</span><span class="token number">5891523</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示mongodb连接上了,程序也正常运行😘  </p><p>事后  </p><p>五一放假公司测试服务器关机，上班后恢复，启动程序发现一个程序一直启动失败，调查原因才有的上文所述。  </p><p><strong>补充：</strong>  </p><p>如果容器内端口从没有暴露，需要在修改config.v2.json  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> config.v2.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 config.v2.json 里面添加一个配置项  </p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"ExposedPorts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"27017/tcp"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将这个配置项添加到 “Tty” 前面即可  </p><p>最后重启docker和容器，使用docker ps验证端口映射  </p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 报错 </tag>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos 注册中心</title>
      <link href="/posts/ac94.html"/>
      <url>/posts/ac94.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h1><p>&emsp;&emsp;下载地址：<a href="https://github.com/alibaba/nacos/releases" title="download new">nacos</a></p><h2 id="解压运行"><a href="#解压运行" class="headerlink" title="解压运行"></a>解压运行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> nacos-server-*.zip 或者 <span class="token function">tar</span> -xvf nacos-server-*.tar.gz<span class="token builtin class-name">cd</span> nacos<span class="token function">bash</span> bin/startup.sh -m standalone   <span class="token comment"># 单机运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">[root@client</span> <span class="token attr-value">conf]# vi conf/application.properties</span><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.1.91:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">nacos</span><span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">pass@nacos</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> nacos </tag>
            
            <tag> 注册中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phoenix应用</title>
      <link href="/posts/64e5.html"/>
      <url>/posts/64e5.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="Phoenix简介"><a href="#Phoenix简介" class="headerlink" title="Phoenix简介"></a>Phoenix简介</h1><p>Phoenix作为应用层和HBASE之间的中间件,以下特性使它在大数据量的简单查询场景有着独有的优势</p><ul><li>二级索引支持(global index + local index)</li><li>编译SQL成为原生HBASE的可并行执行的scan</li><li>在数据层完成计算，server端的coprocessor执行聚合</li><li>下推where过滤条件到server端的scan filter上</li><li>利用统计信息优化、选择查询计划（5.x版本将支持CBO）</li><li>skip scan功能提高扫描速度</li></ul><p>一般可以使用以下三种方式访问Phoenix</p><ol><li><p>JDBC API</p></li><li><p>使用Python编写的命令行工具（sqlline, sqlline-thin和psql等）</p></li><li><p>SQuirrel</p></li></ol><h1 id="一、命令行工具psql使用示例"><a href="#一、命令行工具psql使用示例" class="headerlink" title="一、命令行工具psql使用示例"></a>一、命令行工具psql使用示例</h1><h2 id="1-创建一个建表的sql脚本文件us-population-sql："><a href="#1-创建一个建表的sql脚本文件us-population-sql：" class="headerlink" title="1.创建一个建表的sql脚本文件us_population.sql："></a>1.创建一个建表的sql脚本文件us_population.sql：</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> us_population <span class="token punctuation">(</span>    state <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    city <span class="token keyword">VARCHAR</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    population <span class="token keyword">BIGINT</span>    <span class="token keyword">CONSTRAINT</span> my_pk <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建csv格式的数据文件us-population-csv："><a href="#2-创建csv格式的数据文件us-population-csv：" class="headerlink" title="2. 创建csv格式的数据文件us_population.csv："></a>2. 创建csv格式的数据文件us_population.csv：</h2><pre class="line-numbers language-csv" data-language="csv"><code class="language-csv"><span class="token value">NY</span><span class="token punctuation">,</span><span class="token value">New York</span><span class="token punctuation">,</span><span class="token value">8143197</span><span class="token value">CA</span><span class="token punctuation">,</span><span class="token value">Los Angeles</span><span class="token punctuation">,</span><span class="token value">3844829</span><span class="token value">IL</span><span class="token punctuation">,</span><span class="token value">Chicago</span><span class="token punctuation">,</span><span class="token value">2842518</span><span class="token value">TX</span><span class="token punctuation">,</span><span class="token value">Houston</span><span class="token punctuation">,</span><span class="token value">2016582</span><span class="token value">PA</span><span class="token punctuation">,</span><span class="token value">Philadelphia</span><span class="token punctuation">,</span><span class="token value">1463281</span><span class="token value">AZ</span><span class="token punctuation">,</span><span class="token value">Phoenix</span><span class="token punctuation">,</span><span class="token value">1461575</span><span class="token value">TX</span><span class="token punctuation">,</span><span class="token value">San Antonio</span><span class="token punctuation">,</span><span class="token value">1256509</span><span class="token value">CA</span><span class="token punctuation">,</span><span class="token value">San Diego</span><span class="token punctuation">,</span><span class="token value">1255540</span><span class="token value">TX</span><span class="token punctuation">,</span><span class="token value">Dallas</span><span class="token punctuation">,</span><span class="token value">1213825</span><span class="token value">CA</span><span class="token punctuation">,</span><span class="token value">San Jose</span><span class="token punctuation">,</span><span class="token value">912332</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-创建一个查询sql脚本文件us-population-queries-sql"><a href="#3-创建一个查询sql脚本文件us-population-queries-sql" class="headerlink" title="3. 创建一个查询sql脚本文件us_population_queries.sql"></a>3. 创建一个查询sql脚本文件us_population_queries.sql</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> state <span class="token keyword">as</span> <span class="token string">"State"</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"City Count"</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"Population Sum"</span><span class="token keyword">FROM</span> us_population<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> state<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">sum</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-执行psql-py工具运行sql脚本"><a href="#4-执行psql-py工具运行sql脚本" class="headerlink" title="4. 执行psql.py工具运行sql脚本"></a>4. 执行psql.py工具运行sql脚本</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">.</span><span class="token operator">/</span>psql<span class="token punctuation">.</span>py <span class="token operator">&lt;</span>your_zookeeper_quorum<span class="token operator">></span> us_population<span class="token punctuation">.</span><span class="token keyword">sql</span> us_population<span class="token punctuation">.</span>csv us_population_queries<span class="token punctuation">.</span><span class="token keyword">sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二、JDBC-API使用示例"><a href="#二、JDBC-API使用示例" class="headerlink" title="二、JDBC API使用示例"></a>二、JDBC API使用示例</h1><h2 id="1-使用Maven构建工程时，需要添加以下依赖"><a href="#1-使用Maven构建工程时，需要添加以下依赖" class="headerlink" title="1. 使用Maven构建工程时，需要添加以下依赖"></a>1. 使用Maven构建工程时，需要添加以下依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.phoenix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ali-phoenix-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建名为test-java的文件"><a href="#2-创建名为test-java的文件" class="headerlink" title="2. 创建名为test.java的文件"></a>2. 创建名为test.java的文件</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rset <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:phoenix:[zookeeper]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"create table test (mykey integer not null primary key, mycolumn varchar)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"upsert into test values (1,'Hello')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"upsert into test values (2,'World!')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">PreparedStatement</span> statement <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select * from test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rset <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rset<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rset<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"mycolumn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-执行test-java"><a href="#3-执行test-java" class="headerlink" title="3.执行test.java"></a>3.执行test.java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">javac test<span class="token punctuation">.</span>javajava <span class="token operator">-</span>cp <span class="token string">"../phoenix-[version]-client.jar:."</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="什么是SQuirrel？"><a href="#什么是SQuirrel？" class="headerlink" title="什么是SQuirrel？"></a>什么是SQuirrel？</h1><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.squirrelsql.org/">SQuirreL SQL Client</a>是一个开源免费软件, 可以通过jdbc对多种数据库进行可视化的管理，查询等。</p><h1 id="安装SQuirrel访问Phoenix"><a href="#安装SQuirrel访问Phoenix" class="headerlink" title="安装SQuirrel访问Phoenix"></a>安装SQuirrel访问Phoenix</h1><ol><li>下载最新的<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.squirrelsql.org/%23installation">SQuirrel</a></li><li>安装SQuirrel<br><img src="/medias/drawing-bed/phoenix/0.jpg"></li><li>在云Hbase官网下载最新版的<a href="https://help.aliyun.com/document_detail/53600.html?spm=5176.product49055.6.553.ZkkmG9">phoneix</a>, 解压后将phoenix-4.11.0-AliHBase–client.jar拷贝到SQuirrel根目录的lib文件夹下。</li><li>启动SQuirrel， 可以通过Windows-&gt;View SQuirrel Logs查询运行日志。<br><img src="/medias/drawing-bed/phoenix/1.jpg"></li></ol><h1 id="配置SQuirrel链接Phoenix"><a href="#配置SQuirrel链接Phoenix" class="headerlink" title="配置SQuirrel链接Phoenix"></a>配置SQuirrel链接Phoenix</h1><ol><li>设置Phoenix JDBC DRIVE。点击Drivers进行设置，Name项根据自己需要填写，Website URL可以省略，其余根据实际情况填写。然后点击OK确认。<br><img src="/medias/drawing-bed/phoenix/2.jpg"></li><li>配置Phoenix链接。点击Aliases, 配置链接。Name项根据自己需要填写，Username和Password是访问数据库的账户名和密码（此示例中链接hbase不需要用户和密码，所以这两项为空）。<br><img src="/medias/drawing-bed/phoenix/3.jpg"></li><li>链接Phoenix<br><img src="/medias/drawing-bed/phoenix/4.jpg"></li></ol><h1 id="在SQuirrel中如何配置Phoenix参数"><a href="#在SQuirrel中如何配置Phoenix参数" class="headerlink" title="在SQuirrel中如何配置Phoenix参数"></a>在SQuirrel中如何配置Phoenix参数</h1><p>Phoenix客户端参数可以通过hbase-site.xm文件进行配置，我们只需要将需要配置项填在此文件中，并放置在SQuirrel启动的classpath中就能生效。</p><p>以配置phoenix.force.index为例：</p><ol><li>在未对phoenix.force.index进行设置时，默认值为true。那么在查询中查询非索引列时会报错。<br><img src="/medias/drawing-bed/phoenix/5.jpg"></li><li>在hbase-site.xml中添加如下配置，并在SQuirrel根目录的lib文件夹中创建conf文件夹， 将hbase-site.xml移动至conf文件夹下，重启SQuirrel.</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>phoenix.force.index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/phoenix/6.jpg"></p><p>PS：连接如果报错：<code>ClusterId read in ZooKeeper is null。</code></p><p>请检查hbase-site.xml配置的zookeeper.znode.parent属性值。</p><p>如果配置的是：/hbase-unsecure，那么url地址要带上</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">zk node: jdbc:phoenix:xxxxx:2181:&#x2F;hbase-unsecure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> phoenix </tag>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqoop应用</title>
      <link href="/posts/a114.html"/>
      <url>/posts/a114.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="一、sqoop概念"><a href="#一、sqoop概念" class="headerlink" title="一、sqoop概念"></a>一、sqoop概念</h1><h2 id="1-官网"><a href="#1-官网" class="headerlink" title="1. 官网:"></a>1. 官网:</h2><p><a href="http://sqoop.apache.org/">http://sqoop.apache.org/</a></p><h2 id="2-描述"><a href="#2-描述" class="headerlink" title="2. 描述:"></a>2. 描述:</h2><p>&emsp;&emsp;Sqoop是一个用来将关系型数据库和Hadoop中的数据进行相互转移的工具，可以将一个关系型数据库(例如Mysql、Oracle)中的数据导入到Hadoop(例如HDFS、Hive、Hbase)中，也可以将Hadoop(例如HDFS、Hive、Hbase)中的数据导入到关系型数据库(例如Mysql、Oracle)中。如下图所示：<br><img src="/medias/drawing-bed/sqoop/0.jpg"></p><h2 id="3-场景"><a href="#3-场景" class="headerlink" title="3. 场景:"></a>3. 场景:</h2><h3 id="1-数据迁移"><a href="#1-数据迁移" class="headerlink" title="(1)数据迁移"></a>(1)数据迁移</h3><p>&emsp;&emsp;企业大数据平台关系型数据仓库中的数据以分析为主，综合考虑扩展性、容错性和成本开销等方面。若将数据迁移到Hadoop大数据平台上，可以方便地使用Hadoop提供的如Hive、SparkSQL分布式系统等工具进行数据分析。为了一次性将数据导入Hadoop存储系统，可使用Sqoop。</p><h3 id="2-可视化分析结果"><a href="#2-可视化分析结果" class="headerlink" title="(2)可视化分析结果"></a>(2)可视化分析结果</h3><p>&emsp;&emsp;Hadoop处理的输入数据规模可能是非常庞大的，比如PB级别，但最终产生的分析结果可能不会太大，比如报表数据等，而这类结果通常需要进行可视化，以便更直观地展示分析结果。目前绝大部分可视化工具与关系型数据库对接得比较好，因此，比较主流的做法是，将Hadoop产生的结果导入关系型数据库进行可视化展示。</p><h3 id="3-数据增量导入"><a href="#3-数据增量导入" class="headerlink" title="(3)数据增量导入"></a>(3)数据增量导入</h3><p>&emsp;&emsp;考虑到Hadoop对事务的支持比较差，因此，凡是涉及事务的应用，比如支付平台等，后端的存储均会选择关系数据库，而事务相关的分析数据，比如用户支付行为等，可能在Hadoop分析过程中用到（比如广告系统，推荐系统等）。为了减少Hadoop分析过程中影响这类系统的性能，我们通常不会直接让Hadoop访问这些关系型数据库，而是单独导入一份到Hadoop存储系统中。</p><h1 id="二、架构"><a href="#二、架构" class="headerlink" title="二、架构"></a>二、架构</h1><h2 id="1-hadoop业务开发流程"><a href="#1-hadoop业务开发流程" class="headerlink" title="1. hadoop业务开发流程:"></a>1. hadoop业务开发流程:</h2><p>&emsp;&emsp;在实际的业务当中，我们首先对原始数据集通过MapReduce进行数据清洗，然后将清洗后的数据存入到Hbase数据库中，而后通过数据仓库Hive对Hbase中的数据进行统计与分析，分析之后将分析结果存入到Hive表中，然后通过Sqoop这个工具将我们的数据挖掘结果导入到MySql数据库中，最后通过Web将结果展示。如下图所示:</p><p><img src="/medias/drawing-bed/sqoop/1.jpg"></p><h2 id="2-Sqoop架构"><a href="#2-Sqoop架构" class="headerlink" title="2. Sqoop架构:"></a>2. Sqoop架构:</h2><p>&emsp;&emsp;Sqoop工具接收到客户端的shell命令或者Java api命令后，通过Sqoop中的任务翻译器(Task Translator)将命令转换为对应的MapReduce任务，而后将关系型数据库和Hadoop中的数据进行相互转移，进而完成数据的拷贝。如下图所示:</p><p><img src="/medias/drawing-bed/sqoop/2.jpg"></p><h1 id="三、应用"><a href="#三、应用" class="headerlink" title="三、应用"></a>三、应用</h1><h2 id="1-Sqoop导入-import"><a href="#1-Sqoop导入-import" class="headerlink" title="1. Sqoop导入(import):"></a>1. Sqoop导入(import):</h2><h3 id="1-示例场景"><a href="#1-示例场景" class="headerlink" title="(1) 示例场景:"></a>(1) 示例场景:</h3><p>将mysql数据库中的bigDataCity表通过Sqoop导入到hive数据库中。</p><h3 id="2-命令"><a href="#2-命令" class="headerlink" title="(2) 命令:"></a>(2) 命令:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqoop <span class="token function">import</span> <span class="token comment"># 指定JDBC的URL 其中iitData指的是(Mysql或者Oracle)中的数据库名 </span>--connect jdbc:mysql://192.168.1.110:3306/iitData <span class="token comment"># 指的是Mysql数据库中的用户名</span>--username iituser <span class="token comment"># 指的是Mysql数据库中的用户名密码</span>--password iit123 <span class="token comment"># 指的是要读取数据库iitData中的表名</span>--table bigDataCity <span class="token comment"># 导入表中的部分字段，后面跟指定的列名</span>--columns <span class="token string">"ciryID,cityName,provincialID"</span><span class="token comment"># 指的是hive数据库导入</span>--hive-import <span class="token comment"># 指的是hive数据库创建表</span>--create-hive-table <span class="token comment"># 设定导入数据后每个字段的分隔符</span>--fields-terminated-by <span class="token string">"<span class="token entity" title="\t">\t</span>"</span><span class="token comment"># 并发的map数量</span>-m <span class="token number">1</span><span class="token comment"># 指的是HDFS中导入表的存放目录(注意：是目录)</span>--target-dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-导入"><a href="#3-导入" class="headerlink" title="(3) 导入:"></a>(3) 导入:</h3><p><img src="/medias/drawing-bed/sqoop/3.jpg"><br><img src="/medias/drawing-bed/sqoop/4.jpg"></p><h2 id="2-Sqoop导出-export"><a href="#2-Sqoop导出-export" class="headerlink" title="2. Sqoop导出(export):"></a>2. Sqoop导出(export):</h2><h3 id="1-示例场景-1"><a href="#1-示例场景-1" class="headerlink" title="(1)示例场景:"></a>(1)示例场景:</h3><p>将hive数据库中的test表通过Sqoop导出到mysql数据库中。</p><p>注：从Hadoop向数据库中导入数据时，数据库中相应的表事先必须创建好。 </p><h3 id="2-命令-1"><a href="#2-命令-1" class="headerlink" title="(2)命令:"></a>(2)命令:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqoop <span class="token builtin class-name">export</span> <span class="token comment"># 指定JDBC的URL 其中iitData指的是(Mysql或者Oracle)中的数据库名</span>--connect jdbc:mysql://192.168.1.42/mytable<span class="token comment"># 指的是Mysql数据库中的用户名和密码</span>--username root <span class="token comment"># 指的是Mysql数据库中的用户名密码</span>--password root <span class="token comment"># 指的是要读取数据库iitData中的表名</span>--table <span class="token builtin class-name">test</span><span class="token comment"># 设定导入数据后每个字段的分隔符 </span>--fields-terminated-by <span class="token string">"<span class="token entity" title="\t">\t</span>"</span> <span class="token comment"># 指的是HDFS中即将被导出的文件目录(注意：是目录)</span>--export-dir /warehouse/tablespace/managed/hive/test/base_0000002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-导出"><a href="#3-导出" class="headerlink" title="(3)导出:"></a>(3)导出:</h3><p><img src="/medias/drawing-bed/sqoop/5.jpg"><br><img src="/medias/drawing-bed/sqoop/6.jpg"><br><img src="/medias/drawing-bed/sqoop/7.jpg"><br><img src="/medias/drawing-bed/sqoop/8.jpg"></p><h2 id="3-批量导入"><a href="#3-批量导入" class="headerlink" title="3. 批量导入:"></a>3. 批量导入:</h2><h3 id="1-示例场景-2"><a href="#1-示例场景-2" class="headerlink" title="(1) 示例场景:"></a>(1) 示例场景:</h3><p>将mysql数据库中的test表数据通过Sqoop批量导入到hive数据库中的test表。</p><h3 id="2-命令-2"><a href="#2-命令-2" class="headerlink" title="(2) 命令:"></a>(2) 命令:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqoop <span class="token function">import</span> <span class="token comment"># 导入的字段为空时，用指定的字符进行替换 </span>--null-string <span class="token string">' '</span><span class="token comment"># 增量导入 </span>--incremental append<span class="token comment"># 指定增量导入时的参考列 </span>--check-column <span class="token function">id</span><span class="token comment"># 上一次导入的最后一个值 </span>--last-value <span class="token number">1205</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-导入-1"><a href="#3-导入-1" class="headerlink" title="(3) 导入:"></a>(3) 导入:</h3><p><img src="/medias/drawing-bed/sqoop/9.jpg"><br><img src="/medias/drawing-bed/sqoop/10.jpg"><br><img src="/medias/drawing-bed/sqoop/11.jpg"><br><img src="/medias/drawing-bed/sqoop/12.jpg"></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mysql </tag>
            
            <tag> hbase </tag>
            
            <tag> hdfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx跨域报错</title>
      <link href="/posts/9aea.html"/>
      <url>/posts/9aea.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    server_name <span class="token number">192.168</span>.1.202<span class="token punctuation">;</span>    location /api <span class="token punctuation">&#123;</span>        proxy_pass http://192.168.1.108:8090<span class="token punctuation">;</span>        <span class="token comment"># 指定允许跨域的方法，*代表所有</span>        add_header Access-Control-Allow-Methods *<span class="token punctuation">;</span>        <span class="token comment"># 预检命令的缓存，如果不缓存每次会发送两次请求</span>        add_header Access-Control-Max-Age <span class="token number">3600</span><span class="token punctuation">;</span>        <span class="token comment"># 带cookie请求需要加上这个字段，并设置为true</span>        add_header Access-Control-Allow-Credentials <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment"># 表示允许这个域跨域调用（客户端发送请求的域名和端口） </span>        <span class="token comment"># $http_origin动态获取请求客户端请求的域，不用*的原因是带cookie的请求不支持*号</span>        add_header Access-Control-Allow-Origin <span class="token variable">$http_origin</span><span class="token punctuation">;</span>        <span class="token comment"># 表示请求头的字段 动态获取</span>        add_header Access-Control-Allow-Headers        <span class="token variable">$http_access_control_request_headers</span><span class="token punctuation">;</span>        <span class="token comment"># OPTIONS预检命令，预检命令通过时才发送请求</span>        <span class="token comment"># 检查请求的类型是不是预检命令</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_method</span> <span class="token operator">=</span> OPTIONS<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token builtin class-name">return</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置SSL &amp; 资源目录</title>
      <link href="/posts/638e.html"/>
      <url>/posts/638e.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>实现不同域名,访问不同资源目录  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    listen      <span class="token number">443</span> ssl<span class="token punctuation">;</span>    server_name www.linose.com<span class="token punctuation">;</span><span class="token comment">#    return       443;</span><span class="token comment">#    listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span><span class="token comment">#    server_name localhost;  #将localhost修改为您证书绑定的域名，例如：www.example.com。</span>    root html<span class="token punctuation">;</span>    index index.html index.htm<span class="token punctuation">;</span>    ssl_certificate /etc/pki/tls/certs/3769624_www.linose.com.pem<span class="token punctuation">;</span>   <span class="token comment">#将domain name.pem替换成您证书的文件名。</span>    ssl_certificate_key /etc/pki/tls/certs/3769624_www.linose.com.key<span class="token punctuation">;</span>   <span class="token comment">#将domain name.key替换成您证书的密钥文件名。</span>    ssl_session_timeout 5m<span class="token punctuation">;</span>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:<span class="token operator">!</span>NULL:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>ADH:<span class="token operator">!</span>RC4<span class="token punctuation">;</span>  <span class="token comment">#使用此加密套件。</span>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span>   <span class="token comment">#使用该协议进行配置。</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    location / <span class="token punctuation">&#123;</span>        root /usr/share/nginx/html/linoseCom<span class="token punctuation">;</span>   <span class="token comment">#站点目录。</span>        index index.html index.htm<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server {<br> listen 80;<br> server_name localhost;   #将localhost修改为您证书绑定的域名，例如：<a href="http://www.example.com./">www.example.com。</a><br>rewrite ^(.*)$ https://$host$1 permanent;   #将所有http请求通过rewrite重定向到https。<br> location / {<br>index index.html index.htm;<br>}<br>}</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(九)</title>
      <link href="/posts/bdcb.html"/>
      <url>/posts/bdcb.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><p>类和方法的源码下载地址:<a href="https://wujiops.coding.net/p/xuexibiji/d/xuexibiji/git/raw/master/%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95.zip" title="类和方法.zip">download</a>  </p><h1 id="关于类的理解"><a href="#关于类的理解" class="headerlink" title="关于类的理解"></a><font size=5>关于类的理解</font></h1><p>&emsp;&emsp;编写有意义的面向对象的代码<br>&emsp;&emsp;类 = 面向对象 ❌<br>&emsp;&emsp;类命名（建议：首字母大写、连接词首字母大写（变量，最好小写、连接词使用下划线连接））、对象（看下文）<br>&emsp;&emsp;实例化（下文）<br>&emsp;&emsp;类只负责去定义或去刻画一些东西，但是它不负责去执行代码。  运行或调用这个类，要在此类的外部。（非要在类内部调用，那这个类就变成了一个函数）  </p><h1 id="函数和类"><a href="#函数和类" class="headerlink" title="函数和类"></a><font size=5>函数和类</font></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># class定义类，def定义函数</span><span class="token comment"># 函数：</span><span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 定义函数名</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> x <span class="token operator">+</span> y   <span class="token comment"># 定义函数体</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span>a <span class="token operator">=</span> name<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 传入实参</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment"># 打印结果</span><span class="token comment"># 类：</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 定义类名</span>    school <span class="token operator">=</span> <span class="token string">'类小学'</span>   <span class="token comment"># 定义类体，类的特性表现形式，又称数据成员</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token string">'100'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> school<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 构造函数，对类初始化。（构造函数__init__，在实例化的时候做一些类的初始化的工作）</span>        self<span class="token punctuation">.</span>school <span class="token operator">=</span> school   <span class="token comment"># 定义实例变量，对于对象来说。（类是一个大范围，对象是一个具体事物）</span>        self<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span>    <span class="token comment"># 如果注释这一行,会去找类中的sum(注一)</span>    <span class="token keyword">def</span> <span class="token function">workbook</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 定义方法（或者称函数），对于类来说。（类方法）</span>        <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>school<span class="token punctuation">)</span>    <span class="token comment"># 类变量没有实例化也可以调用，实例化之后通过实例也可以调用</span>school1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'abc小学'</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span>   <span class="token comment"># 实例化，实例化意义：获取一个具体的对象</span>school2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'哈哈小学'</span><span class="token punctuation">,</span> <span class="token string">'900'</span><span class="token punctuation">)</span>   <span class="token comment"># （实例化一个对象）</span><span class="token keyword">print</span><span class="token punctuation">(</span>school1<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span>   <span class="token comment"># 打印结果（(解注一)先找实例本身，没有的话就去类里找）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类"><a href="#类" class="headerlink" title="类"></a><font size=4>类</font></h2><p>&emsp;&emsp;类的定义和类下面方法的调用，类最基本的作用：封装函数体(封装方法)  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 面向对象.py</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">''</span>   <span class="token comment"># 类体（对比函数体学习）</span>    age <span class="token operator">=</span> <span class="token string">'0'</span>    <span class="token keyword">def</span> <span class="token function">print_file</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># （self下文讲,这是方法,注二）</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name: '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age: '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>student <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 其他语言使用 new Student() 调用Student类, 在python中直接使用</span>student<span class="token punctuation">.</span>print_file<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 调用类下面的方法，（函数和方法的区别下文讲）</span><span class="token comment"># class StudentHomework():   # 模块里面可以有多个类</span><span class="token comment">#     homework_name = ''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用类"><a href="#引用类" class="headerlink" title="引用类"></a><font size=4>引用类</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> 面向对象 <span class="token keyword">import</span> Studentstudent <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span>print_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 可以这样在另一个模块中引用类，但是这样会让代码看起来非常松散</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法</strong> 和 <strong>函数</strong> 的区别：（初学者对此不必纠结。下文只是建议）<br>&emsp;&emsp;在C、C++更多称为函数，在java、C#里更多称为方法（对def name(): \n pass的称谓）<br>&emsp;&emsp;方法是设计层面的一个称谓。函数是程序运行、过程式的称谓<br>&emsp;&emsp;变量在模块里面，称为变量；在类里面，更多称为数据成员。  </p><p><strong>类</strong> 和 <strong>对象</strong> 有什么区别？<br>&emsp;&emsp;通用定义：类是现实世界或思维世界中的实体在计算机中的反映，它将数据以及这些数据上的操作封装在一起<br>&emsp;&emsp;在Student类里面，学生有很多的特性（名字、年龄、性别等）在类里面是由 数据成员 来表示的，还因该有它们的行为（做作业、考试等）<br>&emsp;&emsp;行为用方法表示。<br>&emsp;&emsp;类设置的好不好关键看行为与特征。 </p><p><strong>对象</strong>：表示一个具体的概念（类比’学生类’，学生类代表学生整体，对象就是具体的一个学生）<br>&emsp;&emsp;换句话说，类只是告诉我们对于一个学生群体来说，每一个学生都会有它的特征名字和年龄等，但是年龄具体取什么值，名字具体取什么值，需要实例化来完成。当类被实例化了以后，就变成了一个对象。<br>&emsp;&emsp;在类被实例化的时候，需要我们往类里面传递具体值，然后才能得到一个具体的对象。  </p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a><font size=5>对象</font></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 定义一个学生类</span>    name <span class="token operator">=</span> <span class="token string">''</span>   <span class="token comment"># 学生的特征</span>    age <span class="token operator">=</span> <span class="token string">'0'</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 学生的行为：做作业</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a><font size=4>实例化</font></h2><p>&emsp;&emsp;实例化的意义：用模板创建一个新的对象  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">''</span>    age <span class="token operator">=</span> <span class="token string">'7'</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 然在实际代表一个事物，</span>student2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>student3 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 但是在计算机中，打印的内存地址是不同的。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类变量</strong>和<strong>实例变量</strong>，类和模块的行为要区分对待，类有自己的规则和特性<br>&emsp;&emsp;类变量，和类相关联的变量；<br>&emsp;&emsp;实例变量，是和对象相关联的  </p><h3 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a><font size=3>案例一：</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'abc'</span>   <span class="token comment"># 这样定义是否有意义：答案是没有意义的。名字和年龄是小明小红的属性，不是学生的属性，但是python语法是对的</span>    age <span class="token operator">=</span> <span class="token string">'7'</span>   <span class="token comment"># 这里可以定义一个sum = 100，一个班级学生总数。对比name和age可能会好一点。</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># __init__称为构造函数，在构造函数中，最常用的初始化类的特征</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name   <span class="token comment"># 定义实例变量：self.变量名（self下文讲,注二，可以是任意标识如abc，python建议是self）</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token comment"># return None   # __init__函数和不同函数的区别，init函数不能返回任意的字符串，只能是None(可以省略此行)</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">)</span>   <span class="token comment"># 实例化</span>student2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span>student3 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'大壮'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment"># 构造函数的调用是自动进行的，当你在实例化的时候，python会自动帮你调用__init__构造函数。</span><span class="token comment"># 也能手动调用（很少显式调用）。就是说不必使用下面三行代码调用构造函数。</span><span class="token comment"># student1.__init__()</span><span class="token comment"># student2.__init__()</span><span class="token comment"># student3.__init__()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a><font size=3>案例二：</font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'abc'</span>    age <span class="token operator">=</span> <span class="token string">'0'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token comment"># 定义实例变量，如果没有前面的self，print(student1.__dict__)是空的字典。并且字典里面只有设置了self.*这样的元素</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>    <span class="token comment"># 实例化一个对象</span><span class="token comment"># print(student1.name)    # 直接打印是空</span><span class="token comment"># print(Student.name)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>    <span class="token comment"># 实例变量和类里面都有__dict__函数。使用print()可以查看变量名和变量值的对应关系。</span><span class="token comment"># 如果python访问一个实例变量，找不到会到类里面去找，再找不到去父类里面去找。</span><span class="token comment"># 类里面也有__dict__变量，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解,注二:<br><strong>实例方法</strong>，对类下面的实例方法，默认会有一个self，调用的时候默认传入，不需要手动添加。<br>&emsp;&emsp;self必须是显示的（和其它语言this.几乎是一样的。其它语言是隐藏的），但是可以是任意字符，只是默认为self（不建议更换成其他字符）<br>&emsp;&emsp;self就是当前调用某一个方法的对象；self代表的是实例，而不是类。（self必须要写，当然你也可以不叫self）<br>&emsp;&emsp;实例方法最大的特点，第一个参数是需要传入一个self，实例方法是和实例对象相关联的，也是实例可以调用的方法  </p><p><strong>总结：</strong><br>&emsp;&emsp;类包含：变量（类变量、实例变量）；方法（实例方法、类方法、静态方法）；构造函数<br>&emsp;&emsp;方法和变量的关系：从面向对象角度：方法代表类的行为，变量代表刻画一个类的特征。（变量用来刻画名字和年龄，而方法用来描述我们可以做什么事情以及我们自身的一些行为）<br>&emsp;&emsp;在绝大多数情况下面，方法需要对变量做一系列运算，或者说逻辑上的操作，最终去改变变量的状态。当然方法也可以不操作任何变量（少数）  </p><h1 id="补充：类的专有方法"><a href="#补充：类的专有方法" class="headerlink" title="补充：类的专有方法"></a><font size=5>补充：类的专有方法</font></h1><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">__init__</td><td align="left">构造函数，在生成对象时调用</td></tr><tr><td align="left">__del__</td><td align="left">析构函数，释放对象时使用</td></tr><tr><td align="left">__repr__</td><td align="left">打印，转换</td></tr><tr><td align="left">__setitem__</td><td align="left">按照索引赋值</td></tr><tr><td align="left">__getitem__</td><td align="left">按照索引获取值</td></tr><tr><td align="left">__len__</td><td align="left">获得长度</td></tr><tr><td align="left">__cmp__</td><td align="left">比较运算</td></tr><tr><td align="left">__call__</td><td align="left">函数调用</td></tr><tr><td align="left">__add__</td><td align="left">加运算</td></tr><tr><td align="left">__sub__</td><td align="left">减运算</td></tr><tr><td align="left">__mul__</td><td align="left">乘运算</td></tr><tr><td align="left">__truediv__</td><td align="left">除运算</td></tr><tr><td align="left">__mod__</td><td align="left">求余运算</td></tr><tr><td align="left">__pow__</td><td align="left">乘方</td></tr></tbody></table><h1 id="在方法里面操作变量"><a href="#在方法里面操作变量" class="headerlink" title="在方法里面操作变量"></a><font size=5>在方法里面操作变量</font></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 类</span>    sum1 <span class="token operator">=</span> <span class="token number">0</span>    name <span class="token operator">=</span> <span class="token string">'abc'</span>   <span class="token comment"># 类变量</span>    age <span class="token operator">=</span> <span class="token string">'0'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 构造函数，特别的一个实例方法。</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name   <span class="token comment"># 实例变量</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token comment"># 在实例方法里面操作实例变量,建议加上self</span>        <span class="token comment"># print(name)   # 读取的是 形参name ，不加self情况。</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>sum1<span class="token punctuation">)</span>   <span class="token comment"># 在实例方法里面访问类变量</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>sum1<span class="token punctuation">)</span>   <span class="token comment"># self里面有一个__class__函数，也可以访问类变量</span><span class="token comment"># 构造函数是一个特殊的实例方法，调用方式不一样。</span><span class="token comment"># 调用构造函数实际上是通过 类(),普通的实例方法调用 对象.do_homework</span><span class="token comment"># 意义不一样，实例方法描述类的行为；构造函数是用来初始化类的特征的。</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 实例方法(普通的实例方法)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>   <span class="token comment"># 实例化，实例对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token comment"># 调用</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment"># 类变量也有专门操作它的类方法</span><span class="token comment"># @classmethod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例一：-1"><a href="#案例一：-1" class="headerlink" title="案例一："></a><font size=4>案例一：</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 实例方法（构造函数）</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前学生总数为：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 实例方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>Student<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment"># 实例化，传参过程。打印结果为sum1=3(实例化的时候会自动调用构造函数。)</span>student2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>Student<span class="token punctuation">(</span><span class="token string">'小O'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment"># 注释上面三行，不打印任何东西，因为没有去调用此类</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例二：-1"><a href="#案例二：-1" class="headerlink" title="案例二："></a><font size=4>案例二：</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 实例方法（构造函数）</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 实例方法</span>        <span class="token comment"># print('homework')</span>        self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前学生总数为：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>student1<span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>student2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>student2<span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>student3 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小O'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>student3<span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 注释上面student1-3三行，不打印任何东西，因为没有去调用此类</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例三："><a href="#案例三：" class="headerlink" title="案例三："></a><font size=4>案例三：</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前人数：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token comment"># 装饰器（高阶函数讲）;决定类方法和实例方法的不同</span>    <span class="token keyword">def</span> <span class="token function">plus_sum</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        cls<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>Student<span class="token punctuation">.</span>plus_sum<span class="token punctuation">(</span><span class="token punctuation">)</span>student2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'ss'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>Student<span class="token punctuation">.</span>plus_sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># student1 = Student('abc', 8)   # python可以用对象调用方法，但是不建议这样做。</span><span class="token comment"># student1.plus_sum()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a><font size=5>静态方法</font></h1><p>大部分可以使用类方法，几乎和普通函数没区别。（不推荐使用静态方法，很熟练无所谓。）  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前人数：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token comment"># 类方法装饰器（高阶函数讲）;决定类方法和实例方法的不同</span>    <span class="token keyword">def</span> <span class="token function">plus_sum</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        cls<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token comment"># print(self.name)   # 不能访问实例变量；下面的静态方法同样不能访问实例变量</span>    <span class="token decorator annotation punctuation">@staticmethod</span>   <span class="token comment"># 静态方法装饰器。（对象和类均可调用）</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span>   <span class="token comment"># 基本上和类方法一样，只是没有显式传入cls</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a static method'</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>Student<span class="token punctuation">.</span>plus_sum<span class="token punctuation">(</span><span class="token punctuation">)</span>student2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'ss'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>Student<span class="token punctuation">.</span>plus_sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># student1.add(1, 2)   # 对象调用静态方法</span><span class="token comment"># Student.add(1, 4)   # 类调用静态方法</span><span class="token comment"># student1.plus_sum()   # 对象调用类方法</span><span class="token comment"># Student.plus_sum()    # 类调用类方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="成员的可见性"><a href="#成员的可见性" class="headerlink" title="成员的可见性"></a><font size=5>成员的可见性</font></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>do_english_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 在类的内部，一个函数可以调用另一个函数。（内部调用）</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_english_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>        <span class="token comment"># self.__class__.sum += 1</span>        <span class="token comment"># print('当前学生总数为：' + str(self.__class__.sum))</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>student1<span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 在对象的外部调用，do_homework方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类的不安全"><a href="#类的不安全" class="headerlink" title="类的不安全"></a><font size=5>类的不安全</font></h1><p>&emsp;&emsp;一个倡议：一个类，它下面的一些数据变量，是类非常重要的特征数据，如果要修改类特征的值，不建议通过直接访问变量的方式，来改变变量的状态<br>&emsp;&emsp;所有对于类下面的变量的更改，建议通过方法来完成（大部分语言所提倡）<br>&emsp;&emsp;不要对变量做外部修改，应该通过方法修改  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># def __init__(self, name, age, score):</span><span class="token comment">#     self.name = name</span><span class="token comment">#     self.age = age</span><span class="token comment">#     self.score   # score定义学生的分数，但是这样定义，下面可以使用student1.score = -1修改。正确实例：</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token comment"># self.score</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>do_english_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">marking</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 对score变量创建一个方法，使用if/else判断。</span>        <span class="token keyword">if</span> score <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'不能出现负分'</span>        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'同学本次考试成绩为：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>result <span class="token operator">=</span> student1<span class="token punctuation">.</span>marking<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a><font size=5>私有方法</font></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 其他语言里面使用public/private sum = 0来表示公有或私有的变量/方法，是不能从外部访问的。</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># __init__这样前后双下划线的，都不是私有,验证下面"__marking__",看结果。</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name            <span class="token comment"># 自己写不建议使用"__marking__"，__*__是python内置的一些变量。</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__marking</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 对方法/变量加上双下划线，将其变为私有</span>        <span class="token keyword">if</span> score <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'不能出现负分'</span>        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'同学本次考试成绩为：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment"># result = student1.__marking(89)   # 这样访问会报错。</span><span class="token comment"># print(result)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">复习：类体（数据成员（类变量））、实例变量、构造函数（特殊实例方法）、类方法、静态方法、对象、实例化、装饰器、成员可见性  公开的 public（可以在外部赋值调用）;私有的 private（python中在变量名前面加入__双下划线即可,不能在外部调用，可以在类内部调用）  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a><font size=5>私有变量</font></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 注三</span>        self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">marking</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> score <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'不能出现负分'</span>        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'同学本次考试成绩为：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>result <span class="token operator">=</span> student1<span class="token punctuation">.</span>marking<span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>student1<span class="token punctuation">.</span>__score <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>   <span class="token comment"># 注四 和 注三 不是同一个变量哦，一个是_Student__score一个是__score</span><span class="token comment"># 实际上是python语言的动态特性。对student1这个对象添加了一个新的属性（__score）,并不是上面'注三'的__score</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>__score<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>   <span class="token comment"># 验证注四</span><span class="token comment"># __dict__函数打印出来的_Student__score就是设置的私有变量__score，而后面的__score就是下面动态设置的student1.__score = -1</span><span class="token comment"># 扩展：为什么我们访问私有变量，python会报错找不到私有变量，就是因为python存储私有变量的时候，更改了私有变量的名字。</span><span class="token comment"># 换句话说，python保护私有变量，就是保存私有变量的时候改个名字而已。</span><span class="token comment"># 严格意义上来讲，python是没有私有变量的。因为上面的例子print(student1._Student__score)就可以读到私有变量。</span><span class="token comment"># 但是既然别人这样写了，就最好不要打破。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a><font size=5>继承性</font></h1><p>&emsp;&emsp;面向对象3大特性：继承性、封装性（抽象）、多态性<br>&emsp;&emsp;类的组成：类的特征（实例变量、类变量）；行为（各种各样的方法）<br>&emsp;&emsp;继承性最基本的定义：避免我们定义重复性的方法和变量（建议一个模块只写一个类，java、C#是这样的）  </p><p>继承性.py  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Human'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> 继承性 <span class="token keyword">import</span> Human<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Human<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span>   <span class="token comment"># 子类里面没有sum变量，直接继承的父类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> 继承性 <span class="token keyword">import</span> Human<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Human<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span>   <span class="token comment"># 通过对象调用类变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token comment"># 实例变量也可以被子类继承</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span>    <span class="token comment"># 通过类调用类变量</span>student1<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 继承父类的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># 子类里面调用父类的构造函数</span><span class="token keyword">from</span> 继承性 <span class="token keyword">import</span> Human<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Human<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> school<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>school <span class="token operator">=</span> school        Human<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token comment"># 这里必须传入self，用类调用实例方法（普通方法的调用）</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>age<span class="token punctuation">)</span>Student<span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>   <span class="token comment"># 类调用实例方法,这样self就是一个普通的参数</span>student1<span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 对象调用实例方法</span><span class="token comment"># 在很多语言里面类是不能调用实例方法的，但是python可以。</span><span class="token comment"># 缺点：如果父类改名，子类中的所有父类的方法都要改</span><span class="token comment"># 开闭原则：代码对自身扩展是开放的，对自身的更改是关闭的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> 继承性 <span class="token keyword">import</span> Human<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Human<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> school<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>school <span class="token operator">=</span> school        <span class="token builtin">super</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token comment"># 最好使用super关键字调用父类构造函数</span>    <span class="token keyword">def</span> <span class="token function">do_homework</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'homework'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 注五，调用父类实例方法</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>age<span class="token punctuation">)</span>student1<span class="token punctuation">.</span>do_homework<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 注释掉注五，优先调用子类的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(八)</title>
      <link href="/posts/ed1d.html"/>
      <url>/posts/ed1d.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 就是一个函数</span>a <span class="token operator">=</span> <span class="token number">1.2345</span>   <span class="token comment"># 保留两位</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>wj_result <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 做好使用变量，函数嵌套函数很乱。(一个建议而已)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wj_result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数作用："><a href="#函数作用：" class="headerlink" title="函数作用："></a><font size=5>函数作用：</font></h1><p>&emsp;&emsp;1. 功能性（有一个非常明确的目的）<br>&emsp;&emsp;2. 隐藏细节<br>&emsp;&emsp;3. 避免编写重复的代码<br>组织代码、自定义函数  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funcname</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 函数的基本结构：def关键字定义函数、funcname函数名、parameter_list参数列表要用()括起来以:结尾</span>    <span class="token keyword">pass</span>   <span class="token comment">#函数体，代码块，前面要有缩进</span>parameter_list 参数列表，可以没有函数体里面，使用<span class="token keyword">return</span>返回结果，    <span class="token keyword">return</span> value，如果没有<span class="token keyword">return</span>语句默认返回<span class="token boolean">None</span>空值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>实现两个数字相加  </li><li>打印输入的参数  </li></ol><h2 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a><font size=4>案例一：</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 报错name 'add' is not defined这里使用的add在python中是找不到的。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a><font size=4>案例二：</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># import sys</span><span class="token comment"># sys.setrecursionlimit(100)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 自己调自己，报错[Previous line repeated 995 more times]重复了995次，默认值（或者998，1000），设置最大重复次数，注意看more times数值变化</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>   <span class="token comment"># import sys # sys.setrecursionlimit(100)设置最大重复次数</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token comment"># 函数和变量不要和内置的重名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例三："><a href="#案例三：" class="headerlink" title="案例三："></a><font size=4>案例三：</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">w_print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token comment"># return True   # 测试有return返回True</span>a <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> w_print<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment"># 执行流程，1.def函数定义，2.把计算结果赋值给a，3.执行w_print函数，4.在def w_print(code):里面直接打印“Python”;5.执行print(a, b)，a是3，b是None（没有return返回None）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>学好函数的参数，是学好函数的重要的一个环节（.py文件是模块，def定义的是函数）  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">w_print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token keyword">return</span>   <span class="token comment"># 尝试注释return,会发现"haha"被打印了</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span>   <span class="token comment"># 在函数中，return后面的语句不会被执行</span>a <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> w_print<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">damage</span><span class="token punctuation">(</span>skill1<span class="token punctuation">,</span> skill2<span class="token punctuation">)</span><span class="token punctuation">:</span>    damage1 <span class="token operator">=</span> skill1 <span class="token operator">*</span> <span class="token number">3</span>    damage2 <span class="token operator">=</span> skill2 <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10</span>    <span class="token keyword">return</span> damage1<span class="token punctuation">,</span> damage2<span class="token comment"># damages = damage(3, 6)   # 不建议*1</span><span class="token comment"># print(type(damages))</span><span class="token comment"># print(damages)</span><span class="token comment"># print(damages[0], damages[1])   # 不建议使用此方法*1</span><span class="token comment"># ------</span>skill1_damage<span class="token punctuation">,</span> skill2_damage <span class="token operator">=</span> damage<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>   <span class="token comment">#序列解包</span><span class="token keyword">print</span><span class="token punctuation">(</span>skill1_damage<span class="token punctuation">,</span> skill2_damage<span class="token punctuation">)</span><span class="token comment"># -------</span><span class="token comment"># a, b, c = 1, 2, 3   # 这是变量赋值，等同于：a = 1，b = 2，c = 3</span><span class="token comment"># d = 4, 5, 6   # 这是一个tuple，使用type()可以验证</span><span class="token comment"># x, y, z = d   # 这叫序列解包，相当于：x = 4，y = 5，z = 6</span><span class="token comment"># a = b = c = 1   # 相当于：a = 1，b = 1，c = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://tool.lu/coderunner/embed/8Gs.html" width="793" height="550" frameborder="0" mozallowfullscreen webkitallowfullscreen allowfullscreen></iframe>  <h1 id="函数参数："><a href="#函数参数：" class="headerlink" title="函数参数："></a><font size=5>函数参数：</font></h1><h2 id="1-必须参数"><a href="#1-必须参数" class="headerlink" title="1.必须参数"></a><font size=4>1.必须参数</font></h2><p>&emsp;&emsp;我们在函数的参数列表里面，所定义的参数，是必须要传递的。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 这里必须给x，y参数</span>    <span class="token comment"># 这里x和y称为：形式参数，形参</span>    result <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">return</span> resulta <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 函数调用的过程中，往函数的参数列表里面传递的参数的实际的取值。--实际参数，a是实参</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-关键字参数"><a href="#2-关键字参数" class="headerlink" title="2.关键字参数"></a><font size=4>2.关键字参数</font></h2><p>&emsp;&emsp;关键字参数和必须参数的区别：在于函数的调用上，不在于函数的定义上。定义是相同的，调用不同。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">add1</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">:</span>    result1 <span class="token operator">=</span> x1 <span class="token operator">+</span> y1    <span class="token keyword">return</span> result1a1 <span class="token operator">=</span> add1<span class="token punctuation">(</span>y1<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> x1<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment"># 关键字参数，在函数调用的时候明确告诉python，给定的实参是具体给哪个形参的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-默认参数"><a href="#3-默认参数" class="headerlink" title="3.默认参数"></a><font size=4>3.默认参数</font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># def print_student_files(name, gender, age,</span><span class="token comment">#                         college):</span><span class="token comment">#     print('我叫' + name)</span><span class="token comment">#     print('我今年' + age + '岁')</span><span class="token comment">#     print('我是' + gender + '生')</span><span class="token comment">#     print('我在' + college + '上学')</span><span class="token comment"># print_student_files('大壮', '男', '8', '哈哈小学')</span><span class="token keyword">def</span> <span class="token function">print_student_files</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">'8'</span><span class="token punctuation">,</span>                        college<span class="token operator">=</span><span class="token string">'哈哈小学'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 给形参设置默认值，未设置的形参是一定要传实参的。</span>    <span class="token comment">#（不能夹杂着混，比如：（name, gender='男', age）是不可以的。）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我今年'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">'生'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我在'</span> <span class="token operator">+</span> college <span class="token operator">+</span> <span class="token string">'上学'</span><span class="token punctuation">)</span>print_student_files<span class="token punctuation">(</span><span class="token string">'小牛'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------分割线--------'</span><span class="token punctuation">)</span>print_student_files<span class="token punctuation">(</span><span class="token string">'小乐'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">)</span>   <span class="token comment"># 即使有了默认值，实参传递的值也会覆盖默认值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------分割线--------'</span><span class="token punctuation">)</span>print_student_files<span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> college <span class="token operator">=</span> <span class="token string">'喜喜小学'</span><span class="token punctuation">)</span>   <span class="token comment"># 关键字赋值，是不用考虑传参顺序的。</span><span class="token comment">#（同上，不能夹杂混和，比如（'小红', gender='女', '8'），这样子不行的。反过来关键字参数中间夹杂着实参也不行。）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(七)</title>
      <link href="/posts/dd93.html"/>
      <url>/posts/dd93.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="Python项目的组织结构："><a href="#Python项目的组织结构：" class="headerlink" title="Python项目的组织结构："></a><font size=5><strong>Python项目的组织结构：</strong></font></h2><p><img src="/medias/drawing-bed/python7/0.jpg"></p><h2 id="直接表现形式："><a href="#直接表现形式：" class="headerlink" title="直接表现形式："></a><font size=5><strong>直接表现形式：</strong></font></h2><p>包 —— 文件夹<br>&emsp;&emsp;名字就是文件夹名（包里面可以有子包，文件夹中有文件夹，很灵活）<br>模块 —— *.py文件<br>&emsp;&emsp;名字就是文件名，区分不同包的相同名的模块<br>class —— 类<br>&emsp;&emsp;写在.py文件里<br>命名空间：（abc.c4和xyz.c4）abc和xyz是文件夹名（包名），c4是同名文件，不同包。abc.c4称为路径也是命名空间<br>包和文件夹区分：包里面包含一个__init__.py文件（可以是空白文件，可以是模块）引用__init__.py模块，直接引用包名即可<br>文件夹里没有__init__.py就是一个普通文件夹  </p><center>-----------------------分割线-----------------------</center>import(导入模块使用麻烦)、from..import(导入模块直接使用，不建议直接使用import *)、import..as(对import导入设置别名)，避免循环导入  <p><strong>约定目录结构：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon workdir<span class="token punctuation">]</span><span class="token comment"># tree A</span>A├── A<span class="token punctuation">.</span>py├── B│   └── B<span class="token punctuation">.</span>py└── C    └── C<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内容：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat B/B.py  #设置变量</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat C/C.py  #设置变量</span>c <span class="token operator">=</span> <span class="token number">3</span>d <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat A.py </span><span class="token keyword">import</span> B<span class="token punctuation">.</span>B   <span class="token comment">#导入B/B.py模块</span><span class="token keyword">print</span> <span class="token punctuation">(</span>B<span class="token punctuation">.</span>B<span class="token punctuation">.</span>a<span class="token punctuation">)</span>   <span class="token comment">#打印B.py模块里 的变量a</span><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># python A.py </span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat A.py </span><span class="token keyword">from</span> B<span class="token punctuation">.</span>B <span class="token keyword">import</span> a   <span class="token comment">#导入B.py里面的a变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment">#直接使用</span><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># python A.py </span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat A.py </span><span class="token keyword">import</span> B<span class="token punctuation">.</span>B <span class="token keyword">as</span> NAME   <span class="token comment">#设置别名</span><span class="token keyword">print</span> <span class="token punctuation">(</span>NAME<span class="token punctuation">.</span>a<span class="token punctuation">,</span>NAME<span class="token punctuation">.</span>b<span class="token punctuation">)</span>   <span class="token comment">#打印别名+变量名</span><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># python A.py </span><span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat A.py </span><span class="token keyword">from</span> B<span class="token punctuation">.</span>B <span class="token keyword">import</span> a<span class="token punctuation">,</span> \   <span class="token comment">#换行方式</span>    b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># python A.py </span><span class="token number">1</span> <span class="token number">2</span><span class="token comment"># from B.B import (a, 换行方式2</span><span class="token comment">#     b)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat B/__init__.py </span>H <span class="token operator">=</span> <span class="token string">"haha"</span>   <span class="token comment">#在模块目录直接编写__init__.py文件</span><span class="token keyword">print</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># cat A.py </span><span class="token keyword">import</span> B   <span class="token comment">#直接引用包B</span><span class="token punctuation">(</span>py3<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@bogon A<span class="token punctuation">]</span><span class="token comment"># python A.py </span>haha   <span class="token comment">#直接出结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>-----------------------分割线-----------------------</center><p><strong>包的引用问题</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ tree workdir workdir├── README<span class="token punctuation">.</span>md├── test1│   ├── c1<span class="token punctuation">.</span>py│   ├── __pycache__│   │   └── c1<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">37.</span>pyc│   └── test2│       ├── c1<span class="token punctuation">.</span>py│       └── __pycache__│           └── c1<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">37.</span>pyc└── test2    ├── c2<span class="token punctuation">.</span>py    └── __pycache__        └── c2<span class="token punctuation">.</span>cpython<span class="token operator">-</span><span class="token number">37.</span>pycA<span class="token operator">=</span><span class="token operator">/</span>workdir<span class="token operator">/</span>test1<span class="token operator">/</span>c1<span class="token punctuation">.</span>pyB<span class="token operator">=</span><span class="token operator">/</span>workdir<span class="token operator">/</span>test1<span class="token operator">/</span>test2<span class="token operator">/</span>c1<span class="token punctuation">.</span>pyC<span class="token operator">=</span><span class="token operator">/</span>workdir<span class="token operator">/</span>test2<span class="token operator">/</span>c2<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A可以调用B<br>C可以调用A<br>A再调用C出错  </p><p><strong>注意:</strong> </p><p>包的引用，个人理解：被引用的模块中加入 if <strong>name</strong> == ‘<strong>main</strong>‘: 函数，这样可以只引用函数，不会执行 “main”。<br>被引用模块加入 <strong>all</strong> = [‘a’, ‘c’]，引用时使用 from model.mod import *，这样只会引入被引模块all定义的函数，不会引入其他函数<br>将函数定义在一个包中，这样比较好一点<br>相互引用会造成一些错误。当被引模块出现 sys.path.append(‘..’) 的时候，或者其他状况。  </p><p>&emsp;&emsp;<strong>源码下载</strong> <a href="https://wujiops.coding.net/p/xuexibiji/d/xuexibiji/git/raw/master/python7.zip" title="python7.zip">download</a> </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 包和模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(六)</title>
      <link href="/posts/4d1e.html"/>
      <url>/posts/4d1e.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="什么是表达式"><a href="#什么是表达式" class="headerlink" title="什么是表达式"></a><font size=5><strong>什么是表达式</strong></font></h2><p><strong>C语言对表达式定义：</strong> <strong>表达式</strong>（Expression）是<strong>运算符</strong>（operator）和<strong>操作数</strong>（operand）所<strong>构成的序列</strong>。<br><strong>编程语言是模拟现实生活的。</strong><br><strong>‘=’</strong>,号是赋值运算符（运算符：函数的调用，<strong>and</strong>，<strong>or</strong>等都是表达式）<br>例如：<strong>a = 1，b = 2，c = 3</strong>计算<strong>a + b * c</strong>和<strong>a or b and c</strong>  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">+</span> b <span class="token operator">*</span> c   <span class="token comment"># 类比数学运算，乘号优先级是高于加号的。</span><span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">or</span> b <span class="token keyword">and</span> c   <span class="token comment"># and优先级高于or</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运算符优先级，从高到低（仅供参考）<br><img src="/medias/drawing-bed/python6/0.jpg"></p><p>解释器解析表达式的顺序：从左向右（左结合），加()可以调高优先级，类比数学四则运算<br>c = a + b（例外：右结合，要先计算a + b）总结：上述表格仅供参考  </p><p>思考：<strong>a = 1,b = 2,c = 2,not a or b +2 == c</strong>用括号标注出表达式的顺序（带括号和不带括号顺序相同）<br>参考表格：优先级应该是 <strong>+、==、not、or</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> a <span class="token keyword">or</span> b <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> c<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> a <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> c<span class="token punctuation">)</span>   <span class="token comment"># not优先级本来就高于or</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">not</span> a<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> c<span class="token punctuation">)</span>   <span class="token comment"># 这个思路，or本来就是最后，是not和==的比较</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑运算符优先级：<strong>not &gt; and &gt; or</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python在每一行的末尾，不需要强制加;分号,加了;也不会报错</span><span class="token comment"># &#123;</span><span class="token comment">#   if class function  #其它语言需要&#123;&#125;包裹代码块,python中不需要</span><span class="token comment"># &#125;</span><span class="token comment"># python中靠缩进区分代码和代码块</span><span class="token comment"># 流程控制语句</span><span class="token comment"># 条件控制  循环控制  分支</span><span class="token comment"># 其它语言条件控制:if else</span><span class="token comment"># 其它语言循环控制:for while</span><span class="token comment"># 其它语言分支控制:switch</span><span class="token triple-quoted-string string">'''代码是为了解决现实中的选择性问题。python代码不能被混淆压缩'''</span><span class="token comment"># mood = True</span><span class="token comment">#</span><span class="token comment"># if mood == False :</span><span class="token comment">#     print('go to left')</span><span class="token comment"># else :</span><span class="token comment">#     print('go to right')</span><span class="token comment"># print('-----')</span><span class="token comment"># if mood :</span><span class="token comment">#     print('go to left')</span><span class="token comment"># else :</span><span class="token comment">#     print('go to right')</span><span class="token comment"># python条件控制if else</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> a <span class="token operator">></span> b<span class="token punctuation">:</span>    <span class="token comment">#if后面可以是表达式、bool、空列表等</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'😘'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token number">2</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'null'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'😱'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://tool.lu/coderunner/embed/7X4.html" width="793" height="550" frameborder="0" mozallowfullscreen webkitallowfullscreen allowfullscreen></iframe><h2 id="分支的基本语法"><a href="#分支的基本语法" class="headerlink" title="分支的基本语法"></a><font size=5><strong>分支的基本语法</strong></font></h2><p>&emsp;&emsp;<strong>（可以参考shell中的if/else）</strong></p><p>1.if条件表达式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">语句1  语句2  <span class="token punctuation">..</span>.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.条件表达式就是计算结果必须为布尔值得表达式<br>3.表达式后面的冒号不能少<br>4.注意if后面出现的语句，如果属于if语句块，则必须同一个缩进等级<br>5.条件表达式结果为True执行if后面的缩进语句块<br>双向分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> 条件表达式:    语句1    语句2    <span class="token punctuation">..</span>.  else:    语句1    语句2    <span class="token punctuation">..</span>.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;双向分支有两个分支，当程序执行到if……else……语句的时候，一定会执行if或else中的一个，也仅执行一个<br>&emsp;&emsp;缩进问题，if和else一个层次，其余语句一个层次。<br>多线路分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> 条件表达式:  语句1<span class="token keyword">elif</span> 条件表达式:  语句1<span class="token keyword">elif</span> 条件表达式:  语句1else:  语句1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>if语句其他</strong><br>1.if语句可以嵌套使用，但不推荐。<br>2.python没有switch-case语句。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''snippet 片段,vscode中使用'''</span><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span> <span class="token comment"># 空语句/占位语句,避免报错.用于api接口等</span><span class="token keyword">if</span> <span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token triple-quoted-string string">'''if/else可以参考shell嵌套'''</span><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token keyword">if</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简单交互、if/else、脚本</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">account <span class="token operator">=</span> <span class="token string">'user'</span>password <span class="token operator">=</span> <span class="token string">'123'</span><span class="token comment"># python建议变量名的定义规范：名称最好都是小写的，组合单词用下划线分割</span><span class="token comment"># 命令行接受用户输入</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'please input account'</span><span class="token punctuation">)</span>user_account <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'please input password'</span><span class="token punctuation">)</span>user_password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># if user_account == 'hello' and user_password == '123456' :</span><span class="token comment">#     print('success')</span><span class="token comment"># else :</span><span class="token comment">#     print('error')</span><span class="token keyword">if</span> account <span class="token operator">==</span> user_account <span class="token keyword">and</span> password <span class="token operator">==</span> user_password<span class="token punctuation">:</span>  <span class="token comment">#注意这里表达式优先级关系,必要时用()调整优先级</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#--*--coding:utf-8--*--</span><span class="token triple-quoted-string string">'''变量a=xa=1;print(apple)a=2;print(orange)a=3;print(banana)a=other;print('shopping')'''</span>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 如果直接这样写，命令行输入type是str，if判断要用a == '1'，或者进行转换a = int(a)</span><span class="token comment"># input()函数接受的是字符串str</span><span class="token comment"># print(a)</span><span class="token comment"># if a==1:</span><span class="token comment">#     print('apple')</span><span class="token comment"># else:</span><span class="token comment">#     if a==2:</span><span class="token comment">#         print('orange')</span><span class="token comment">#     else:</span><span class="token comment">#         if a==3:</span><span class="token comment">#             print('banana')</span><span class="token comment">#         else:</span><span class="token comment">#             print('shopping')</span><span class="token comment"># a = int(a)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#打印a的类型，验证命令行输入是str</span><span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> a <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'shopping'</span><span class="token punctuation">)</span><span class="token comment"># 命令行输入的是字符串str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 分支 </tag>
            
            <tag> 循环 </tag>
            
            <tag> 条件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(五)</title>
      <link href="/posts/ed3d.html"/>
      <url>/posts/ed3d.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a><font size=5><strong>复习</strong></font></h2><p>&emsp;&emsp;<strong>算术运算符</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello'</span><span class="token operator">+</span><span class="token string">'world'</span><span class="token string">'helloworld'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token number">1.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">//</span><span class="token number">2</span>   <span class="token comment">#整除</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">%</span><span class="token number">2</span>   <span class="token comment">#余数</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">5</span>   <span class="token comment">#次方</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><font size=5><strong>算术运算符</strong></font></h2><p>&emsp;&emsp;+、-、<em>、/、//、%、</em>*<br><img src="/medias/drawing-bed/python5/0.jpg" alt="算数运算符.jpg"></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a><font size=5><strong>赋值运算符</strong></font></h2><p>&emsp;&emsp;=、+=、*=、/=、%=、**=、//=<br><img src="/medias/drawing-bed/python5/1.jpg" alt="赋值运算符.jpg"></p><h2 id="比较-逻辑运算符"><a href="#比较-逻辑运算符" class="headerlink" title="比较/逻辑运算符"></a><font size=5><strong>比较/逻辑运算符</strong></font></h2><h3 id="比较（关系）运算符"><a href="#比较（关系）运算符" class="headerlink" title="比较（关系）运算符"></a><font size=4><strong>比较（关系）运算符</strong></font></h3><p>&emsp;&emsp;==、!=、&gt;、&lt;、&gt;=、&lt;=</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><font size=4><strong>逻辑运算符</strong></font></h3><p>&emsp;&emsp;and、or、not<br><img src="/medias/drawing-bed/python5/2.jpg" alt="比较/逻辑运算符.jpg"></p><h2 id="成员-身份-位运算符"><a href="#成员-身份-位运算符" class="headerlink" title="成员/身份/位运算符"></a><font size=5><strong>成员/身份/位运算符</strong></font></h2><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a><font size=4><strong>成员运算符</strong></font></h3><p>&emsp;&emsp;in、not in</p><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a><font size=4><strong>身份运算符</strong></font></h3><p>&emsp;&emsp;is、not is</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a><font size=4><strong>位运算符</strong></font></h3><p>&emsp;&emsp;&amp;、|、^、~、&lt;&lt;、&gt;&gt;<br><img src="/medias/drawing-bed/python5/3.jpg" alt="成员/身份/位运算符.jpg"></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a><font size=5><strong>例子</strong></font></h2><h3 id="算术-赋值运算符"><a href="#算术-赋值运算符" class="headerlink" title="算术/赋值运算符"></a><font size=4><strong>算术/赋值运算符</strong></font></h3><p><strong><font color=red>注意：</font></strong> Python中不存在变量的定义，变量在Python中就是一个名字。c = 1，即把1赋值给c</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token operator">+=</span><span class="token number">1</span>   <span class="token comment">#相当于c = c + 1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">,</span>c<span class="token operator">-</span><span class="token operator">-</span>   <span class="token comment">#++，--自增和自减运算符，（shell体现）但是在python中不能这样写</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">+=</span>a   <span class="token comment">#相当于b = b + a</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">-=</span>a   <span class="token comment">#相当于b = b - a</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">*=</span>a   <span class="token comment">#相当于b = b * a</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较-逻辑运算符-1"><a href="#比较-逻辑运算符-1" class="headerlink" title="比较/逻辑运算符"></a><font size=4><strong>比较/逻辑运算符</strong></font></h3><p>数字，字符串，布尔值都可以比较，返回值是布尔值（==，!=，&gt;，&lt;，&gt;=，&lt;=）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token operator">></span> <span class="token boolean">False</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span>  <span class="token comment">#==如果两个变量取值相等，返回结果True，参考下文对比is</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span><span class="token number">1</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'abc'</span><span class="token operator">==</span><span class="token string">'abc'</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">!=</span><span class="token number">2</span><span class="token boolean">True</span><span class="token comment"># b = 1，b+=b>=1，b的值</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">+=</span>b<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token comment"># 字符串比较的是ascll码</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>   <span class="token comment">#ord()查看元素的ascll码</span><span class="token number">97</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token number">98</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token operator">&lt;</span> <span class="token string">'b'</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符-1"><a href="#逻辑运算符-1" class="headerlink" title="逻辑运算符"></a><font size=4><strong>逻辑运算符</strong></font></h3><p>（and两者都为真才是True，or有一个为真就是True，not双not抵消）（或or、与and、非not）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span> <span class="token keyword">and</span> <span class="token boolean">False</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span> <span class="token keyword">and</span> <span class="token boolean">True</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span> <span class="token keyword">or</span> <span class="token boolean">True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token boolean">True</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token boolean">True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">1</span>   <span class="token comment">#相当于True and True</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">and</span> <span class="token string">'c'</span>   <span class="token comment">#参考下文,理解：and  or</span><span class="token string">'c'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token string">'a'</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">or</span> <span class="token string">'b'</span><span class="token string">'a'</span><span class="token comment"># 对于int整形和float浮点型，0表示False，非0表示True</span><span class="token comment"># 对于str字符串类型，‘’空表示False，非空表示True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token number">0</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token string">''</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token string">'0'</span><span class="token boolean">False</span><span class="token comment"># 对于list列表，[]空列表是False，非空表示True</span><span class="token comment"># 对于tuple元组，set集合，dict字典；同样遵循列表的风格。空表示False，非空表示True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token comment"># 理解：and  or</span><span class="token comment"># 当计算机读到第一个数的时候，并不能给出结果。只有将全部的代码解析完，才能出结果。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">and</span> <span class="token string">'b'</span>   <span class="token comment">#非空都为True，但是会显示第二个（最后一个）代码（值）。</span><span class="token string">'b'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'b'</span> <span class="token keyword">and</span> <span class="token string">'a'</span><span class="token string">'a'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token string">'c'</span>   <span class="token comment">#0为False</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'c'</span> <span class="token keyword">and</span> <span class="token number">0</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'b'</span> <span class="token keyword">and</span> <span class="token string">'a'</span> <span class="token keyword">and</span> <span class="token string">'c'</span><span class="token string">'c'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>现实例子：</strong> 1 &gt; 0，计算机必须读到0的时候才会知道结果是True，读到1的时候不会有结果。<br><img src="/medias/drawing-bed/python5/4.jpg"></p><h3 id="or运算"><a href="#or运算" class="headerlink" title="or运算"></a><font size=4><strong>or运算</strong></font></h3><p><strong>区别：</strong> 因为or是有一个为真就返回True，所以它只需要读到第一个真就返回结果就行了。（避免计算资源浪费😊）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">3</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token keyword">or</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token boolean">False</span> <span class="token keyword">or</span> <span class="token string">'a'</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员运算符-1"><a href="#成员运算符-1" class="headerlink" title="成员运算符"></a><font size=4><strong>成员运算符</strong></font></h3><p>in，not in（list列表，tuple元组，str字符串，set集合，dict字典）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment">#判断a是否在list列表[1,2,3]中</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">in</span> a<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">+=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">in</span> a<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token operator">+=</span>b   <span class="token comment">#c = c + b，print(c) = 3</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token keyword">not</span> <span class="token keyword">in</span> a   <span class="token comment">#c是否不在list列表a中</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">'a'</span>   <span class="token comment">#字典dict</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">'c'</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>   <span class="token comment">#对于字典dict来说，成员运算符是判断的key:value中的key</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="身份运算符-1"><a href="#身份运算符-1" class="headerlink" title="身份运算符"></a><font size=4><strong>身份运算符</strong></font></h3><p>比较的是两个变量的身份是否相等（和==有区别，is比较的是内存地址）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">is</span> <span class="token string">'a'</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token number">1</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1.0</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token number">1.0</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token number">1270122593352</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">140728377594912</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment"># 这里是两个列表，所以显示False，记作lista 和 listb</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 这里是listb</span><span class="token number">1270130542216</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 这两次查询都是最后一个列表内存地址，这里也是listb</span><span class="token number">1270130542216</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment"># 这里变成了listc 和 listd</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 这里是listd的内存地址</span><span class="token number">1270133275656</span><span class="token comment"># a = &#123;1,2,3&#125;，b = &#123;2,1,3&#125;；求a == b，a is b。</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">==</span> b   <span class="token comment"># 集合set和字典dict是无序序列，所以顺序变化不影响取值（无序序列：dict&#123;&#125;字典，set&#123;&#125;集合，有序序列[]lise列表，()tuple元组，''str字符串）</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">is</span> b<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">1270133037096</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">is</span> b<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token keyword">is</span> c   <span class="token comment"># 变量赋值 比较的是 同一个变量，所以返回True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token keyword">is</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment"># 相同的集合set&#123;&#125;，dict字典&#123;&#125;，list列表[]，直接比较返回False，因为身份运算比较的内存地址</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment"># 验证两个[1,2]列表，内存地址是不同的。第二个[1,2]相当于一个新的list不是原来的了</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1270130541064</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1270130542216</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="type类型"><a href="#type类型" class="headerlink" title="type类型"></a><font size=4><strong>type类型</strong></font></h3><p>type类型判断</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'hello'</span>   <span class="token comment"># 把判断a的类型是不是str，返回True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>   <span class="token comment"># 判断a是不是str类型</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 判断a是否属于元组tuple()中的其中一个</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象的三个特征：</strong> id、value、type；<br><strong>对应判断方式：</strong> is（判断id）、==（判断value）、isinstance（判断type），（type类型判断，不能判断对象的子类型属于某一种类型，isinstance可以）<br><strong>位运算符：</strong> &amp;按位与、|按位或、^按位异或、~按位取反、&lt;&lt;左移动、&gt;&gt;右 移动</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">&amp;</span> b<span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token string">'0b10'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token string">'0b11'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与IP地址划分作类比。按位与&amp;，只有 同位值都为1 结果才是1。<br><img src="/medias/drawing-bed/python5/5.jpg"><br>按位或|，只要 同位值有一个为1 结果就是1。<br><img src="/medias/drawing-bed/python5/6.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ambari安装Hadoop</title>
      <link href="/posts/12fb.html"/>
      <url>/posts/12fb.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="Hadoop安装视频"><a href="#Hadoop安装视频" class="headerlink" title="Hadoop安装视频"></a><font size=5><strong>Hadoop安装视频</strong></font></h1><iframe height="600" width="800" src="//player.bilibili.com/player.html?aid=80560637&cid=137867649&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="ambari安装hadoop配置"><a href="#ambari安装hadoop配置" class="headerlink" title="ambari安装hadoop配置"></a><font size=5><strong>ambari安装hadoop配置</strong></font></h1><p>&emsp;&emsp;接上文ambari安装，利用其虚拟机分配master，slave，client。</p><table><thead><tr><th align="right">主机名</th><th align="center">IP</th><th align="center">内存</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="right">ambari.hadoop.com</td><td align="center">192.168.1.229</td><td align="center">4G+</td><td align="left">Hadoop集群管理工具</td></tr><tr><td align="right">master1.hadoop.com</td><td align="center">192.168.1.207</td><td align="center">8G+</td><td align="left">Hadoop集群master节点</td></tr><tr><td align="right">master2.hadoop.com</td><td align="center">192.168.1.208</td><td align="center">8G+</td><td align="left">Hadoop集群master节点</td></tr><tr><td align="right">master3.hadoop.com</td><td align="center">192.168.1.209</td><td align="center">8G+</td><td align="left">Hadoop集群master节点</td></tr><tr><td align="right">slave1.hadoop.com</td><td align="center">192.168.1.211</td><td align="center">4G+</td><td align="left">Hadoop集群slave节点</td></tr><tr><td align="right">slave2.hadoop.com</td><td align="center">192.168.1.212</td><td align="center">4G+</td><td align="left">Hadoop集群slave节点</td></tr><tr><td align="right">client.hadoop.com</td><td align="center">192.168.1.221</td><td align="center">4G+</td><td align="left">Hadoop集群client节点</td></tr><tr><td align="right">repo.hadoop.com</td><td align="center">192.168.1.228</td><td align="center">1G+</td><td align="left">Hadoop集群本地仓库</td></tr></tbody></table><h2 id="网页登录"><a href="#网页登录" class="headerlink" title="网页登录"></a><font size=4><strong>网页登录</strong></font></h2><p><img src="/medias/drawing-bed/hdp/0.jpg"></p><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a><font size=4><strong>创建集群</strong></font></h2><p><img src="/medias/drawing-bed/hdp/1.jpg"></p><h2 id="集群名"><a href="#集群名" class="headerlink" title="集群名"></a><font size=4><strong>集群名</strong></font></h2><p><img src="/medias/drawing-bed/hdp/2.jpg"></p><h2 id="选择版本，yum源"><a href="#选择版本，yum源" class="headerlink" title="选择版本，yum源"></a><font size=4><strong>选择版本，yum源</strong></font></h2><p>&emsp;&emsp;网速好的可以选择公共源，也可以本地搭建源，下载地址：</p><p><strong>注意：ambari2.7.5需要登录,并获得授权之后才能下载，ambari版本号 ≤ 2.7.4 的版本可以直接下载</strong><br>&emsp;&emsp;<strong>罗列RedHat|CentOS|Oracle Linux 7、amazonlinux 2、SLES 12、Ubuntu 14|16|18、Debian 9系统的下载地址</strong><br>&emsp;&emsp;可以在此选择hdp不同系统的安装源 <a href="https://docs.cloudera.com/HDPDocuments/Ambari-2.7.4.0/bk_ambari-installation/content/hdp_314_repositories.html">hdp_314</a><br>&emsp;&emsp;可以在此选择ambari不同系统的安装源 <a href="https://docs.cloudera.com/HDPDocuments/Ambari-2.7.4.0/bk_ambari-installation/content/ambari_repositories.html">ambari</a> </p><p>&emsp;&emsp;<strong>罗列ambari的版本</strong><br>&emsp;&emsp;可以在此选择ambari版本 <a href="https://docs.cloudera.com/HDPDocuments/Ambari/Ambari-2.7.4.0/index.html">Ambari-2.7.4</a> </p><p><strong>centos7版本直接下载</strong><br>&emsp;&emsp;直接下载 <a href="http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.7.4.0/ambari-2.7.4.0-centos7.tar.gz">Ambari-2.7.4.0</a><br>&emsp;&emsp;直接下载 <a href="http://public-repo-1.hortonworks.com/HDP/centos7/3.x/updates/3.1.4.0/HDP-3.1.4.0-centos7-rpm.tar.gz">HDP-3.1.4.0</a><br>&emsp;&emsp;直接下载 <a href="http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/centos7/HDP-UTILS-1.1.0.22-centos7.tar.gz">HDP-UTILS-1.1.0.22</a><br>&emsp;&emsp;直接下载 <a href="http://public-repo-1.hortonworks.com/HDP-GPL/centos7/3.x/updates/3.1.4.0/HDP-GPL-3.1.4.0-centos7-gpl.tar.gz">HDP-GPL-3.1.4.0</a></p><p><img src="/medias/drawing-bed/hdp/3.jpg"></p><h2 id="使用本地库，填入地址"><a href="#使用本地库，填入地址" class="headerlink" title="使用本地库，填入地址"></a><font size=4><strong>使用本地库，填入地址</strong></font></h2><p><img src="/medias/drawing-bed/hdp/5.jpg"></p><h2 id="选择安装的服务器，填入ambari服务器私钥"><a href="#选择安装的服务器，填入ambari服务器私钥" class="headerlink" title="选择安装的服务器，填入ambari服务器私钥"></a><font size=4><strong>选择安装的服务器，填入ambari服务器私钥</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.1.201  master1.hadoop.com<span class="token number">192.168</span>.1.202  master2.hadoop.com<span class="token number">192.168</span>.1.203  master3.hadoop.com<span class="token number">192.168</span>.1.204  slave1.hadoop.com<span class="token number">192.168</span>.1.205  slave2.hadoop.com<span class="token number">192.168</span>.1.206  client.hadoop.com<span class="token number">192.168</span>.1.207  repo.hadoop.com<span class="token number">192.168</span>.1.200  ambari.hadoop.com<span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># cat .ssh/id_rsa</span>-----BEGIN RSA PRIVATE KEY-----MIIEogIBAAKCAQEAlbnsR3q/iOaDdbTU5pvEyvnbtdYf3mZaT5JJAP6oFxNsGExjR+V5hLGAicW01oCidXBrlWOwlhTSh2BDjfaGkuz7fBS5hdpPDxE8a9/7se3oxLz8eXAHeJTc0w0dbaB2SriFcBDTjOpr+LjIuysDaMIa4oqOdJ7vXeZ6NZD+OvqmB3HQUf3UhQNvG/TSzikOQx7Ic0Qhax0bK2N9QDoMJpjihcCQB+iL+RqErj2GoAvais7FMWH0w7r4XwBAPnllTbMGnOJ1QqCpu6lgcvHKNu0i/9j92AHQ7iLv3X3b7ABXWj+sWhu4eWjhEStLxWndPdBRNTxshtcmw0SGOAbr2QIDAQABAoIBACj+twr7OOYq92OLF5/sln1c3CN1dVRXgfK3gvWaxDtNPhOJFsXgttz2HNOcJl906QZuuYY1vWvaV6ppWRXNohsod9MJeaKEm5DsjzaaJTgag9kaRaaaXfFOEQhYVu5lOP5Md3yvnry+ksGPFqboqA5O1z2f4lFcEv4K1PtFr9ZFz2mW/rx5JAoJ/kyS8Ue221ExSDzfzv1dV4RjPNIBNr1VsXeBV1NiCdc37m2BzdnuuxRJPyCiiY5Y6EMGfHnw6M/Q7I4IVSV7oEuk+iFi9UL58V2e6jZudMtEn/jgaN1y4lum3GFvGrfUcZAlRwWcPpezsf6Lc+KaqKkckgX03AECgYEAxJ6WgjKpubv+ABH8fqn0lchL9Y5+IHUZt9D3VwVAgfRhStN5C94aSw6zVvkVVoY35sQQi5MmJeHQqt2sZUifvxlzYF3voR1UGZtK08sk9i3CC669fu8M0tbd8glHwHf64Q8vZrALDLtPUDvQtup2/UkRcicrN6uv+rOmDGPuYtECgYEAwvHWvDYK8CsW5Cjh4AfIr5rxgVCg2v69WuH5FhAWv0nkv8wIiBcuvEZ7pFQG0C0ND7IjLxdOCcMtqTY++eJe6smfr9kSgyR9Nxz7+GuUWg6odg2moEZO4hqPIbPKzClTMHb8wUQYQi9U5Ry0EtEWMjCEwORUvQtWfZy6DSNR6okCgYAsAkcz+z0MKqzuvRfkDgyF3iBKZUuL3koUX7yNCMroi5efVPg6FMuT00WHCReil0Y569a8NwKJ5iJ7rERjIz9GWd7+SehSCquBU8YK4+RxCcruLH2TxNP8+UUSYMtjpDdOWsTEWlEO13ooPks4NgDOLqWuBGBjBJXOKpnXGiMIkQKBgBYjBDFnKaLQIc9S3SNlfuKCA76de0ai+rmhQ3m/5fVe3Lzy3F0n1MTIdC3a5NMq6nrHzbsBOHlfUoYOhOQ3UnPy5VFAoxuFPzrM7cft33DCjVqqfithEIAYZ/x5wCOi5bFxMY54vxB083z433HrkEuuusR0qTK2YOHutCndwuWRAoGANJx6rxBlwjfJuoLWoFdPWpx3hxpOY+kHoSWTd6wnpnJgE06zg5KFXutVYVqJF8OYLunxq+5uj4ao4bbWrTO+zE4ui2yxsYRjgJoLUlzvxRdJ3hWhI8IC82Jw+dm9DB2ST+lYHdfUMl5h6ZrFOeyhTVrfIXUNhy8jCD0DvxX9vCA<span class="token operator">=</span>-----END RSA PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/hdp/6.jpg"></p><h2 id="等待ambari-agent安装和注册"><a href="#等待ambari-agent安装和注册" class="headerlink" title="等待ambari-agent安装和注册"></a><font size=4><strong>等待ambari-agent安装和注册</strong></font></h2><p><img src="/medias/drawing-bed/hdp/7.jpg"></p><h2 id="全部Success就OK"><a href="#全部Success就OK" class="headerlink" title="全部Success就OK"></a><font size=4><strong>全部Success就OK</strong></font></h2><p><img src="/medias/drawing-bed/hdp/8.jpg"></p><h1 id="选择自己需要的组件安装"><a href="#选择自己需要的组件安装" class="headerlink" title="选择自己需要的组件安装"></a><font size=5><strong>选择自己需要的组件安装</strong></font></h1><p>&emsp;&emsp;减少不必要的组件，提高安装成功率<br><img src="/medias/drawing-bed/hdp/9.jpg"></p><h2 id="手动把组件均匀分配给maser1-2-3三台服务器"><a href="#手动把组件均匀分配给maser1-2-3三台服务器" class="headerlink" title="手动把组件均匀分配给maser1|2|3三台服务器"></a><font size=4><strong>手动把组件均匀分配给maser1|2|3三台服务器</strong></font></h2><p><img src="/medias/drawing-bed/hdp/10.jpg"></p><h2 id="master-slave-client节点安装分配"><a href="#master-slave-client节点安装分配" class="headerlink" title="master|slave|client节点安装分配"></a><font size=4><strong>master|slave|client节点安装分配</strong></font></h2><p>&emsp;&emsp;master节点不勾选，slave节点不勾选client其中ranger tagsync只能勾选一个，client节点只勾选client即可，注意看红框。<br><img src="/medias/drawing-bed/hdp/11.jpg"></p><h2 id="填入密码，自己设置即可"><a href="#填入密码，自己设置即可" class="headerlink" title="填入密码，自己设置即可"></a><font size=4><strong>填入密码，自己设置即可</strong></font></h2><p><img src="/medias/drawing-bed/hdp/12.jpg"><br><strong><font color=red>此段主机ambari.hadoop.com</font></strong></p><h1 id="这里要安装MySQL数据库"><a href="#这里要安装MySQL数据库" class="headerlink" title="这里要安装MySQL数据库"></a><font size=5><strong>这里要安装MySQL数据库</strong></font></h1><p><img src="/medias/drawing-bed/hdp/13.jpg"></p><h2 id="数据库的yum源"><a href="#数据库的yum源" class="headerlink" title="数据库的yum源"></a><font size=4><strong>数据库的yum源</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># cat > /etc/yum.repos.d/mariadb.repo &lt;&lt; EOF</span><span class="token punctuation">[</span>mariadb<span class="token punctuation">]</span>name <span class="token operator">=</span> MariaDBbaseurl <span class="token operator">=</span> https://mirrors.ustc.edu.cn/mariadb/yum/10.2/centos7-amd64<span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/hdp/14.jpg"></p><h2 id="安装启动数据库"><a href="#安装启动数据库" class="headerlink" title="安装启动数据库"></a><font size=4><strong>安装启动数据库</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># yum install MariaDB-client MariaDB-server MariaDB-devel -y</span><span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable mariadb</span><span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># systemctl start mariadb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/hdp/15.jpg"></p><h2 id="授权信息"><a href="#授权信息" class="headerlink" title="授权信息"></a><font size=4><strong>授权信息</strong></font></h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> hive<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">database</span> ranger<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'ambari.hadoop.com'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'hive'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'hive'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'hive'</span><span class="token variable">@'ambari.hadoop.com'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'rangeradmin'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'rangeradmin'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'rangeradmin'</span><span class="token variable">@'ambari.hadoop.com'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'hdp121212'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/hdp/16.jpg"></p><h2 id="jdbc工具配置"><a href="#jdbc工具配置" class="headerlink" title="jdbc工具配置"></a><font size=4><strong>jdbc工具配置</strong></font></h2><p><img src="/medias/drawing-bed/hdp/17.jpg"></p><h2 id="修改数据库地址，填入密码，测试通过即可"><a href="#修改数据库地址，填入密码，测试通过即可" class="headerlink" title="修改数据库地址，填入密码，测试通过即可"></a><font size=4><strong>修改数据库地址，填入密码，测试通过即可</strong></font></h2><p><img src="/medias/drawing-bed/hdp/18.jpg"></p><h2 id="新手不建议配置直接下一步即可"><a href="#新手不建议配置直接下一步即可" class="headerlink" title="新手不建议配置直接下一步即可"></a><font size=4><strong>新手不建议配置直接下一步即可</strong></font></h2><p><img src="/medias/drawing-bed/hdp/19.jpg"><br><img src="/medias/drawing-bed/hdp/20.jpg"><br><img src="/medias/drawing-bed/hdp/21.jpg"></p><h1 id="下载保存配置文件"><a href="#下载保存配置文件" class="headerlink" title="下载保存配置文件"></a><font size=5><strong>下载保存配置文件</strong></font></h1><p><img src="/medias/drawing-bed/hdp/22.jpg"></p><h2 id="等待加载完成"><a href="#等待加载完成" class="headerlink" title="等待加载完成"></a><font size=4><strong>等待加载完成</strong></font></h2><p><img src="/medias/drawing-bed/hdp/23.jpg"></p><h2 id="等待安装完成，全部成功即可"><a href="#等待安装完成，全部成功即可" class="headerlink" title="等待安装完成，全部成功即可"></a><font size=4><strong>等待安装完成，全部成功即可</strong></font></h2><p><img src="/medias/drawing-bed/hdp/24.jpg"></p><h1 id="尝试排错重新启动"><a href="#尝试排错重新启动" class="headerlink" title="尝试排错重新启动"></a><font size=4><strong>尝试排错重新启动</strong></font></h1><p>&emsp;&emsp;经常出错，耐心排错吧😄<br>少安装一些不用的组件、内存大一些、防火墙关闭、selinux关闭、拍摄快照、ambari-server主机免密登录ambari-agent主机即可、等等，重试几次。多次尝试后报同一个错误请留言或百度解决😘。<br><img src="/medias/drawing-bed/hdp/25.jpg"></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>breeze安装</title>
      <link href="/posts/4902.html"/>
      <url>/posts/4902.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a><font size=5><strong>约定</strong></font></h1><p><strong>系统要求:</strong><br>&emsp;&emsp;部署机: docker 1.13.1+ and docker-compose 1.12.0+ .<br>&emsp;&emsp;Kubernetes集群节点: 兼容CentOS 7.4|5|6|7 及 Ubuntu 16|18 版本，Minimal安装，应尽可能保证系统的干净。</p><h1 id="breeze安装视频"><a href="#breeze安装视频" class="headerlink" title="breeze安装视频"></a><font size=5><strong>breeze安装视频</strong></font></h1><iframe height="600" width="800" src="//player.bilibili.com/player.html?aid=80624149&cid=137977035&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="breeze安装环境配置"><a href="#breeze安装环境配置" class="headerlink" title="breeze安装环境配置"></a><font size=5><strong>breeze安装环境配置</strong></font></h1><p>&emsp;&emsp;接上文esxi安装，利用其虚拟化出多个虚拟机。</p><table><thead><tr><th align="right">主机名</th><th align="center">IP</th><th align="center">内存</th><th align="center">角色</th><th align="left">组件</th></tr></thead><tbody><tr><td align="right">deploy</td><td align="center">192.168.1.220</td><td align="center">4G+</td><td align="center">Breeze Deploy</td><td align="left">docker/docker-compose/Breeze</td></tr><tr><td align="right">master01</td><td align="center">192.168.1.221</td><td align="center">4G+</td><td align="center">K8S Master Node</td><td align="left">K8S Master/etcd/HAProxy/Keepalived</td></tr><tr><td align="right">master02</td><td align="center">192.168.1.222</td><td align="center">4G+</td><td align="center">K8S Master Node</td><td align="left">K8S Master/etcd/HAProxy/Keepalived</td></tr><tr><td align="right">master03</td><td align="center">192.168.1.223</td><td align="center">4G+</td><td align="center">K8S Master Node</td><td align="left">K8S Master/etcd/HAProxy/Keepalived</td></tr><tr><td align="right">worker01</td><td align="center">192.168.1.224</td><td align="center">4G+</td><td align="center">K8S Worker Node</td><td align="left">K8S Worker/Prometheus</td></tr><tr><td align="right">harbor</td><td align="center">192.168.1.225</td><td align="center">4G+</td><td align="center">Harbor</td><td align="left">Harbor 1.7.0</td></tr><tr><td align="right"></td><td align="center">192.168.1.226</td><td align="center"></td><td align="center">VIP</td><td align="left">HA虚IP地址在3台K8S Master浮动</td></tr></tbody></table><h2 id="创建6台虚拟机"><a href="#创建6台虚拟机" class="headerlink" title="创建6台虚拟机"></a><font size=4><strong>创建6台虚拟机</strong></font></h2><p><img src="/medias/drawing-bed/breeze/0.jpg"></p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a><font size=4><strong>安装系统</strong></font></h2><p><img src="/medias/drawing-bed/breeze/1.jpg"></p><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a><font size=4><strong>配置防火墙</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># setenforce 0 </span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># sed --follow-symlinks -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config </span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --set-default-zone=trusted </span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --complete-reload </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/breeze/2.jpg"></p><h1 id="导入下载好的镜像"><a href="#导入下载好的镜像" class="headerlink" title="导入下载好的镜像"></a><font size=5><strong>导入下载好的镜像</strong></font></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># docker-compose up -d   # 这个以后执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/drawing-bed/breeze/3.jpg"></p><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a><font size=5><strong>安装docker-compose</strong></font></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose </span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># chmod +x /usr/local/bin/docker-compose </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装docker-io"><a href="#安装docker-io" class="headerlink" title="安装docker-io"></a><font size=4><strong>安装docker-io</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># yum install docker </span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable docker &amp;&amp; systemctl start docker </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/breeze/4.jpg"></p><h2 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a><font size=4><strong>下载镜像文件</strong></font></h2><p>&emsp;&emsp;最新为breeze/v1.17.0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># curl -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.17.0/docker-compose.yml o docker-compose.yml </span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># docker-compose up -d   # 下载好之后可以备份迁移，下面我就是这么做的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="导入下载好的镜像文件"><a href="#导入下载好的镜像文件" class="headerlink" title="导入下载好的镜像文件"></a><font size=4><strong>导入下载好的镜像文件</strong></font></h2><p><img src="/medias/drawing-bed/breeze/5.jpg"></p><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a><font size=4><strong>免密登录</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen </span> <span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.1.221:</span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.1.222:</span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.1.223:</span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.1.224:</span><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.1.225:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/breeze/6.jpg"></p><h2 id="导入完成，启动"><a href="#导入完成，启动" class="headerlink" title="导入完成，启动"></a><font size=4><strong>导入完成，启动</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@deploy ~<span class="token punctuation">]</span><span class="token comment"># docker-compose up -d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/drawing-bed/breeze/7.jpg"></p><h1 id="配置hosts文件"><a href="#配置hosts文件" class="headerlink" title="配置hosts文件"></a><font size=5><strong>配置hosts文件</strong></font></h1><p><img src="/medias/drawing-bed/breeze/8.jpg"></p><h2 id="访问220-88开始安装"><a href="#访问220-88开始安装" class="headerlink" title="访问220:88开始安装"></a><font size=4><strong>访问220:88开始安装</strong></font></h2><p><img src="/medias/drawing-bed/breeze/9.jpg"></p><h2 id="填写集群名"><a href="#填写集群名" class="headerlink" title="填写集群名"></a><font size=4><strong>填写集群名</strong></font></h2><p><img src="/medias/drawing-bed/breeze/10.jpg"></p><h2 id="创建完成打开"><a href="#创建完成打开" class="headerlink" title="创建完成打开"></a><font size=4><strong>创建完成打开</strong></font></h2><p><img src="/medias/drawing-bed/breeze/11.jpg"></p><h2 id="增加主机"><a href="#增加主机" class="headerlink" title="增加主机"></a><font size=4><strong>增加主机</strong></font></h2><p><img src="/medias/drawing-bed/breeze/12.jpg"></p><h2 id="完成后如下"><a href="#完成后如下" class="headerlink" title="完成后如下"></a><font size=4><strong>完成后如下</strong></font></h2><p><img src="/medias/drawing-bed/breeze/13.jpg"></p><h2 id="增加组件"><a href="#增加组件" class="headerlink" title="增加组件"></a><font size=4><strong>增加组件</strong></font></h2><p><img src="/medias/drawing-bed/breeze/14.jpg"></p><h2 id="全部配置如下"><a href="#全部配置如下" class="headerlink" title="全部配置如下"></a><font size=4><strong>全部配置如下</strong></font></h2><p><img src="/medias/drawing-bed/breeze/15.jpg"></p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a><font size=5><strong>开始安装</strong></font></h1><p><img src="/medias/drawing-bed/breeze/16.jpg"></p><h1 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a><font size=5><strong>安装完成</strong></font></h1><p><img src="/medias/drawing-bed/breeze/17.jpg"><br><img src="/medias/drawing-bed/breeze/18.jpg"><br>接下来就是到服务器上去使用啦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">验证： <span class="token punctuation">[</span>root@worker01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get cs </span><span class="token punctuation">[</span>root@worker01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get csr </span><span class="token punctuation">[</span>root@worker01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes -o wide </span><span class="token punctuation">[</span>root@worker01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl -n kube-system get pods </span><span class="token punctuation">[</span>root@worker01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl -n monitoring get pods </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Grafana: <a href="http://node:30902/">http://node:30902</a><br>Prometheus: <a href="http://node:30900/">http://node:30900</a><br>Alertmanager: <a href="http://node:30903/">http://node:30903</a></p><p><strong>ERR：</strong><br>&emsp;&emsp;点击创建无反应，切换浏览器急速模式or换浏览器。</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ambari安装</title>
      <link href="/posts/252c.html"/>
      <url>/posts/252c.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="ambari安装视频"><a href="#ambari安装视频" class="headerlink" title="ambari安装视频"></a><font size=5><strong>ambari安装视频</strong></font></h1><iframe height="600" width="800" src="//player.bilibili.com/player.html?aid=80163134&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="ambari安装环境配置"><a href="#ambari安装环境配置" class="headerlink" title="ambari安装环境配置"></a><font size=5><strong>ambari安装环境配置</strong></font></h1><p>&emsp;&emsp;接上文esxi安装，利用其虚拟化出多个虚拟机。</p><table><thead><tr><th align="right">主机名</th><th align="center">IP</th><th align="center">内存</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="right">ambari.hadoop.com</td><td align="center">192.168.1.229</td><td align="center">4G+</td><td align="left">Hadoop集群管理工具</td></tr><tr><td align="right">master1.hadoop.com</td><td align="center">192.168.1.207</td><td align="center">8G+</td><td align="left">Hadoop集群master节点</td></tr><tr><td align="right">master2.hadoop.com</td><td align="center">192.168.1.208</td><td align="center">8G+</td><td align="left">Hadoop集群master节点</td></tr><tr><td align="right">master3.hadoop.com</td><td align="center">192.168.1.209</td><td align="center">8G+</td><td align="left">Hadoop集群master节点</td></tr><tr><td align="right">slave1.hadoop.com</td><td align="center">192.168.1.211</td><td align="center">4G+</td><td align="left">Hadoop集群slave节点</td></tr><tr><td align="right">slave2.hadoop.com</td><td align="center">192.168.1.212</td><td align="center">4G+</td><td align="left">Hadoop集群slave节点</td></tr><tr><td align="right">client.hadoop.com</td><td align="center">192.168.1.221</td><td align="center">4G+</td><td align="left">Hadoop集群client节点</td></tr><tr><td align="right">repo.hadoop.com</td><td align="center">192.168.1.228</td><td align="center">1G+</td><td align="left">Hadoop集群本地仓库</td></tr></tbody></table><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a><font size=4><strong>创建虚拟机</strong></font></h2><p><img src="/medias/drawing-bed/ambari/0.jpg"></p><h2 id="虚拟机名-amp-系统"><a href="#虚拟机名-amp-系统" class="headerlink" title="虚拟机名&amp;系统"></a><font size=4><strong>虚拟机名&amp;系统</strong></font></h2><p><img src="/medias/drawing-bed/ambari/1.jpg"></p><h2 id="虚拟机安装位置"><a href="#虚拟机安装位置" class="headerlink" title="虚拟机安装位置"></a><font size=4><strong>虚拟机安装位置</strong></font></h2><p><img src="/medias/drawing-bed/ambari/2.jpg"></p><h3 id="选择CPU热添加"><a href="#选择CPU热添加" class="headerlink" title="选择CPU热添加"></a><font size=3><strong>选择CPU热添加</strong></font></h3><p><img src="/medias/drawing-bed/ambari/3.jpg"></p><h3 id="选择CPU虚拟化"><a href="#选择CPU虚拟化" class="headerlink" title="选择CPU虚拟化"></a><font size=3><strong>选择CPU虚拟化</strong></font></h3><p><img src="/medias/drawing-bed/ambari/4.jpg"></p><h3 id="设置RAM大小，启用内存热插拔"><a href="#设置RAM大小，启用内存热插拔" class="headerlink" title="设置RAM大小，启用内存热插拔"></a><font size=3><strong>设置RAM大小，启用内存热插拔</strong></font></h3><p><img src="/medias/drawing-bed/ambari/5.jpg"></p><h2 id="选择系统盘大小40G"><a href="#选择系统盘大小40G" class="headerlink" title="选择系统盘大小40G+"></a><font size=4><strong>选择系统盘大小40G+</strong></font></h2><p><img src="/medias/drawing-bed/ambari/6.jpg"></p><h2 id="选择上载的ISO文件"><a href="#选择上载的ISO文件" class="headerlink" title="选择上载的ISO文件"></a><font size=4><strong>选择上载的ISO文件</strong></font></h2><p><img src="/medias/drawing-bed/ambari/7.jpg"></p><h2 id="双击红色框区域，和VMware安装一样"><a href="#双击红色框区域，和VMware安装一样" class="headerlink" title="双击红色框区域，和VMware安装一样"></a><font size=4><strong>双击红色框区域，和VMware安装一样</strong></font></h2><p><img src="/medias/drawing-bed/ambari/8.jpg"></p><h1 id="全部安装完记得右键拍摄快照，记好快照备注"><a href="#全部安装完记得右键拍摄快照，记好快照备注" class="headerlink" title="全部安装完记得右键拍摄快照，记好快照备注"></a><font size=5><strong>全部安装完记得右键拍摄快照，记好快照备注</strong></font></h1><p><img src="/medias/drawing-bed/ambari/9.jpg"><br><strong><font color=red>此段主机repo.hadoop.com</font></strong></p><h1 id="repo机器安装apache服务"><a href="#repo机器安装apache服务" class="headerlink" title="repo机器安装apache服务"></a><font size=5><strong>repo机器安装apache服务</strong></font></h1><p><img src="/medias/drawing-bed/ambari/10.jpg"></p><h2 id="上传下载好的ambari-HDP库"><a href="#上传下载好的ambari-HDP库" class="headerlink" title="上传下载好的ambari-HDP库"></a><font size=4><strong>上传下载好的ambari-HDP库</strong></font></h2><p>&emsp;&emsp;<strong>参考ambari安装hdp-链接</strong><br><img src="/medias/drawing-bed/ambari/11.jpg"><br><strong><font color=red>此段结束</font></strong></p><h2 id="repo仓库配置"><a href="#repo仓库配置" class="headerlink" title="repo仓库配置"></a><font size=4><strong>repo仓库配置</strong></font></h2><p>&emsp;&emsp;<strong>一定要修改脚本,为自己可用,下面有写在优化脚本中,本段可忽略</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@repo ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/yum.repos.d/ambari.repo</span><span class="token punctuation">[</span>ambari<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>ambari<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://192.168.1.200/ambari/centos7/2.7.3.0-139/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>HDP<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>HDP<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://192.168.1.200/HDP/centos7/3.1.0.0-78/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>HDP-UTILS<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>HDP-UTILS<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://192.168.1.200/HDP-UTILS/centos7/1.1.0.22/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="jdk配置"><a href="#jdk配置" class="headerlink" title="jdk配置"></a><font size=5><strong>jdk配置</strong></font></h1><p>&emsp;&emsp;<strong>一定要修改脚本,为自己可用,下面有写在优化脚本中,本段可忽略</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O /opt/jdk-8u151-linux-x64.tar.gz http://192.168.1.200/jdk-8u151-linux-x64.tar.gz<span class="token builtin class-name">cd</span> /opt <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> xf jdk-8u151-linux-x64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/profile <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=/opt/jdk1.8.0_151/export PATH=<span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>export CLASSPATH=.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarEOF</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一些脚本"><a href="#一些脚本" class="headerlink" title="一些脚本"></a><font size=5><strong>一些脚本</strong></font></h1><h2 id="免交互生成密钥-amp-密钥分发"><a href="#免交互生成密钥-amp-密钥分发" class="headerlink" title="免交互生成密钥 &amp; 密钥分发"></a><font size=4><strong>免交互生成密钥 &amp; 密钥分发</strong></font></h2><p><strong><font color=red>此段主机ambari.hadoop.com</font></strong></p><p>&emsp;&emsp;<strong>一定要修改脚本,为自己可用</strong></font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 安装密钥生成工具和批量处理工具</span>yum -y <span class="token function">install</span> <span class="token function">expect</span> sshpass<span class="token comment"># 无交互生成密钥</span>spawn ssh-keygen<span class="token function">expect</span> <span class="token punctuation">&#123;</span>        <span class="token string">"*(~/.ssh/id_rsa)"</span> <span class="token punctuation">&#123;</span>send <span class="token string">"<span class="token entity" title="\r">\r</span>"</span><span class="token punctuation">;</span>exp_continue<span class="token punctuation">&#125;</span>        <span class="token string">"*(empty for no passphrase)"</span> <span class="token punctuation">&#123;</span>send <span class="token string">"<span class="token entity" title="\r">\r</span>"</span><span class="token punctuation">;</span>exp_continue<span class="token punctuation">&#125;</span>        <span class="token string">"*again"</span> <span class="token punctuation">&#123;</span>send <span class="token string">"<span class="token entity" title="\r">\r</span>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">expect</span> eof<span class="token comment"># 批量分发</span><span class="token comment">#for ip in $*</span><span class="token keyword">for</span> <span class="token for-or-select variable">ip</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">101</span> <span class="token number">111</span><span class="token variable">)</span></span><span class="token keyword">do</span>  <span class="token function">ping</span> <span class="token number">192.168</span>.1.<span class="token variable">$ip</span> -c1 <span class="token operator">&amp;></span>/dev/null   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -gt <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"192.168.1.<span class="token variable">$ip</span>无法ping通请检查网络"</span>     <span class="token builtin class-name">continue</span>  <span class="token keyword">fi</span>  sshpass -p <span class="token string">"pass@word1"</span> ssh-copy-id -o <span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>no root@192.168.1.<span class="token variable">$ip</span> <span class="token operator">&amp;></span>/dev/null  <span class="token builtin class-name">echo</span> <span class="token string">"192.168.1.<span class="token variable">$ip</span> 密钥分发成功"</span><span class="token keyword">done</span><span class="token comment">################################</span><span class="token comment">#1.使用ssh连接远程主机时加上"-o StrictHostKeyChecking=no"的选项，如下：（推荐！！！）</span><span class="token comment">#做法是使用-o 这个参数，在ssh/scp里加上 -o "StrictHostKeyChecking no" 即可跳过这个yes/no询问，直接进入下一步，例：</span><span class="token comment">#Use the -o option：</span><span class="token comment">#scp -o "StrictHostKeyChecking no" 1.txt user@host:1.txt </span><span class="token comment">#ssh -o "StrictHostKeyChecking no" user@host</span><span class="token comment">#2.一个彻底去掉这个提示的方法是，修改当前主机/etc/ssh/ssh_config文件（或$HOME/.ssh/config）中的配置，添加如下两行配置：</span><span class="token comment">#源为：StrictHostKeyChecking ask</span><span class="token comment">#改为：StrictHostKeyChecking no</span><span class="token comment">#################################</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 执行bash 当前脚本 IP1 IP2 IP3...,输入的IP会传给$*</span><span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">passWord</span><span class="token operator">=</span>pass@word1<span class="token keyword">for</span> <span class="token for-or-select variable">ip</span> <span class="token keyword">in</span> <span class="token variable">$*</span><span class="token keyword">do</span>    <span class="token function">ping</span> <span class="token number">192.168</span>.1.<span class="token variable">$ip</span> -c1 <span class="token operator">&amp;></span>/dev/null     <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -gt <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$ip</span>无法ping通请检查网络"</span>         <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span><span class="token comment">#    sshpass -p "$passWord" ssh-copy-id -i ~/.ssh/id_dsa.pub "-o StrictHostKeyChecking=no $&#123;User&#125;@$ip" &amp;>/dev/null</span><span class="token comment">#    echo "$ip 密钥分发成功"</span>     <span class="token builtin class-name">echo</span> <span class="token string">"192.168.1.<span class="token variable">$ip</span> ok"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=red>此段结束</font></strong></p><h2 id="安装系统-优化脚本"><a href="#安装系统-优化脚本" class="headerlink" title="安装系统,优化脚本"></a><font size=4><strong>安装系统,优化脚本</strong></font></h2><p>&emsp;&emsp;<strong>一定要修改脚本,为自己可用</strong><br>将脚本分发给所有主机并执行.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#Yum源更换为国内阿里源</span>yum <span class="token function">install</span> <span class="token function">wget</span> telnet -y<span class="token builtin class-name">cd</span> /etc/yum.repos.d/<span class="token function">mkdir</span> repo_old<span class="token function">mv</span> *.repo repo_old/<span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span class="token comment">#添加阿里的epel源</span><span class="token function">wget</span> -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<span class="token comment">#添加ambari本地源</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/yum.repos.d/ambari.repo <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[ambari]name=ambaribaseurl=http://192.168.1.200/ambari/centos7/2.7.3.0-139/gpgcheck=0enabled=1[HDP]name=HDPbaseurl=http://192.168.1.200/HDP/centos7/3.1.0.0-78/gpgcheck=0enabled=1[HDP-UTILS]name=HDP-UTILSbaseurl=http://192.168.1.200/HDP-UTILS/centos7/1.1.0.22/gpgcheck=0enabled=1EOF</span><span class="token comment">#修改hosts文件</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/hosts <span class="token operator">&lt;&lt;</span> <span class="token string">EOF192.168.1.101  master1.hadoop.com192.168.1.102  master2.hadoop.com192.168.1.103  master3.hadoop.com192.168.1.104  slave1.hadoop.com192.168.1.105  slave2.hadoop.com192.168.1.108  client.hadoop.com192.168.1.110  ambari.hadoop.comEOF</span><span class="token comment">#yum重新建立缓存</span>yum clean allyum makecache<span class="token comment">#同步时间</span>yum -y <span class="token function">install</span> ntp/usr/sbin/ntpdate cn.pool.ntp.org<span class="token builtin class-name">echo</span> <span class="token string">"* 4 * * * /usr/sbin/ntpdate cn.pool.ntp.org > /dev/null 2>&amp;1"</span> <span class="token operator">>></span> /var/spool/cron/rootsystemctl  restart crond.service<span class="token comment">#安装vim</span>yum -y <span class="token function">install</span> <span class="token function">vim</span><span class="token comment">#设置最大打开文件描述符数</span><span class="token builtin class-name">echo</span> <span class="token string">"ulimit -SHn 102400"</span> <span class="token operator">>></span> /etc/rc.local<span class="token function">cat</span> <span class="token operator">>></span> /etc/security/limits.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF*           soft   nofile       655350*           hard   nofile       655350EOF</span><span class="token comment">#禁用selinux &amp; firewalld</span><span class="token function">sed</span> -i <span class="token string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/configsetenforce <span class="token number">0</span>systemctl disable firewalld.service systemctl stop firewalld.service <span class="token comment">#ssh设置</span><span class="token comment">#sed -i 's/^GSSAPIAuthentication yes$/GSSAPIAuthentication no/' /etc/ssh/sshd_config</span><span class="token comment">#sed -i 's/#UseDNS yes/UseDNS no/' /etc/ssh/sshd_config</span><span class="token comment">#systemctl  restart sshd.service</span><span class="token comment">#内核参数优化</span><span class="token comment">#cat >> /etc/sysctl.conf &lt;&lt; EOF</span><span class="token comment">#vm.overcommit_memory = 1</span><span class="token comment">#net.ipv4.tcp_fin_timeout = 1</span><span class="token comment">#net.ipv4.tcp_keepalive_time = 1200</span><span class="token comment">#net.ipv4.tcp_mem = 94500000 915000000 927000000</span><span class="token comment">#net.ipv4.tcp_tw_reuse = 1</span><span class="token comment">#net.ipv4.tcp_tw_recycle = 1</span><span class="token comment">#net.ipv4.tcp_timestamps = 0</span><span class="token comment">#net.ipv4.tcp_synack_retries = 1</span><span class="token comment">#net.ipv4.tcp_syn_retries = 1</span><span class="token comment">#net.ipv4.tcp_abort_on_overflow = 0</span><span class="token comment">#net.core.rmem_max = 16777216</span><span class="token comment">#net.core.wmem_max = 16777216</span><span class="token comment">#net.core.netdev_max_backlog = 262144</span><span class="token comment">#net.ipv4.tcp_max_orphans = 3276800</span><span class="token comment">#net.ipv4.tcp_max_syn_backlog = 262144</span><span class="token comment">#net.core.wmem_default = 8388608</span><span class="token comment">#net.core.rmem_default = 8388608</span><span class="token comment">#EOF</span><span class="token comment">#/sbin/sysctl -p</span><span class="token comment"># jdk 配置</span><span class="token function">wget</span> -O /opt/jdk-8u151-linux-x64.tar.gz http://192.168.1.200/jdk-8u151-linux-x64.tar.gz<span class="token builtin class-name">cd</span> /opt <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> xf jdk-8u151-linux-x64.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/profile <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JAVA_HOME=/opt/jdk1.8.0_151/export PATH=<span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>export CLASSPATH=.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarEOF</span><span class="token comment">#vim定义退格键可删除最后一个字符类型</span><span class="token builtin class-name">echo</span> <span class="token string">'alias vi=vim'</span> <span class="token operator">>></span> /etc/profile<span class="token builtin class-name">echo</span> <span class="token string">'stty erase ^H'</span> <span class="token operator">>></span> /etc/profile<span class="token function">cat</span> <span class="token operator">>></span> /root/.vimrc <span class="token operator">&lt;&lt;</span> <span class="token string">EOFset tabstop=4set shiftwidth=4set expandtabsyntax onset numberEOF</span><span class="token comment">#update soft</span><span class="token comment">#yum -y update</span><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ambari安装"><a href="#ambari安装" class="headerlink" title="ambari安装"></a><font size=5><strong>ambari安装</strong></font></h1><p><strong><font color=red>此段在ambari.hadoop.com</font></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># yum install ambari-server -y</span><span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># ambari-server setup</span>Using python  /usr/bin/pythonSetup ambari-serverChecking SELinux<span class="token punctuation">..</span>.SELinux status is <span class="token string">'disabled'</span>Customize user account <span class="token keyword">for</span> ambari-server daemon <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>? yEnter user account <span class="token keyword">for</span> ambari-server daemon <span class="token punctuation">(</span>root<span class="token punctuation">)</span>:rootAdjusting ambari-server permissions and ownership<span class="token punctuation">..</span>.Checking firewall status<span class="token punctuation">..</span>.Checking JDK<span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Oracle JDK <span class="token number">1.8</span> + Java Cryptography Extension <span class="token punctuation">(</span>JCE<span class="token punctuation">)</span> Policy Files <span class="token number">8</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Custom JDK<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Enter choice <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>: <span class="token number">2</span>WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.WARNING: JCE Policy files are required <span class="token keyword">for</span> configuring Kerberos security. If you plan to use Kerberos,please <span class="token function">make</span> sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.Path to JAVA_HOME: /opt/jdk1.8.0_151/Validating JDK on Ambari Server<span class="token punctuation">..</span>.done.Check JDK version <span class="token keyword">for</span> Ambari Server<span class="token punctuation">..</span>.JDK version found: <span class="token number">8</span>Minimum JDK version is <span class="token number">8</span> <span class="token keyword">for</span> Ambari. Skipping to setup different JDK <span class="token keyword">for</span> Ambari Server.Checking GPL software agreement<span class="token punctuation">..</span>.GPL License <span class="token keyword">for</span> LZO: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.htmlEnable Ambari Server to download and <span class="token function">install</span> GPL Licensed LZO packages <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>? Completing setup<span class="token punctuation">..</span>.Configuring database<span class="token punctuation">..</span>.Enter advanced database configuration <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>? Configuring database<span class="token punctuation">..</span>.Default properties detected. Using built-in database.Configuring ambari database<span class="token punctuation">..</span>.Checking PostgreSQL<span class="token punctuation">..</span>.Running initdb: This may take up to a minute.Initializing database <span class="token punctuation">..</span>. OKAbout to start PostgreSQLConfiguring <span class="token builtin class-name">local</span> database<span class="token punctuation">..</span>.Configuring PostgreSQL<span class="token punctuation">..</span>.Restarting PostgreSQLCreating schema and user<span class="token punctuation">..</span>.done.Creating tables<span class="token punctuation">..</span>.done.Extracting system views<span class="token punctuation">..</span>.ambari-admin-2.7.3.0.139.jar<span class="token punctuation">..</span><span class="token punctuation">..</span>Ambari repo <span class="token function">file</span> doesn<span class="token string">'t contain latest json url, skipping repoinfos modificationAdjusting ambari-server permissions and ownership...Ambari Server '</span>setup' completed successfully.<span class="token punctuation">[</span>root@ambari ~<span class="token punctuation">]</span><span class="token comment"># ambari-server start</span><span class="token comment"># 网页端访问ambari.hadoop.com:8080安装hadoop即可，下一篇介绍。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=red>此段结束</font></strong></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~  </p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esxi安装</title>
      <link href="/posts/ce71.html"/>
      <url>/posts/ce71.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a><font size=6><strong>约定</strong></font></h1><p>&emsp;&emsp;软碟通 版本9.7 <a href="https://cn.ultraiso.net/xiazai.html" title="版本：9.7.2.3561">软碟通9.7</a><br>&emsp;&emsp;esxi 版本6.7 <a href="https://my.vmware.com/cn/web/vmware/evalcenter?p=vsphere-eval&wd=&eqid=bbb193fe000386d7000000025dfc67c4" title="VMware vSphere 6.7">VMware vSphere 6.7</a><br>下载好esxi6.7需要注册账户下载(免费)，或者通过第三方分享下载。<br>下载好ultraiso可以免费试用</p><iframe height="600" width="800" src="//player.bilibili.com/player.html?aid=79942932&cid=136819745&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="esxi系统安装"><a href="#esxi系统安装" class="headerlink" title="esxi系统安装"></a><font size=5><strong>esxi系统安装</strong></font></h2><h3 id="打开软碟通软件"><a href="#打开软碟通软件" class="headerlink" title="打开软碟通软件"></a><font size=4><strong>打开软碟通软件</strong></font></h3><p>&emsp;&emsp;<font color=red>选择镜像，点击启动，写入硬盘映像</font><br><img src="/medias/drawing-bed/esxi/0.jpg"></p><h3 id="写入，等待完成"><a href="#写入，等待完成" class="headerlink" title="写入，等待完成"></a><font size=4><strong>写入，等待完成</strong></font></h3><p><img src="/medias/drawing-bed/esxi/1.jpg"></p><h3 id="完成后，写入便捷启动"><a href="#完成后，写入便捷启动" class="headerlink" title="完成后，写入便捷启动"></a><font size=4><strong>完成后，写入便捷启动</strong></font></h3><p><img src="/medias/drawing-bed/esxi/2.jpg"></p><h3 id="选择syslinux写入即可"><a href="#选择syslinux写入即可" class="headerlink" title="选择syslinux写入即可"></a><font size=4><strong>选择syslinux写入即可</strong></font></h3><p><img src="/medias/drawing-bed/esxi/3.jpg"></p><h3 id="选择Linux服务器安装syslinux"><a href="#选择Linux服务器安装syslinux" class="headerlink" title="选择Linux服务器安装syslinux"></a><font size=4><strong>选择Linux服务器安装syslinux</strong></font></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> syslinux -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/drawing-bed/esxi/4.jpg"></p><h3 id="把menu-c32复制出来"><a href="#把menu-c32复制出来" class="headerlink" title="把menu.c32复制出来"></a><font size=4><strong>把menu.c32复制出来</strong></font></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/share/syslinux<span class="token comment"># 1.使用sftp工具导出</span><span class="token comment"># 2.使用lrzsz导出</span>yum <span class="token function">install</span> lrzsz -ysz menu.c32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/drawing-bed/esxi/5.jpg"></p><h3 id="把menu-c32复制到U盘的根目录，选择覆盖"><a href="#把menu-c32复制到U盘的根目录，选择覆盖" class="headerlink" title="把menu.c32复制到U盘的根目录，选择覆盖"></a><font size=4><strong>把menu.c32复制到U盘的根目录，选择覆盖</strong></font></h3><p><img src="/medias/drawing-bed/esxi/6.jpg"></p><h3 id="U盘插入服务器，开机F8选择U盘启动"><a href="#U盘插入服务器，开机F8选择U盘启动" class="headerlink" title="U盘插入服务器，开机F8选择U盘启动"></a><font size=4><strong>U盘插入服务器，开机F8选择U盘启动</strong></font></h3><p><img src="/medias/drawing-bed/esxi/7.jpg"></p><h3 id="欢迎安装界面，选择Continue"><a href="#欢迎安装界面，选择Continue" class="headerlink" title="欢迎安装界面，选择Continue"></a><font size=4><strong>欢迎安装界面，选择Continue</strong></font></h3><p><img src="/medias/drawing-bed/esxi/8.jpg"></p><h3 id="用户协议，F11同意继续"><a href="#用户协议，F11同意继续" class="headerlink" title="用户协议，F11同意继续"></a><font size=4><strong>用户协议，F11同意继续</strong></font></h3><p><img src="/medias/drawing-bed/esxi/9.jpg"></p><h3 id="扫描设备，等一会就好"><a href="#扫描设备，等一会就好" class="headerlink" title="扫描设备，等一会就好"></a><font size=4><strong>扫描设备，等一会就好</strong></font></h3><p><img src="/medias/drawing-bed/esxi/10.jpg"></p><h3 id="注意！这里一定确认是你的硬盘"><a href="#注意！这里一定确认是你的硬盘" class="headerlink" title="注意！这里一定确认是你的硬盘"></a><font size=4 color=red><strong>注意！这里一定确认是你的硬盘</strong></font></h3><p>&emsp;&emsp;这里是安装esxi需要的硬盘，不要选择自己的U盘，除非你想把系统安装到U盘中<br><img src="/medias/drawing-bed/esxi/11.jpg"></p><h3 id="输入设备，如果你的键鼠不是特殊的，默认即可"><a href="#输入设备，如果你的键鼠不是特殊的，默认即可" class="headerlink" title="输入设备，如果你的键鼠不是特殊的，默认即可"></a><font size=4><strong>输入设备，如果你的键鼠不是特殊的，默认即可</strong></font></h3><p><img src="/medias/drawing-bed/esxi/12.jpg"></p><h3 id="root密码，网页管理台和设置用得到"><a href="#root密码，网页管理台和设置用得到" class="headerlink" title="root密码，网页管理台和设置用得到"></a><font size=4><strong>root密码，网页管理台和设置用得到</strong></font></h3><p>&emsp;&emsp;(最好<font color=red>大小写 符号 数字</font>都有)<br><img src="/medias/drawing-bed/esxi/13.jpg"></p><h3 id="选择安装"><a href="#选择安装" class="headerlink" title="选择安装"></a><font size=4><strong>选择安装</strong></font></h3><p><img src="/medias/drawing-bed/esxi/14.jpg"></p><h3 id="等待读条"><a href="#等待读条" class="headerlink" title="等待读条"></a><font size=4><strong>等待读条</strong></font></h3><p><img src="/medias/drawing-bed/esxi/15.jpg"></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a><font size=4><strong>重启</strong></font></h3><p><img src="/medias/drawing-bed/esxi/16.jpg"></p><h3 id="重启完的页面"><a href="#重启完的页面" class="headerlink" title="重启完的页面"></a><font size=4><strong>重启完的页面</strong></font></h3><p>&emsp;&emsp;我的服务器是插入网线，是可以上网的。<font color=red>F2</font>进入设置界面<br><img src="/medias/drawing-bed/esxi/17.jpg"></p><h3 id="输入刚才设定的密码，进入设置"><a href="#输入刚才设定的密码，进入设置" class="headerlink" title="输入刚才设定的密码，进入设置"></a><font size=4><strong>输入刚才设定的密码，进入设置</strong></font></h3><p>&emsp;&emsp;输入密码会回到首页，<font color=red>再按一次F2</font>即可<br><img src="/medias/drawing-bed/esxi/18.jpg"></p><h3 id="三个网卡设置选项"><a href="#三个网卡设置选项" class="headerlink" title="三个网卡设置选项"></a><font size=4><strong>三个网卡设置选项</strong></font></h3><p>&emsp;&emsp;从上到下分别是，<font color=red>设置网络、重启、测试</font><br><img src="/medias/drawing-bed/esxi/19.jpg"></p><h3 id="回车进入设置，只设置IPv4和DNS即可"><a href="#回车进入设置，只设置IPv4和DNS即可" class="headerlink" title="回车进入设置，只设置IPv4和DNS即可"></a><font size=4><strong>回车进入设置，只设置IPv4和DNS即可</strong></font></h3><p><img src="/medias/drawing-bed/esxi/20.jpg"></p><h3 id="IPv4选择手动设置，使用空格键选择，设置完，回车保存"><a href="#IPv4选择手动设置，使用空格键选择，设置完，回车保存" class="headerlink" title="IPv4选择手动设置，使用空格键选择，设置完，回车保存"></a><font size=4><strong>IPv4选择手动设置，使用空格键选择，设置完，回车保存</strong></font></h3><p><img src="/medias/drawing-bed/esxi/21.jpg"></p><h3 id="DNS设置和上面一样"><a href="#DNS设置和上面一样" class="headerlink" title="DNS设置和上面一样"></a><font size=4><strong>DNS设置和上面一样</strong></font></h3><p><img src="/medias/drawing-bed/esxi/22.jpg"></p><h3 id="使用Esc退出"><a href="#使用Esc退出" class="headerlink" title="使用Esc退出"></a><font size=4><strong>使用Esc退出</strong></font></h3><p><img src="/medias/drawing-bed/esxi/23.jpg"></p><h3 id="会提示你保存，保存即可"><a href="#会提示你保存，保存即可" class="headerlink" title="会提示你保存，保存即可"></a><font size=4><strong>会提示你保存，保存即可</strong></font></h3><p><img src="/medias/drawing-bed/esxi/24.jpg"></p><h3 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a><font size=4><strong>重启网络</strong></font></h3><p><img src="/medias/drawing-bed/esxi/25.jpg"></p><h3 id="测试网络，给定几个IP，回车测试"><a href="#测试网络，给定几个IP，回车测试" class="headerlink" title="测试网络，给定几个IP，回车测试"></a><font size=4><strong>测试网络，给定几个IP，回车测试</strong></font></h3><p><img src="/medias/drawing-bed/esxi/26.jpg"></p><h3 id="全是OK-就行"><a href="#全是OK-就行" class="headerlink" title="全是OK.就行"></a><font size=4><strong>全是OK.就行</strong></font></h3><p><img src="/medias/drawing-bed/esxi/27.jpg"></p><h3 id="Esc退回到首页"><a href="#Esc退回到首页" class="headerlink" title="Esc退回到首页"></a><font size=4><strong>Esc退回到首页</strong></font></h3><p><img src="/medias/drawing-bed/esxi/28.jpg"></p><h3 id="首页是自己设定的IP和DNS"><a href="#首页是自己设定的IP和DNS" class="headerlink" title="首页是自己设定的IP和DNS"></a><font size=4><strong>首页是自己设定的IP和DNS</strong></font></h3><p><img src="/medias/drawing-bed/esxi/29.jpg"></p><h3 id="浏览器输入地址，按红框一步步来"><a href="#浏览器输入地址，按红框一步步来" class="headerlink" title="浏览器输入地址，按红框一步步来"></a><font size=4><strong>浏览器输入地址，按红框一步步来</strong></font></h3><p><img src="/medias/drawing-bed/esxi/30.jpg"></p><h3 id="输入用户密码进入管理台"><a href="#输入用户密码进入管理台" class="headerlink" title="输入用户密码进入管理台"></a><font size=4><strong>输入用户密码进入管理台</strong></font></h3><p><img src="/medias/drawing-bed/esxi/31.jpg"></p><h3 id="按照红框，选择分配许可证"><a href="#按照红框，选择分配许可证" class="headerlink" title="按照红框，选择分配许可证"></a><font size=4><strong>按照红框，选择分配许可证</strong></font></h3><p><img src="/medias/drawing-bed/esxi/32.jpg"></p><h3 id="添加后看过期日期"><a href="#添加后看过期日期" class="headerlink" title="添加后看过期日期"></a><font size=4><strong>添加后看过期日期</strong></font></h3><p><img src="/medias/drawing-bed/esxi/33.jpg"></p><h3 id="按照红框，创建虚拟机和VMware一样"><a href="#按照红框，创建虚拟机和VMware一样" class="headerlink" title="按照红框，创建虚拟机和VMware一样"></a><font size=4><strong>按照红框，创建虚拟机和VMware一样</strong></font></h3><p><img src="/medias/drawing-bed/esxi/34.jpg"></p><h3 id="补充镜像上载"><a href="#补充镜像上载" class="headerlink" title="补充镜像上载"></a><font size=4><strong>补充镜像上载</strong></font></h3><p>&emsp;&emsp;按照标注序号一步步操作即可，选择存储–&gt;选定其中一块磁盘–&gt;数据存储浏览器–&gt;上载–&gt;选择自己的镜像上传即可.<br><img src="/medias/drawing-bed/esxi/35.jpg"></p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(四)</title>
      <link href="/posts/eb69.html"/>
      <url>/posts/eb69.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><font size=5><strong>变量</strong></font></h2><p>&emsp;&emsp;变量的意义和 赋值符号 =, ‘把列表复制给变量A’<br>&emsp;&emsp;命名要有意义, 用简洁的英文单词表示一个变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment"># 没有意义</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> skill <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'新月打击'</span><span class="token punctuation">]</span>   <span class="token comment"># 技能为新月打击, 可以让读者快速的 读懂变量的意义</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>skill<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'新月打击'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量基本规范"><a href="#变量基本规范" class="headerlink" title="变量基本规范"></a><font size=4><strong>变量基本规范</strong></font></h3><p>&emsp;&emsp;1.变量名首字符不能是数字<br>&emsp;&emsp;2.变量名由 字母, 数字, 下划线 组成<br>&emsp;&emsp;3.系统的 保留关键字 不能在变量名中  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;4.变量名区分大小写<br>&emsp;&emsp;5.变量本身是没有类型的, 可以是字符串str、元组tuple、列表list、集合set、数字int,float,tuple、布尔数bool、字典dict  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token number">1</span>   <span class="token comment"># type虽然不是保留字, 但是不建议用作变量名, 类似还有print</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>   File <span class="token string">"&lt;pyshell#34>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token string">'int'</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token builtin">callable</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># typy(1)等同于1(1)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#35>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token number">1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token string">'int'</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token builtin">callable</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token number">1</span>   <span class="token comment"># 如果后面的代码不使用type()方法进行调用, 只打印等操作是可以使用的。还是上面那句话 不建议使用。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作业:</strong> 思考下面的代码: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a   <span class="token comment"># 将a列表赋值给b</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span>   <span class="token comment"># 把a列表的第1个元素替换为'a'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment"># a列表改变</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment"># b也会变, a列表赋值给b列表, a列表中元素改变, b中的也会变</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="int值类型-amp-list引用类型"><a href="#int值类型-amp-list引用类型" class="headerlink" title="int值类型 &amp; list引用类型"></a><font size=4><strong>int值类型 &amp; list引用类型</strong></font></h3><p><strong>区别:</strong> int是值类型, list是引用类型<br><font color=red><strong>int str tuple</strong></font>(<strong>不可改变</strong>), <font color=green><strong>list set dict</strong></font>(<strong>可变</strong>)<br>【复习: int整型 str字符串 tuple元组 list列表 set集合 dict字典 float浮点数 bool布尔数 [36j]complex复数, 序列字符串列表和元组】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'hello'</span>   <span class="token comment"># 把'hello'赋值给a</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">'python'</span>   <span class="token comment"># 把'hello' + 'python'赋值给a</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>hellopython<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment"># 查看对象的内存地址</span><span class="token number">2563202155776</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token string">'python'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">2563199608560</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'python'</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'p'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'python'</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span>   <span class="token comment"># 字符串不可改变, 不能对字符串的某个字符赋值</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#21>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token string">'python'</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span>TypeError<span class="token punctuation">:</span> <span class="token string">'str'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tuple和list区别"><a href="#tuple和list区别" class="headerlink" title="tuple和list区别"></a><font size=4><strong>tuple和list区别</strong></font></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment"># id()查看对象的内存地址</span><span class="token number">2563202131272</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># hex()十转十六进制, oct()十转八进制, bin()十转二进制 </span><span class="token string">'0x254cac0a548'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">2563202131272</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>tuple:</strong> 不可改变, list可以</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#32>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>list</strong>列表可以增加, 元组tuple不可以。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment"># list列表可以增加, 元组tuple不可以。</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span> append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span> append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#37>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    c<span class="token punctuation">.</span> append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'append'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多维序列"><a href="#多维序列" class="headerlink" title="多维序列 "></a><font size=4><strong>多维序列</strong> </font></h3><p>&emsp;&emsp;二维和三维用的较多</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span>   <span class="token comment"># 注意改变的是列表不是元组。[4,5,(6,7)]是列表, 而元组(6,7)是列表的元素, 所以可变, 但是元组中的6, 7元素是不可变的。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span>   <span class="token comment"># 元组中的6, 所以不可变</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#13>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span>   <span class="token comment"># 元组a[3] = [4,5,(6,7)], 是元组的元素, 所以也不可变</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#14>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(三)</title>
      <link href="/posts/7d95.html"/>
      <url>/posts/7d95.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a><font size=5><strong>列表</strong></font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>   <span class="token comment"># 列表</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 列表中元素的类型可以是多种</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 嵌套列表(其他语言叫"二维数组")</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;以一个数字访问列表得到的是一个字符串, 以冒号的形式访问列表得到一个列表, 即使只有一个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'新月打击'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'新月打击'</span><span class="token punctuation">,</span> <span class="token string">'苍白之瀑'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment"># 有冒号, 得到一个列表</span><span class="token punctuation">[</span><span class="token string">'月神冲刺'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment"># 数字得到在一个字符串</span><span class="token string">'月神冲刺'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>列表运算</strong>(列表+列表, 列表乘数字)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token string">"点燃"</span><span class="token punctuation">,</span><span class="token string">"闪现"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'新月打击'</span><span class="token punctuation">,</span> <span class="token string">'苍白之瀑'</span><span class="token punctuation">,</span> <span class="token string">'月之降临'</span><span class="token punctuation">,</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'点燃'</span><span class="token punctuation">,</span> <span class="token string">'闪现'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token string">"月神冲刺"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>分组:</strong> 4个小组, 每组4个小队(一共16个小队)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"A[1,2,3,4]"</span><span class="token punctuation">,</span><span class="token string">"B[5,6,7,8]"</span><span class="token punctuation">,</span><span class="token string">"C[9,10,11,12]"</span><span class="token punctuation">,</span><span class="token string">"D[13,14,15,16]"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'A[1,2,3,4]'</span><span class="token punctuation">,</span> <span class="token string">'B[5,6,7,8]'</span><span class="token punctuation">,</span> <span class="token string">'C[9,10,11,12]'</span><span class="token punctuation">,</span> <span class="token string">'D[13,14,15,16]'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a><font size=5><strong>元组</strong></font></h2><p>&emsp;&emsp;基础参考列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"-2"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'-2'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"-2"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"-2"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'-2'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"-2"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"-2"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'-2'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'-2'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'-2'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"-2"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'-2'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;编程里面的一个约定俗成的习惯: int整形(int类型), str字符串(str类型), list列表(list类型), tuple元组(tuple类型)音标[tʌpl]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 当type()中 只有一个元素的元组 是会默认进行运算的</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># 如数学运算中, ()是运算符, 优先级高</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># ,表示只有一个元素的元组。</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># ()代表什么都没有的元组</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;总结number大类型包含:<strong>int整型、float浮点型、bool布尔数。序列包含: str字符串、list列表、tuple元组</strong>  </p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a><font size=5><strong>序列</strong></font></h2><p>&emsp;&emsp;1. “序列”[num] 每一个序列的元素, 都有一个序号<br>&emsp;&emsp;2. 切片, “xulie”[2:4] 称为切片操作。拓展: “xulie”[2:4:2]  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment"># 参考下面的结果'llo wo'共取6个字符, 取其中[1,3,5]即, 'low', 理解为'步长'。左舍2至左取8按步长为2取字符, 即前面切片截取的字符串, 再以步长为2取1,3,5,7...</span><span class="token string">'low'</span>   <span class="token comment"># 这里步长2是从1开始数</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>   <span class="token comment"># 正正, 从左取8, 左舍2</span><span class="token string">'llo wo'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'l '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment"># 切片截取后步长取字符为1,4,7,10...上面取了'l'和'空格'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;3.序列可以 加<font color=red>+</font>和乘<font color=red>*</font><br><strong>拓展:</strong> 逻辑运算符(两个变量间的逻辑关系)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment">#3 是否在这个序列中, 返回值为bool类型</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment"># 0是否 不在这个序列中</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;4.判断序列中有多少个元素、最大最小值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># len()函数 求序列的元素个数</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># max()函数 求元素的最大值</span><span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># min()函数 求元素的最小值</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">)</span>   <span class="token comment"># 字符也有排序, 下面验证顺序应该为: '空格'0-9a-z'汉字'</span><span class="token string">' '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token string">"abcxyz"</span><span class="token punctuation">)</span><span class="token string">'a'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token string">"abcxyz09"</span><span class="token punctuation">)</span><span class="token string">'0'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token string">"abcxyz0 9"</span><span class="token punctuation">)</span><span class="token string">' '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token string">"abcxyz0 9哈"</span><span class="token punctuation">)</span><span class="token string">'哈'</span><span class="token comment"># 排序按ascll码排序</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>   <span class="token comment"># ord()查看字符的ascll码</span><span class="token number">48</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token number">32</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token number">97</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'哈'</span><span class="token punctuation">)</span><span class="token number">21704</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a><font size=5><strong>集合</strong></font></h2><p>&emsp;&emsp;集合: set, 特点: 无序, 不能切片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'set'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment"># 不能取字符</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#66>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>TypeError<span class="token punctuation">:</span> <span class="token string">'set'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#67>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>TypeError<span class="token punctuation">:</span> <span class="token string">'set'</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> subscriptable<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 重复压缩</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;集合操作: 长度判断, 逻辑运算</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;集合优势: 剔除集合中的元素(求两个集合的差集)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;集合的交集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;集合的合集(并集)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;集合为空</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># set()表示空集</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'set'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 验证集合元素是否为0, 0即为空</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment"># dict类型, 不是set类型</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a><font size=5><strong>字典</strong></font></h2><p>&emsp;&emsp;字典: dict, 类比汉语字典拼音查汉字<br>&emsp;&emsp;对于字典来说有Key和Value , Key代表关键字, Value代表值<br>&emsp;&emsp;字典可以有很多个key和value, 用set集合表示, 而不是序列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span>key1<span class="token punctuation">:</span>value1<span class="token punctuation">,</span>key2<span class="token punctuation">:</span>value2<span class="token punctuation">,</span>key3<span class="token punctuation">:</span>value3<span class="token punctuation">&#125;</span>   <span class="token comment"># 字典定义 key:value</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token string">'Q'</span><span class="token punctuation">]</span>   <span class="token comment"># 字典取值</span><span class="token string">'新月打击'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token string">'Q'</span><span class="token punctuation">]</span>   <span class="token comment"># 不能有重复的key</span><span class="token string">'苍白之瀑'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 验证重复key</span><span class="token punctuation">&#123;</span><span class="token string">'Q'</span><span class="token punctuation">:</span> <span class="token string">'苍白之瀑'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'月之降临'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 验证key值可以是字符串和数字 '' 和 "" 均表示字符串</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'新月打击'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'苍白之瀑'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'月之降临'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'新月打击'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token string">'苍白之瀑'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token string">'月之降临'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 验证''和""均表示字符串, 而且字符串必须是被引号引起来的无所谓是单引号还是双引号</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'新月打击'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'月之降临'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;key必须是不可变的类型, (int, str都是不可变的类型)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span>   <span class="token comment"># key可以是元组</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">'新月打击'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token string">'苍白之瀑'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'月之降临'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span>   <span class="token comment"># key不可以为列表</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#96>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">&#125;</span>TypeError<span class="token punctuation">:</span> unhashable <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;value可以是任何类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token string">"新月打击"</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">:</span><span class="token string">"苍白之瀑"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">:</span><span class="token string">"月之降临"</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">:</span><span class="token string">"月神冲刺"</span><span class="token punctuation">,</span><span class="token string">'DF'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">'点燃'</span><span class="token punctuation">,</span><span class="token string">'闪现'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'Q'</span><span class="token punctuation">:</span> <span class="token string">'新月打击'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token string">'苍白之瀑'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'月之降临'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'月神冲刺'</span><span class="token punctuation">,</span> <span class="token string">'DF'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'点燃'</span><span class="token punctuation">,</span> <span class="token string">'闪现'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;空的字典: 以下均可以{},{ },set()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思维导图</strong>:<br><img src="/medias/drawing-bed/python3/0.jpg" alt="Python基本数据类型.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 组的概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(二)</title>
      <link href="/posts/ed37.html"/>
      <url>/posts/ed37.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="什么是代码？"><a href="#什么是代码？" class="headerlink" title="什么是代码？"></a><font size=5><strong>什么是代码</strong>？</font></h2><p>&emsp;&emsp;代码是现实世界事物在计算机世界中的映射</p><h2 id="什么是写代码？"><a href="#什么是写代码？" class="headerlink" title="什么是写代码？"></a><font size=5><strong>什么是写代码</strong>？</font></h2><p>&emsp;&emsp;写代码是将现实世界中的事物用计算机语言来描述  </p><h2 id="python的基本数据类型"><a href="#python的基本数据类型" class="headerlink" title="python的基本数据类型: "></a><font size=5><strong>python的基本数据类型</strong>: </font></h2><p>&emsp;&emsp;**number:**数字(大分类 包含整数、小数)<br>&emsp;&emsp;**整数:**int<br>&emsp;&emsp;**小数, 浮点数:**float就是双精度<br>&emsp;&emsp;**其它语言:**单精度float, 双精度double  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">#type查看对象数据类型查询方法</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1.444444</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#除法</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#整除</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b10</span>  <span class="token comment">#0b二进制</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b11</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0o10</span>   <span class="token comment">#0o八进制</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0o11</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0x10</span>   <span class="token comment">#0x十六进制</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0x11</span><span class="token number">17</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0x1F</span><span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment">#bin可以将任意进制转换成二进制</span><span class="token string">'0b1010'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">0o6</span><span class="token punctuation">)</span><span class="token string">'0b110'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">0xA</span><span class="token punctuation">)</span><span class="token string">'0b1010'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0o65</span><span class="token punctuation">)</span>   <span class="token comment">#int将任意进制转换成十进制</span><span class="token number">53</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0x7A</span><span class="token punctuation">)</span><span class="token number">122</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span>   <span class="token comment">#hex将任意进制转换成十六进制</span><span class="token string">'0x58'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">0o23</span><span class="token punctuation">)</span><span class="token string">'0x13'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">oct</span><span class="token punctuation">(</span><span class="token number">0b110</span><span class="token punctuation">)</span>   <span class="token comment">#oct将任意进制转换成八进制</span><span class="token string">'0o6'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">oct</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">)</span><span class="token string">'0o210'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>bool布尔数/值:</strong> 真True、假False<br>&emsp;&emsp;<strong>complex复数:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">#布尔值非零即为真。bool(1.1),bool(-3),bool(0o110)都是真</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">#非空即为真。(None是False)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">'acb'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>复数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">36j</span><span class="token number">36j</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a><font size=5><strong>符号</strong></font></h2><p>&emsp;&emsp;<strong>引号</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello world'</span><span class="token string">'hello world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token string">'hello world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'1'</span><span class="token string">'1'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"let's go"</span>   <span class="token comment">#引号表示字符串的时候要成对出现, 不能有中文字符</span><span class="token string">"let's go"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'let\'s go'</span>   <span class="token comment">#"\"转义字符</span><span class="token string">"let's go"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>换行</strong>(三引号 ‘’’ 换行, \n 换行, \ 换行)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token triple-quoted-string string">'''hellohaha'''</span><span class="token string">'\nhello\nhaha\n'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello\nhaha'</span><span class="token punctuation">)</span>hellohaha<span class="token operator">>></span><span class="token operator">></span> 'haha\xixi'<span class="token string">'hahaxixi'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>转义字符:</strong> 特殊的字符(表示无法”看见”的字符、与语言本身语法有冲突的字符)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">\n   <span class="token comment"># 换行</span>\<span class="token string">'   # 单引号, 表示与python语法有冲突的字符, 参考: '</span>let\<span class="token string">'s go'</span>\t   <span class="token comment"># 横向制表符</span>\r   <span class="token comment"># 回车</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello \\n world'</span><span class="token punctuation">)</span>   <span class="token comment"># 将hello \n world输出出来</span>hello \n world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>应用:</strong> 打印一个路径但是包含\n,\r等相邻的字符, 就变成了特殊字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c:\nortwind\nortwest'</span><span class="token punctuation">)</span>c<span class="token punctuation">:</span>ortwindortwest<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c:\\nortwind\\nortwest'</span><span class="token punctuation">)</span>c<span class="token punctuation">:</span>\nortwind\nortwest<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'c:\nortwind\nortwest'</span><span class="token punctuation">)</span>   <span class="token comment"># r 表示这个字符串不是一个普通字符串, 而是一个原始字符串。及所见即所得。</span>c<span class="token punctuation">:</span>\nortwind\nortwest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>错误</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'let'</span>s go'<span class="token punctuation">)</span>   <span class="token comment"># 引号没有成对出现😉</span>  SyntaxError<span class="token punctuation">:</span> invalid syntax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><font size=5><strong>字符串</strong></font></h2><p>&emsp;&emsp;<strong>字符串操作:</strong> hello world合并与拆分<br>&emsp;&emsp;<strong>字符串运算:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span>  <span class="token string">'helloworld'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello"</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token string">'hellohellohello'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'h'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'l'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'d'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'o'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;获取”hello world“中w字符, 两种方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token string">'w'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'w'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;截取字符(切片操作)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'hell'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment"># 这里截取前5个字符</span><span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment"># 复数, 代表步长, 从前数0个从后数1个, 截取中间的。</span><span class="token string">'hello wor'</span>   <span class="token comment"># 左边舍弃0个, 右边舍弃1个。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token string">'lo wo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;截取world, 用两种方式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>   <span class="token comment"># 成功, 取6-10</span><span class="token string">'world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment"># 成功, 解释: 右舍0要忽略0, 因为0代表了第一个数</span><span class="token string">'world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token comment"># 测试左舍0, 忽略0, 成功</span><span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 解释, 套路上面的解释, 左舍-4右不舍(右取4至右不舍)</span><span class="token string">'world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment"># 左舍-4, 右舍2(右取4至右舍2)</span><span class="token string">'wo'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment"># 与上面拗口的做对比</span><span class="token string">'ll'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 解释, 套路上面的解释, 左舍-4右不舍(右取4至右不舍)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment"># 左舍-4, 右舍2(右取4至右舍2)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment"># 左不舍至右舍4</span><span class="token string">'hello '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment"># 左舍4至右不舍</span><span class="token string">'o world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment"># 左舍-4 == 右取4(右取4至右不舍)</span><span class="token string">'world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment"># 右为正数(左不舍至左取4)  </span><span class="token string">'hell'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;<strong>理解:</strong><br>&emsp;&emsp;[2:4]: 左右为正数, 看右, 从左 数4个字符, 舍弃前2个<br>&emsp;&emsp;[-4:-2]: 左右为负数, 看左, 从右 数4个字符, 舍弃后边的2个<br>&emsp;&emsp;[2:-4]: 正负数, 左舍2右舍4<br>&emsp;&emsp;[;]: 右/左为空, 代表空的方向是不舍弃<br>&emsp;&emsp;[4]: 代表从左开始第4个字符(从0开始数)；-4为从右开始数第4个数(从1开始数)<br>&emsp;&emsp;<strong>实例:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'o'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"hello world"</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'w'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 基本数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记(一)</title>
      <link href="/posts/2d93.html"/>
      <url>/posts/2d93.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="python特点"><a href="#python特点" class="headerlink" title="python特点"></a><font size=5><strong>python特点</strong></font></h2><p>&emsp;&emsp;Python特点, 简洁, 很Python  Pythonic<br>&emsp;&emsp;细致与进阶<br>&emsp;&emsp;python是一种编程语言。他是众多编程语言的一种。<br>&emsp;&emsp;语法简介优雅, 编写的程序容易阅读</p><h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a><font size=5><strong>导语</strong></font></h2><p>&emsp;&emsp;跨平台, Windows、Linux、macOS<br>&emsp;&emsp;易于学习, 非计算机专业学习python比C++, Java, javascript语言简单<br>&emsp;&emsp;极为强大而丰富的标准库与第三方库, 比如电子邮件, 图形GUI<br>&emsp;&emsp;python是面向对象的语言(把现实的形形色色的事物映射到计算机世界里)</p><h2 id="为什么喜欢python"><a href="#为什么喜欢python" class="headerlink" title="为什么喜欢python"></a><font size=5><strong>为什么喜欢python</strong></font></h2><h3 id="emsp-emsp-1-简洁-灵活-优雅-哲学"><a href="#emsp-emsp-1-简洁-灵活-优雅-哲学" class="headerlink" title="&emsp;&emsp;1, 简洁, 灵活, 优雅, 哲学"></a>&emsp;&emsp;<font size=4>1, 简洁, 灵活, 优雅, 哲学</font></h3><p><strong>(python之禅)</strong><br>&emsp;&emsp;simple is better than complex<br>&emsp;&emsp;简洁胜于复杂<br>&emsp;&emsp;now is better than never。although never is often better than <em>right</em> now<br>&emsp;&emsp;做也许好过不做, 但不假思索就动手还不如不做</p><h3 id="emsp-emsp-2-易于上手难于精通"><a href="#emsp-emsp-2-易于上手难于精通" class="headerlink" title="&emsp;&emsp;2, 易于上手难于精通"></a>&emsp;&emsp;<font size=4>2, 易于上手难于精通</font></h3><h3 id="emsp-emsp-3-python既有动态脚本的特性-又有面向对象的特性-非常具有自己的特点"><a href="#emsp-emsp-3-python既有动态脚本的特性-又有面向对象的特性-非常具有自己的特点" class="headerlink" title="&emsp;&emsp;3, python既有动态脚本的特性, 又有面向对象的特性, 非常具有自己的特点"></a>&emsp;&emsp;<font size=4>3, python既有动态脚本的特性, 又有面向对象的特性, 非常具有自己的特点</font></h3><h2 id="python的缺点"><a href="#python的缺点" class="headerlink" title="python的缺点"></a><font size=5><strong>python的缺点</strong></font></h2><p><strong>慢</strong>(相较于C、C++、Java, 运行效率慢)<br>&emsp;&emsp;主流语言两大类: 编译型语言C、C++, 解释型语言JavaScript、python<br>&emsp;&emsp;编译型语言: 执行程序之前将源代码编译成机器码(机器码更接近于底层)<br>&emsp;&emsp;解释型语言: 每次执行程序, 都会解释源码使其变成机器码<br>&emsp;&emsp;运行效率与开发效率, 鱼与熊掌不可兼得<br>&emsp;&emsp;语言适合的才是最好的<br>&emsp;&emsp;例如开发web如果选择汇编和C开发效率很慢<br>&emsp;&emsp;但是运行程序快慢和开发快慢是没有必然关系的。python运行起来用户是感觉不到慢的。</p><h2 id="python能做什么？"><a href="#python能做什么？" class="headerlink" title="python能做什么？"></a><font size=5><strong>python能做什么</strong>？</font></h2><p><strong>(几乎是万能的)</strong><br>&emsp;&emsp;1.爬虫<br>&emsp;&emsp;2.大数据与数据分析(spark)<br>&emsp;&emsp;3.自动化运维与自动化测试<br>&emsp;&emsp;4.web开发: flask、django<br>&emsp;&emsp;5.机器学习: tensor flow(python是入门级语言)<br>&emsp;&emsp;6.胶水语言: 混合C++、Java等来编程。能够把其他语言制作的各种模块很轻松地联接在一起<br>当你遇到问题时, 随手拿起python, 编写一个工具, 这才是python正确的打开方式。<br>基础语法: 基础语法是任何语言的基础, 只有熟练掌握才能灵活运用语言, 写出高效、优美、简洁的代码。</p><h2 id="pythonic"><a href="#pythonic" class="headerlink" title="pythonic: "></a><font size=5><strong>pythonic</strong>: </font></h2><p><strong>问题: a、b两个变量值交换</strong><br>&emsp;&emsp;C语言风格: </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> t <span class="token operator">=</span> a <span class="token punctuation">;</span>a <span class="token operator">=</span> b <span class="token punctuation">;</span>b <span class="token operator">=</span> t <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;python中: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这就是pythonic.</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 60min </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析学习</title>
      <link href="/posts/734e.html"/>
      <url>/posts/734e.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="造数据"><a href="#造数据" class="headerlink" title="造数据 "></a><font size=5><strong>造数据</strong> </font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># @Time     : 2019/12/11 9:39</span><span class="token comment"># @Author   : wangjun</span><span class="token comment"># @Mail     : 158970251@qq.com</span><span class="token comment"># @File     : name.py</span><span class="token comment"># @Software : PyCharm</span><span class="token comment"># _*_ coding: utf-8 _*_</span><span class="token keyword">import</span> randomlistf <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'王'</span><span class="token punctuation">,</span> <span class="token string">'李'</span><span class="token punctuation">,</span> <span class="token string">'张'</span><span class="token punctuation">,</span> <span class="token string">'刘'</span><span class="token punctuation">,</span> <span class="token string">'陈'</span><span class="token punctuation">,</span> <span class="token string">'杨'</span><span class="token punctuation">,</span> <span class="token string">'黄'</span><span class="token punctuation">,</span> <span class="token string">'赵'</span><span class="token punctuation">,</span> <span class="token string">'吴'</span><span class="token punctuation">,</span> <span class="token string">'周'</span><span class="token punctuation">,</span> <span class="token string">'徐'</span><span class="token punctuation">,</span> <span class="token string">'孙'</span><span class="token punctuation">,</span> <span class="token string">'马'</span><span class="token punctuation">,</span> <span class="token string">'朱'</span><span class="token punctuation">,</span> <span class="token string">'胡'</span><span class="token punctuation">,</span> <span class="token string">'郭'</span><span class="token punctuation">,</span> <span class="token string">'何'</span><span class="token punctuation">,</span> <span class="token string">'高'</span><span class="token punctuation">,</span> <span class="token string">'林'</span><span class="token punctuation">,</span> <span class="token string">'罗'</span><span class="token punctuation">,</span>    <span class="token string">'郑'</span><span class="token punctuation">,</span> <span class="token string">'梁'</span><span class="token punctuation">,</span> <span class="token string">'谢'</span><span class="token punctuation">,</span> <span class="token string">'宋'</span><span class="token punctuation">,</span> <span class="token string">'唐'</span><span class="token punctuation">,</span> <span class="token string">'许'</span><span class="token punctuation">,</span> <span class="token string">'韩'</span><span class="token punctuation">,</span> <span class="token string">'冯'</span><span class="token punctuation">,</span> <span class="token string">'邓'</span><span class="token punctuation">,</span> <span class="token string">'曹'</span><span class="token punctuation">,</span> <span class="token string">'彭'</span><span class="token punctuation">,</span> <span class="token string">'曾'</span><span class="token punctuation">,</span> <span class="token string">'肖'</span><span class="token punctuation">,</span> <span class="token string">'田'</span><span class="token punctuation">,</span> <span class="token string">'董'</span><span class="token punctuation">,</span> <span class="token string">'袁'</span><span class="token punctuation">,</span> <span class="token string">'潘'</span><span class="token punctuation">,</span> <span class="token string">'于'</span><span class="token punctuation">,</span> <span class="token string">'蒋'</span><span class="token punctuation">,</span> <span class="token string">'蔡'</span><span class="token punctuation">,</span>    <span class="token string">'余'</span><span class="token punctuation">,</span> <span class="token string">'杜'</span><span class="token punctuation">,</span> <span class="token string">'叶'</span><span class="token punctuation">,</span> <span class="token string">'程'</span><span class="token punctuation">,</span> <span class="token string">'苏'</span><span class="token punctuation">,</span> <span class="token string">'魏'</span><span class="token punctuation">,</span> <span class="token string">'吕'</span><span class="token punctuation">,</span> <span class="token string">'丁'</span><span class="token punctuation">,</span> <span class="token string">'任'</span><span class="token punctuation">,</span> <span class="token string">'沈'</span><span class="token punctuation">,</span> <span class="token string">'姚'</span><span class="token punctuation">,</span> <span class="token string">'卢'</span><span class="token punctuation">,</span> <span class="token string">'姜'</span><span class="token punctuation">,</span> <span class="token string">'崔'</span><span class="token punctuation">,</span> <span class="token string">'钟'</span><span class="token punctuation">,</span> <span class="token string">'谭'</span><span class="token punctuation">,</span> <span class="token string">'陆'</span><span class="token punctuation">,</span> <span class="token string">'汪'</span><span class="token punctuation">,</span> <span class="token string">'范'</span><span class="token punctuation">,</span> <span class="token string">'金'</span><span class="token punctuation">,</span>    <span class="token string">'石'</span><span class="token punctuation">,</span> <span class="token string">'廖'</span><span class="token punctuation">,</span> <span class="token string">'贾'</span><span class="token punctuation">,</span> <span class="token string">'夏'</span><span class="token punctuation">,</span> <span class="token string">'韦'</span><span class="token punctuation">,</span> <span class="token string">'付'</span><span class="token punctuation">,</span> <span class="token string">'方'</span><span class="token punctuation">,</span> <span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token string">'邹'</span><span class="token punctuation">,</span> <span class="token string">'孟'</span><span class="token punctuation">,</span> <span class="token string">'熊'</span><span class="token punctuation">,</span> <span class="token string">'秦'</span><span class="token punctuation">,</span> <span class="token string">'邱'</span><span class="token punctuation">,</span> <span class="token string">'江'</span><span class="token punctuation">,</span> <span class="token string">'尹'</span><span class="token punctuation">,</span> <span class="token string">'薛'</span><span class="token punctuation">,</span> <span class="token string">'闫'</span><span class="token punctuation">,</span> <span class="token string">'段'</span><span class="token punctuation">,</span> <span class="token string">'雷'</span><span class="token punctuation">,</span> <span class="token string">'侯'</span><span class="token punctuation">,</span>    <span class="token string">'龙'</span><span class="token punctuation">,</span> <span class="token string">'史'</span><span class="token punctuation">,</span> <span class="token string">'陶'</span><span class="token punctuation">,</span> <span class="token string">'黎'</span><span class="token punctuation">,</span> <span class="token string">'贺'</span><span class="token punctuation">,</span> <span class="token string">'顾'</span><span class="token punctuation">,</span> <span class="token string">'毛'</span><span class="token punctuation">,</span> <span class="token string">'郝'</span><span class="token punctuation">,</span> <span class="token string">'龚'</span><span class="token punctuation">,</span> <span class="token string">'邵'</span><span class="token punctuation">,</span> <span class="token string">'万'</span><span class="token punctuation">,</span> <span class="token string">'钱'</span><span class="token punctuation">,</span> <span class="token string">'严'</span><span class="token punctuation">,</span> <span class="token string">'覃'</span><span class="token punctuation">,</span> <span class="token string">'武'</span><span class="token punctuation">,</span> <span class="token string">'戴'</span><span class="token punctuation">,</span> <span class="token string">'莫'</span><span class="token punctuation">,</span> <span class="token string">'孔'</span><span class="token punctuation">,</span> <span class="token string">'向'</span><span class="token punctuation">,</span> <span class="token string">'汤'</span><span class="token punctuation">]</span>listm <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'兰'</span><span class="token punctuation">,</span> <span class="token string">'旺'</span><span class="token punctuation">,</span> <span class="token string">'瑶'</span><span class="token punctuation">,</span> <span class="token string">'任'</span><span class="token punctuation">,</span> <span class="token string">'晴'</span><span class="token punctuation">,</span> <span class="token string">'镇'</span><span class="token punctuation">,</span> <span class="token string">'乔'</span><span class="token punctuation">,</span> <span class="token string">'欣'</span><span class="token punctuation">,</span> <span class="token string">'昆'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">,</span> <span class="token string">'筱'</span><span class="token punctuation">,</span> <span class="token string">'秉'</span><span class="token punctuation">,</span> <span class="token string">'曜'</span><span class="token punctuation">,</span> <span class="token string">'忠'</span><span class="token punctuation">,</span> <span class="token string">'真'</span><span class="token punctuation">,</span> <span class="token string">'凯'</span><span class="token punctuation">,</span> <span class="token string">'雯'</span><span class="token punctuation">,</span> <span class="token string">'懿'</span><span class="token punctuation">,</span> <span class="token string">'崇'</span><span class="token punctuation">,</span> <span class="token string">'成'</span><span class="token punctuation">,</span> <span class="token string">'顺'</span><span class="token punctuation">,</span> <span class="token string">'博'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'孟'</span><span class="token punctuation">,</span> <span class="token string">'琦'</span><span class="token punctuation">,</span> <span class="token string">'兆'</span><span class="token punctuation">,</span> <span class="token string">'佑'</span><span class="token punctuation">,</span> <span class="token string">'健'</span><span class="token punctuation">,</span> <span class="token string">'金'</span><span class="token punctuation">,</span> <span class="token string">'宥'</span><span class="token punctuation">,</span> <span class="token string">'贵'</span><span class="token punctuation">,</span> <span class="token string">'盛'</span><span class="token punctuation">,</span> <span class="token string">'元'</span><span class="token punctuation">,</span> <span class="token string">'珍'</span><span class="token punctuation">,</span> <span class="token string">'辰'</span><span class="token punctuation">,</span> <span class="token string">'初'</span><span class="token punctuation">,</span> <span class="token string">'慈'</span><span class="token punctuation">,</span> <span class="token string">'勇'</span><span class="token punctuation">,</span> <span class="token string">'仲'</span><span class="token punctuation">,</span> <span class="token string">'思'</span><span class="token punctuation">,</span> <span class="token string">'雪'</span><span class="token punctuation">,</span> <span class="token string">'右'</span><span class="token punctuation">,</span> <span class="token string">'琼'</span><span class="token punctuation">,</span> <span class="token string">'华'</span><span class="token punctuation">,</span> <span class="token string">'其'</span><span class="token punctuation">,</span>    <span class="token string">'火'</span><span class="token punctuation">,</span> <span class="token string">'彦'</span><span class="token punctuation">,</span> <span class="token string">'安'</span><span class="token punctuation">,</span> <span class="token string">'婷'</span><span class="token punctuation">,</span> <span class="token string">'曼'</span><span class="token punctuation">,</span> <span class="token string">'予'</span><span class="token punctuation">,</span> <span class="token string">'湖'</span><span class="token punctuation">,</span> <span class="token string">'绍'</span><span class="token punctuation">,</span> <span class="token string">'伊'</span><span class="token punctuation">,</span> <span class="token string">'以'</span><span class="token punctuation">,</span> <span class="token string">'宝'</span><span class="token punctuation">,</span> <span class="token string">'育'</span><span class="token punctuation">,</span> <span class="token string">'夙'</span><span class="token punctuation">,</span> <span class="token string">'富'</span><span class="token punctuation">,</span> <span class="token string">'武'</span><span class="token punctuation">,</span> <span class="token string">'品'</span><span class="token punctuation">,</span> <span class="token string">'玉'</span><span class="token punctuation">,</span> <span class="token string">'馨'</span><span class="token punctuation">,</span> <span class="token string">'家'</span><span class="token punctuation">,</span> <span class="token string">'山'</span><span class="token punctuation">,</span> <span class="token string">'美'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'常'</span><span class="token punctuation">,</span> <span class="token string">'扬'</span><span class="token punctuation">,</span> <span class="token string">'诚'</span><span class="token punctuation">,</span> <span class="token string">'士'</span><span class="token punctuation">,</span> <span class="token string">'姿'</span><span class="token punctuation">,</span> <span class="token string">'力'</span><span class="token punctuation">,</span> <span class="token string">'耀'</span><span class="token punctuation">,</span> <span class="token string">'竣'</span><span class="token punctuation">,</span> <span class="token string">'允'</span><span class="token punctuation">,</span> <span class="token string">'筠'</span><span class="token punctuation">,</span> <span class="token string">'瑜'</span><span class="token punctuation">,</span> <span class="token string">'舜'</span><span class="token punctuation">,</span> <span class="token string">'昌'</span><span class="token punctuation">,</span> <span class="token string">'冰'</span><span class="token punctuation">,</span> <span class="token string">'行'</span><span class="token punctuation">,</span> <span class="token string">'晓'</span><span class="token punctuation">,</span> <span class="token string">'轩'</span><span class="token punctuation">,</span> <span class="token string">'义'</span><span class="token punctuation">,</span> <span class="token string">'纬'</span><span class="token punctuation">,</span> <span class="token string">'淑'</span><span class="token punctuation">,</span> <span class="token string">'荣'</span><span class="token punctuation">,</span> <span class="token string">'海'</span><span class="token punctuation">,</span>    <span class="token string">'呈'</span><span class="token punctuation">,</span> <span class="token string">'素'</span><span class="token punctuation">,</span> <span class="token string">'之'</span><span class="token punctuation">,</span> <span class="token string">'碧'</span><span class="token punctuation">,</span> <span class="token string">'韦'</span><span class="token punctuation">,</span> <span class="token string">'峻'</span><span class="token punctuation">,</span> <span class="token string">'晏'</span><span class="token punctuation">,</span> <span class="token string">'胜'</span><span class="token punctuation">,</span> <span class="token string">'裕'</span><span class="token punctuation">,</span> <span class="token string">'惠'</span><span class="token punctuation">,</span> <span class="token string">'子'</span><span class="token punctuation">,</span> <span class="token string">'昭'</span><span class="token punctuation">,</span> <span class="token string">'骏'</span><span class="token punctuation">,</span> <span class="token string">'芳'</span><span class="token punctuation">,</span> <span class="token string">'凡'</span><span class="token punctuation">,</span> <span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token string">'恭'</span><span class="token punctuation">,</span> <span class="token string">'弘'</span><span class="token punctuation">,</span> <span class="token string">'明'</span><span class="token punctuation">,</span> <span class="token string">'兴'</span><span class="token punctuation">,</span> <span class="token string">'坚'</span><span class="token punctuation">,</span> <span class="token string">'紫'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'婉'</span><span class="token punctuation">,</span> <span class="token string">'芝'</span><span class="token punctuation">,</span> <span class="token string">'小'</span><span class="token punctuation">,</span> <span class="token string">'孝'</span><span class="token punctuation">,</span> <span class="token string">'翊'</span><span class="token punctuation">,</span> <span class="token string">'乐'</span><span class="token punctuation">,</span> <span class="token string">'如'</span><span class="token punctuation">,</span> <span class="token string">'姵'</span><span class="token punctuation">,</span> <span class="token string">'珮'</span><span class="token punctuation">,</span> <span class="token string">'智'</span><span class="token punctuation">,</span> <span class="token string">'惟'</span><span class="token punctuation">,</span> <span class="token string">'添'</span><span class="token punctuation">,</span> <span class="token string">'旻'</span><span class="token punctuation">,</span> <span class="token string">'宁'</span><span class="token punctuation">,</span> <span class="token string">'东'</span><span class="token punctuation">,</span> <span class="token string">'淳'</span><span class="token punctuation">,</span> <span class="token string">'柏'</span><span class="token punctuation">,</span> <span class="token string">'沛'</span><span class="token punctuation">,</span> <span class="token string">'合'</span><span class="token punctuation">,</span> <span class="token string">'国'</span><span class="token punctuation">,</span> <span class="token string">'宣'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">,</span>    <span class="token string">'伯'</span><span class="token punctuation">,</span> <span class="token string">'长'</span><span class="token punctuation">,</span> <span class="token string">'于'</span><span class="token punctuation">,</span> <span class="token string">'平'</span><span class="token punctuation">,</span> <span class="token string">'绿'</span><span class="token punctuation">,</span> <span class="token string">'维'</span><span class="token punctuation">,</span> <span class="token string">'舒'</span><span class="token punctuation">,</span> <span class="token string">'妤'</span><span class="token punctuation">,</span> <span class="token string">'南'</span><span class="token punctuation">,</span> <span class="token string">'昱'</span><span class="token punctuation">,</span> <span class="token string">'宇'</span><span class="token punctuation">,</span> <span class="token string">'岳'</span><span class="token punctuation">,</span> <span class="token string">'恩'</span><span class="token punctuation">,</span> <span class="token string">'礼'</span><span class="token punctuation">,</span> <span class="token string">'群'</span><span class="token punctuation">,</span> <span class="token string">'佩'</span><span class="token punctuation">,</span> <span class="token string">'军'</span><span class="token punctuation">,</span> <span class="token string">'璇'</span><span class="token punctuation">,</span> <span class="token string">'文'</span><span class="token punctuation">,</span> <span class="token string">'咏'</span><span class="token punctuation">,</span> <span class="token string">'介'</span><span class="token punctuation">,</span> <span class="token string">'喜'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'毅'</span><span class="token punctuation">,</span> <span class="token string">'君'</span><span class="token punctuation">,</span> <span class="token string">'劭'</span><span class="token punctuation">,</span> <span class="token string">'嘉'</span><span class="token punctuation">,</span> <span class="token string">'肇'</span><span class="token punctuation">,</span> <span class="token string">'法'</span><span class="token punctuation">,</span> <span class="token string">'逸'</span><span class="token punctuation">,</span> <span class="token string">'治'</span><span class="token punctuation">,</span> <span class="token string">'万'</span><span class="token punctuation">,</span> <span class="token string">'松'</span><span class="token punctuation">,</span> <span class="token string">'水'</span><span class="token punctuation">,</span> <span class="token string">'浩'</span><span class="token punctuation">,</span> <span class="token string">'莹'</span><span class="token punctuation">,</span> <span class="token string">'景'</span><span class="token punctuation">,</span> <span class="token string">'茂'</span><span class="token punctuation">,</span> <span class="token string">'绮'</span><span class="token punctuation">,</span> <span class="token string">'蓉'</span><span class="token punctuation">,</span> <span class="token string">'薇'</span><span class="token punctuation">,</span> <span class="token string">'郁'</span><span class="token punctuation">,</span> <span class="token string">'俞'</span><span class="token punctuation">,</span> <span class="token string">'和'</span><span class="token punctuation">,</span> <span class="token string">'坤'</span><span class="token punctuation">,</span>    <span class="token string">'毓'</span><span class="token punctuation">,</span> <span class="token string">'均'</span><span class="token punctuation">,</span> <span class="token string">'梦'</span><span class="token punctuation">,</span> <span class="token string">'培'</span><span class="token punctuation">,</span> <span class="token string">'与'</span><span class="token punctuation">,</span> <span class="token string">'廷'</span><span class="token punctuation">,</span> <span class="token string">'乃'</span><span class="token punctuation">,</span> <span class="token string">'勋'</span><span class="token punctuation">,</span> <span class="token string">'登'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">,</span> <span class="token string">'梅'</span><span class="token punctuation">,</span> <span class="token string">'千'</span><span class="token punctuation">,</span> <span class="token string">'书'</span><span class="token punctuation">,</span> <span class="token string">'欢'</span><span class="token punctuation">,</span> <span class="token string">'琇'</span><span class="token punctuation">,</span> <span class="token string">'念'</span><span class="token punctuation">,</span> <span class="token string">'玟'</span><span class="token punctuation">,</span> <span class="token string">'秋'</span><span class="token punctuation">,</span> <span class="token string">'颖'</span><span class="token punctuation">,</span> <span class="token string">'得'</span><span class="token punctuation">,</span> <span class="token string">'星'</span><span class="token punctuation">,</span> <span class="token string">'江'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'容'</span><span class="token punctuation">,</span> <span class="token string">'映'</span><span class="token punctuation">,</span> <span class="token string">'德'</span><span class="token punctuation">,</span> <span class="token string">'怡'</span><span class="token punctuation">,</span> <span class="token string">'茹'</span><span class="token punctuation">,</span> <span class="token string">'仪'</span><span class="token punctuation">,</span> <span class="token string">'儒'</span><span class="token punctuation">,</span> <span class="token string">'杰'</span><span class="token punctuation">,</span> <span class="token string">'哲'</span><span class="token punctuation">,</span> <span class="token string">'汉'</span><span class="token punctuation">,</span> <span class="token string">'刚'</span><span class="token punctuation">,</span> <span class="token string">'娇'</span><span class="token punctuation">,</span> <span class="token string">'修'</span><span class="token punctuation">,</span> <span class="token string">'旭'</span><span class="token punctuation">,</span> <span class="token string">'桂'</span><span class="token punctuation">,</span> <span class="token string">'雨'</span><span class="token punctuation">,</span> <span class="token string">'仕'</span><span class="token punctuation">,</span> <span class="token string">'莉'</span><span class="token punctuation">,</span> <span class="token string">'克'</span><span class="token punctuation">,</span> <span class="token string">'佳'</span><span class="token punctuation">,</span> <span class="token string">'珊'</span><span class="token punctuation">,</span> <span class="token string">'阿'</span><span class="token punctuation">,</span>    <span class="token string">'秀'</span><span class="token punctuation">,</span> <span class="token string">'尚'</span><span class="token punctuation">,</span> <span class="token string">'尧'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">,</span> <span class="token string">'湘'</span><span class="token punctuation">,</span> <span class="token string">'俐'</span><span class="token punctuation">,</span> <span class="token string">'春'</span><span class="token punctuation">,</span> <span class="token string">'虹'</span><span class="token punctuation">,</span> <span class="token string">'瑞'</span><span class="token punctuation">,</span> <span class="token string">'百'</span><span class="token punctuation">,</span> <span class="token string">'琳'</span><span class="token punctuation">,</span> <span class="token string">'语'</span><span class="token punctuation">,</span> <span class="token string">'阳'</span><span class="token punctuation">,</span> <span class="token string">'木'</span><span class="token punctuation">,</span> <span class="token string">'建'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">,</span> <span class="token string">'琪'</span><span class="token punctuation">,</span> <span class="token string">'财'</span><span class="token punctuation">,</span> <span class="token string">'英'</span><span class="token punctuation">,</span> <span class="token string">'慧'</span><span class="token punctuation">,</span> <span class="token string">'靖'</span><span class="token punctuation">,</span> <span class="token string">'菁'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'若'</span><span class="token punctuation">,</span> <span class="token string">'大'</span><span class="token punctuation">,</span> <span class="token string">'原'</span><span class="token punctuation">,</span> <span class="token string">'婕'</span><span class="token punctuation">,</span> <span class="token string">'意'</span><span class="token punctuation">,</span> <span class="token string">'展'</span><span class="token punctuation">,</span> <span class="token string">'巧'</span><span class="token punctuation">,</span> <span class="token string">'人'</span><span class="token punctuation">,</span> <span class="token string">'吟'</span><span class="token punctuation">,</span> <span class="token string">'竹'</span><span class="token punctuation">,</span> <span class="token string">'重'</span><span class="token punctuation">,</span> <span class="token string">'鸿'</span><span class="token punctuation">,</span> <span class="token string">'敬'</span><span class="token punctuation">,</span> <span class="token string">'依'</span><span class="token punctuation">,</span> <span class="token string">'进'</span><span class="token punctuation">,</span> <span class="token string">'台'</span><span class="token punctuation">,</span> <span class="token string">'左'</span><span class="token punctuation">,</span> <span class="token string">'亦'</span><span class="token punctuation">,</span> <span class="token string">'韵'</span><span class="token punctuation">,</span> <span class="token string">'钰'</span><span class="token punctuation">,</span> <span class="token string">'新'</span><span class="token punctuation">,</span> <span class="token string">'羽'</span><span class="token punctuation">,</span>    <span class="token string">'静'</span><span class="token punctuation">,</span> <span class="token string">'名'</span><span class="token punctuation">,</span> <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'仁'</span><span class="token punctuation">,</span> <span class="token string">'采'</span><span class="token punctuation">,</span> <span class="token string">'亭'</span><span class="token punctuation">,</span> <span class="token string">'妙'</span><span class="token punctuation">,</span> <span class="token string">'希'</span><span class="token punctuation">,</span> <span class="token string">'必'</span><span class="token punctuation">,</span> <span class="token string">'承'</span><span class="token punctuation">,</span> <span class="token string">'豪'</span><span class="token punctuation">,</span> <span class="token string">'吉'</span><span class="token punctuation">,</span> <span class="token string">'芷'</span><span class="token punctuation">,</span> <span class="token string">'上'</span><span class="token punctuation">,</span> <span class="token string">'石'</span><span class="token punctuation">,</span> <span class="token string">'冠'</span><span class="token punctuation">,</span> <span class="token string">'威'</span><span class="token punctuation">,</span> <span class="token string">'又'</span><span class="token punctuation">,</span> <span class="token string">'辛'</span><span class="token punctuation">,</span> <span class="token string">'奕'</span><span class="token punctuation">,</span> <span class="token string">'雅'</span><span class="token punctuation">,</span> <span class="token string">'泓'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'伶'</span><span class="token punctuation">,</span> <span class="token string">'玫'</span><span class="token punctuation">,</span> <span class="token string">'定'</span><span class="token punctuation">,</span> <span class="token string">'世'</span><span class="token punctuation">,</span> <span class="token string">'皓'</span><span class="token punctuation">,</span> <span class="token string">'协'</span><span class="token punctuation">,</span> <span class="token string">'芸'</span><span class="token punctuation">,</span> <span class="token string">'政'</span><span class="token punctuation">,</span> <span class="token string">'洁'</span><span class="token punctuation">,</span> <span class="token string">'祥'</span><span class="token punctuation">,</span> <span class="token string">'清'</span><span class="token punctuation">,</span> <span class="token string">'光'</span><span class="token punctuation">,</span> <span class="token string">'贞'</span><span class="token punctuation">,</span> <span class="token string">'翠'</span><span class="token punctuation">,</span> <span class="token string">'纯'</span><span class="token punctuation">,</span> <span class="token string">'伟'</span><span class="token punctuation">,</span> <span class="token string">'振'</span><span class="token punctuation">,</span> <span class="token string">'庭'</span><span class="token punctuation">,</span> <span class="token string">'易'</span><span class="token punctuation">,</span> <span class="token string">'香'</span><span class="token punctuation">,</span> <span class="token string">'永'</span><span class="token punctuation">,</span> <span class="token string">'皇'</span><span class="token punctuation">,</span>    <span class="token string">'茜'</span><span class="token punctuation">,</span> <span class="token string">'良'</span><span class="token punctuation">,</span> <span class="token string">'敏'</span><span class="token punctuation">,</span> <span class="token string">'燕'</span><span class="token punctuation">,</span> <span class="token string">'俊'</span><span class="token punctuation">,</span> <span class="token string">'月'</span><span class="token punctuation">,</span> <span class="token string">'民'</span><span class="token punctuation">,</span> <span class="token string">'隆'</span><span class="token punctuation">,</span> <span class="token string">'侑'</span><span class="token punctuation">,</span> <span class="token string">'诗'</span><span class="token punctuation">,</span> <span class="token string">'心'</span><span class="token punctuation">,</span> <span class="token string">'友'</span><span class="token punctuation">,</span> <span class="token string">'致'</span><span class="token punctuation">,</span> <span class="token string">'贤'</span><span class="token punctuation">,</span> <span class="token string">'宛'</span><span class="token punctuation">,</span> <span class="token string">'奇'</span><span class="token punctuation">,</span> <span class="token string">'玲'</span><span class="token punctuation">,</span> <span class="token string">'志'</span><span class="token punctuation">,</span> <span class="token string">'宪'</span><span class="token punctuation">,</span> <span class="token string">'启'</span><span class="token punctuation">,</span> <span class="token string">'亚'</span><span class="token punctuation">,</span> <span class="token string">'盈'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'睿'</span><span class="token punctuation">,</span> <span class="token string">'涵'</span><span class="token punctuation">,</span> <span class="token string">'柔'</span><span class="token punctuation">,</span> <span class="token string">'萱'</span><span class="token punctuation">,</span> <span class="token string">'昀'</span><span class="token punctuation">,</span> <span class="token string">'伦'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">,</span> <span class="token string">'季'</span><span class="token punctuation">,</span> <span class="token string">'玮'</span><span class="token punctuation">,</span> <span class="token string">'凤'</span><span class="token punctuation">,</span> <span class="token string">'善'</span><span class="token punctuation">,</span> <span class="token string">'云'</span><span class="token punctuation">,</span> <span class="token string">'祯'</span><span class="token punctuation">,</span> <span class="token string">'幸'</span><span class="token punctuation">,</span> <span class="token string">'宏'</span><span class="token punctuation">,</span> <span class="token string">'可'</span><span class="token punctuation">,</span> <span class="token string">'信'</span><span class="token punctuation">,</span> <span class="token string">'天'</span><span class="token punctuation">,</span> <span class="token string">'宗'</span><span class="token punctuation">,</span> <span class="token string">'宜'</span><span class="token punctuation">,</span> <span class="token string">'忆'</span><span class="token punctuation">,</span> <span class="token string">'康'</span><span class="token punctuation">,</span>    <span class="token string">'翰'</span><span class="token punctuation">,</span> <span class="token string">'正'</span><span class="token punctuation">,</span> <span class="token string">'丽'</span><span class="token punctuation">,</span> <span class="token string">'翔'</span><span class="token punctuation">,</span> <span class="token string">'少'</span><span class="token punctuation">,</span> <span class="token string">'朝'</span><span class="token punctuation">,</span> <span class="token string">'倩'</span><span class="token punctuation">,</span> <span class="token string">'圣'</span><span class="token punctuation">,</span> <span class="token string">'钧'</span><span class="token punctuation">,</span> <span class="token string">'琬'</span><span class="token punctuation">,</span> <span class="token string">'铭'</span><span class="token punctuation">,</span> <span class="token string">'学'</span><span class="token punctuation">,</span> <span class="token string">'幼'</span><span class="token punctuation">,</span> <span class="token string">'立'</span><span class="token punctuation">,</span> <span class="token string">'蕙'</span><span class="token punctuation">,</span> <span class="token string">'青'</span><span class="token punctuation">,</span> <span class="token string">'枝'</span><span class="token punctuation">,</span> <span class="token string">'庆'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span>listl <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'盛'</span><span class="token punctuation">,</span> <span class="token string">'斌'</span><span class="token punctuation">,</span> <span class="token string">'铃'</span><span class="token punctuation">,</span> <span class="token string">'峰'</span><span class="token punctuation">,</span> <span class="token string">'志'</span><span class="token punctuation">,</span> <span class="token string">'原'</span><span class="token punctuation">,</span> <span class="token string">'莲'</span><span class="token punctuation">,</span> <span class="token string">'扬'</span><span class="token punctuation">,</span> <span class="token string">'全'</span><span class="token punctuation">,</span> <span class="token string">'茂'</span><span class="token punctuation">,</span> <span class="token string">'辰'</span><span class="token punctuation">,</span> <span class="token string">'彰'</span><span class="token punctuation">,</span> <span class="token string">'臻'</span><span class="token punctuation">,</span> <span class="token string">'竹'</span><span class="token punctuation">,</span> <span class="token string">'翰'</span><span class="token punctuation">,</span> <span class="token string">'静'</span><span class="token punctuation">,</span> <span class="token string">'妹'</span><span class="token punctuation">,</span> <span class="token string">'霖'</span><span class="token punctuation">,</span> <span class="token string">'添'</span><span class="token punctuation">,</span> <span class="token string">'吟'</span><span class="token punctuation">,</span> <span class="token string">'廷'</span><span class="token punctuation">,</span> <span class="token string">'正'</span><span class="token punctuation">,</span>    <span class="token string">'奇'</span><span class="token punctuation">,</span> <span class="token string">'平'</span><span class="token punctuation">,</span> <span class="token string">'安'</span><span class="token punctuation">,</span> <span class="token string">'柔'</span><span class="token punctuation">,</span> <span class="token string">'毓'</span><span class="token punctuation">,</span> <span class="token string">'贵'</span><span class="token punctuation">,</span> <span class="token string">'宪'</span><span class="token punctuation">,</span> <span class="token string">'怡'</span><span class="token punctuation">,</span> <span class="token string">'秋'</span><span class="token punctuation">,</span> <span class="token string">'茜'</span><span class="token punctuation">,</span> <span class="token string">'和'</span><span class="token punctuation">,</span> <span class="token string">'玉'</span><span class="token punctuation">,</span> <span class="token string">'泉'</span><span class="token punctuation">,</span> <span class="token string">'珍'</span><span class="token punctuation">,</span> <span class="token string">'季'</span><span class="token punctuation">,</span> <span class="token string">'娇'</span><span class="token punctuation">,</span> <span class="token string">'盈'</span><span class="token punctuation">,</span> <span class="token string">'蓉'</span><span class="token punctuation">,</span> <span class="token string">'仪'</span><span class="token punctuation">,</span> <span class="token string">'群'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">,</span> <span class="token string">'忠'</span><span class="token punctuation">,</span>    <span class="token string">'慧'</span><span class="token punctuation">,</span> <span class="token string">'睿'</span><span class="token punctuation">,</span> <span class="token string">'军'</span><span class="token punctuation">,</span> <span class="token string">'友'</span><span class="token punctuation">,</span> <span class="token string">'威'</span><span class="token punctuation">,</span> <span class="token string">'云'</span><span class="token punctuation">,</span> <span class="token string">'玲'</span><span class="token punctuation">,</span> <span class="token string">'康'</span><span class="token punctuation">,</span> <span class="token string">'彬'</span><span class="token punctuation">,</span> <span class="token string">'雅'</span><span class="token punctuation">,</span> <span class="token string">'勋'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">,</span> <span class="token string">'帆'</span><span class="token punctuation">,</span> <span class="token string">'君'</span><span class="token punctuation">,</span> <span class="token string">'琴'</span><span class="token punctuation">,</span> <span class="token string">'毅'</span><span class="token punctuation">,</span> <span class="token string">'玫'</span><span class="token punctuation">,</span> <span class="token string">'璇'</span><span class="token punctuation">,</span> <span class="token string">'淑'</span><span class="token punctuation">,</span> <span class="token string">'秀'</span><span class="token punctuation">,</span> <span class="token string">'琦'</span><span class="token punctuation">,</span> <span class="token string">'玮'</span><span class="token punctuation">,</span>    <span class="token string">'媛'</span><span class="token punctuation">,</span> <span class="token string">'逸'</span><span class="token punctuation">,</span> <span class="token string">'博'</span><span class="token punctuation">,</span> <span class="token string">'筑'</span><span class="token punctuation">,</span> <span class="token string">'维'</span><span class="token punctuation">,</span> <span class="token string">'韦'</span><span class="token punctuation">,</span> <span class="token string">'均'</span><span class="token punctuation">,</span> <span class="token string">'昌'</span><span class="token punctuation">,</span> <span class="token string">'欣'</span><span class="token punctuation">,</span> <span class="token string">'合'</span><span class="token punctuation">,</span> <span class="token string">'强'</span><span class="token punctuation">,</span> <span class="token string">'法'</span><span class="token punctuation">,</span> <span class="token string">'冰'</span><span class="token punctuation">,</span> <span class="token string">'其'</span><span class="token punctuation">,</span> <span class="token string">'昀'</span><span class="token punctuation">,</span> <span class="token string">'心'</span><span class="token punctuation">,</span> <span class="token string">'惠'</span><span class="token punctuation">,</span> <span class="token string">'甄'</span><span class="token punctuation">,</span> <span class="token string">'薇'</span><span class="token punctuation">,</span> <span class="token string">'旺'</span><span class="token punctuation">,</span> <span class="token string">'纬'</span><span class="token punctuation">,</span> <span class="token string">'南'</span><span class="token punctuation">,</span>    <span class="token string">'辛'</span><span class="token punctuation">,</span> <span class="token string">'伯'</span><span class="token punctuation">,</span> <span class="token string">'凤'</span><span class="token punctuation">,</span> <span class="token string">'祥'</span><span class="token punctuation">,</span> <span class="token string">'倩'</span><span class="token punctuation">,</span> <span class="token string">'舜'</span><span class="token punctuation">,</span> <span class="token string">'菱'</span><span class="token punctuation">,</span> <span class="token string">'英'</span><span class="token punctuation">,</span> <span class="token string">'美'</span><span class="token punctuation">,</span> <span class="token string">'虹'</span><span class="token punctuation">,</span> <span class="token string">'松'</span><span class="token punctuation">,</span> <span class="token string">'星'</span><span class="token punctuation">,</span> <span class="token string">'辉'</span><span class="token punctuation">,</span> <span class="token string">'元'</span><span class="token punctuation">,</span> <span class="token string">'圣'</span><span class="token punctuation">,</span> <span class="token string">'隆'</span><span class="token punctuation">,</span> <span class="token string">'龙'</span><span class="token punctuation">,</span> <span class="token string">'花'</span><span class="token punctuation">,</span> <span class="token string">'苹'</span><span class="token punctuation">,</span> <span class="token string">'筠'</span><span class="token punctuation">,</span> <span class="token string">'任'</span><span class="token punctuation">,</span> <span class="token string">'纶'</span><span class="token punctuation">,</span>    <span class="token string">'岚'</span><span class="token punctuation">,</span> <span class="token string">'妃'</span><span class="token punctuation">,</span> <span class="token string">'昆'</span><span class="token punctuation">,</span> <span class="token string">'贤'</span><span class="token punctuation">,</span> <span class="token string">'生'</span><span class="token punctuation">,</span> <span class="token string">'瑄'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">,</span> <span class="token string">'兴'</span><span class="token punctuation">,</span> <span class="token string">'伟'</span><span class="token punctuation">,</span> <span class="token string">'宝'</span><span class="token punctuation">,</span> <span class="token string">'沛'</span><span class="token punctuation">,</span> <span class="token string">'馨'</span><span class="token punctuation">,</span> <span class="token string">'珮'</span><span class="token punctuation">,</span> <span class="token string">'蓁'</span><span class="token punctuation">,</span> <span class="token string">'蕙'</span><span class="token punctuation">,</span> <span class="token string">'钰'</span><span class="token punctuation">,</span> <span class="token string">'杰'</span><span class="token punctuation">,</span> <span class="token string">'劭'</span><span class="token punctuation">,</span> <span class="token string">'旭'</span><span class="token punctuation">,</span> <span class="token string">'宏'</span><span class="token punctuation">,</span> <span class="token string">'庭'</span><span class="token punctuation">,</span> <span class="token string">'坤'</span><span class="token punctuation">,</span>    <span class="token string">'轩'</span><span class="token punctuation">,</span> <span class="token string">'修'</span><span class="token punctuation">,</span> <span class="token string">'芸'</span><span class="token punctuation">,</span> <span class="token string">'佳'</span><span class="token punctuation">,</span> <span class="token string">'月'</span><span class="token punctuation">,</span> <span class="token string">'桦'</span><span class="token punctuation">,</span> <span class="token string">'来'</span><span class="token punctuation">,</span> <span class="token string">'霞'</span><span class="token punctuation">,</span> <span class="token string">'孜'</span><span class="token punctuation">,</span> <span class="token string">'乐'</span><span class="token punctuation">,</span> <span class="token string">'达'</span><span class="token punctuation">,</span> <span class="token string">'敏'</span><span class="token punctuation">,</span> <span class="token string">'善'</span><span class="token punctuation">,</span> <span class="token string">'亦'</span><span class="token punctuation">,</span> <span class="token string">'超'</span><span class="token punctuation">,</span> <span class="token string">'钧'</span><span class="token punctuation">,</span> <span class="token string">'天'</span><span class="token punctuation">,</span> <span class="token string">'羽'</span><span class="token punctuation">,</span> <span class="token string">'刚'</span><span class="token punctuation">,</span> <span class="token string">'绿'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">,</span> <span class="token string">'纯'</span><span class="token punctuation">,</span>    <span class="token string">'侑'</span><span class="token punctuation">,</span> <span class="token string">'士'</span><span class="token punctuation">,</span> <span class="token string">'名'</span><span class="token punctuation">,</span> <span class="token string">'雯'</span><span class="token punctuation">,</span> <span class="token string">'义'</span><span class="token punctuation">,</span> <span class="token string">'亚'</span><span class="token punctuation">,</span> <span class="token string">'琬'</span><span class="token punctuation">,</span> <span class="token string">'芷'</span><span class="token punctuation">,</span> <span class="token string">'尧'</span><span class="token punctuation">,</span> <span class="token string">'伦'</span><span class="token punctuation">,</span> <span class="token string">'新'</span><span class="token punctuation">,</span> <span class="token string">'乔'</span><span class="token punctuation">,</span> <span class="token string">'雄'</span><span class="token punctuation">,</span> <span class="token string">'洁'</span><span class="token punctuation">,</span> <span class="token string">'幸'</span><span class="token punctuation">,</span> <span class="token string">'娥'</span><span class="token punctuation">,</span> <span class="token string">'恩'</span><span class="token punctuation">,</span> <span class="token string">'玟'</span><span class="token punctuation">,</span> <span class="token string">'书'</span><span class="token punctuation">,</span> <span class="token string">'惟'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">,</span> <span class="token string">'瑜'</span><span class="token punctuation">,</span>    <span class="token string">'珊'</span><span class="token punctuation">,</span> <span class="token string">'远'</span><span class="token punctuation">,</span> <span class="token string">'晴'</span><span class="token punctuation">,</span> <span class="token string">'彦'</span><span class="token punctuation">,</span> <span class="token string">'哲'</span><span class="token punctuation">,</span> <span class="token string">'瑞'</span><span class="token punctuation">,</span> <span class="token string">'琇'</span><span class="token punctuation">,</span> <span class="token string">'智'</span><span class="token punctuation">,</span> <span class="token string">'映'</span><span class="token punctuation">,</span> <span class="token string">'珠'</span><span class="token punctuation">,</span> <span class="token string">'鸿'</span><span class="token punctuation">,</span> <span class="token string">'梦'</span><span class="token punctuation">,</span> <span class="token string">'燕'</span><span class="token punctuation">,</span> <span class="token string">'人'</span><span class="token punctuation">,</span> <span class="token string">'春'</span><span class="token punctuation">,</span> <span class="token string">'儒'</span><span class="token punctuation">,</span> <span class="token string">'卿'</span><span class="token punctuation">,</span> <span class="token string">'佩'</span><span class="token punctuation">,</span> <span class="token string">'祯'</span><span class="token punctuation">,</span> <span class="token string">'良'</span><span class="token punctuation">,</span> <span class="token string">'清'</span><span class="token punctuation">,</span> <span class="token string">'欢'</span><span class="token punctuation">,</span>    <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'麟'</span><span class="token punctuation">,</span> <span class="token string">'骏'</span><span class="token punctuation">,</span> <span class="token string">'岳'</span><span class="token punctuation">,</span> <span class="token string">'财'</span><span class="token punctuation">,</span> <span class="token string">'芳'</span><span class="token punctuation">,</span> <span class="token string">'诚'</span><span class="token punctuation">,</span> <span class="token string">'文'</span><span class="token punctuation">,</span> <span class="token string">'真'</span><span class="token punctuation">,</span> <span class="token string">'柏'</span><span class="token punctuation">,</span> <span class="token string">'湖'</span><span class="token punctuation">,</span> <span class="token string">'菁'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">'佑'</span><span class="token punctuation">,</span> <span class="token string">'颖'</span><span class="token punctuation">,</span> <span class="token string">'阳'</span><span class="token punctuation">,</span> <span class="token string">'水'</span><span class="token punctuation">,</span> <span class="token string">'枝'</span><span class="token punctuation">,</span> <span class="token string">'茹'</span><span class="token punctuation">,</span> <span class="token string">'德'</span><span class="token punctuation">,</span> <span class="token string">'豪'</span><span class="token punctuation">,</span>    <span class="token string">'谕'</span><span class="token punctuation">,</span> <span class="token string">'华'</span><span class="token punctuation">,</span> <span class="token string">'裕'</span><span class="token punctuation">,</span> <span class="token string">'山'</span><span class="token punctuation">,</span> <span class="token string">'孝'</span><span class="token punctuation">,</span> <span class="token string">'依'</span><span class="token punctuation">,</span> <span class="token string">'木'</span><span class="token punctuation">,</span> <span class="token string">'宣'</span><span class="token punctuation">,</span> <span class="token string">'涵'</span><span class="token punctuation">,</span> <span class="token string">'凯'</span><span class="token punctuation">,</span> <span class="token string">'源'</span><span class="token punctuation">,</span> <span class="token string">'韵'</span><span class="token punctuation">,</span> <span class="token string">'成'</span><span class="token punctuation">,</span> <span class="token string">'育'</span><span class="token punctuation">,</span> <span class="token string">'喜'</span><span class="token punctuation">,</span> <span class="token string">'宁'</span><span class="token punctuation">,</span> <span class="token string">'郁'</span><span class="token punctuation">,</span> <span class="token string">'仁'</span><span class="token punctuation">,</span> <span class="token string">'仲'</span><span class="token punctuation">,</span> <span class="token string">'希'</span><span class="token punctuation">,</span> <span class="token string">'芬'</span><span class="token punctuation">,</span> <span class="token string">'雨'</span><span class="token punctuation">,</span>    <span class="token string">'瑶'</span><span class="token punctuation">,</span> <span class="token string">'翔'</span><span class="token punctuation">,</span> <span class="token string">'火'</span><span class="token punctuation">,</span> <span class="token string">'铭'</span><span class="token punctuation">,</span> <span class="token string">'芝'</span><span class="token punctuation">,</span> <span class="token string">'东'</span><span class="token punctuation">,</span> <span class="token string">'定'</span><span class="token punctuation">,</span> <span class="token string">'璋'</span><span class="token punctuation">,</span> <span class="token string">'意'</span><span class="token punctuation">,</span> <span class="token string">'江'</span><span class="token punctuation">,</span> <span class="token string">'靖'</span><span class="token punctuation">,</span> <span class="token string">'民'</span><span class="token punctuation">,</span> <span class="token string">'易'</span><span class="token punctuation">,</span> <span class="token string">'如'</span><span class="token punctuation">,</span> <span class="token string">'淳'</span><span class="token punctuation">,</span> <span class="token string">'光'</span><span class="token punctuation">,</span> <span class="token string">'发'</span><span class="token punctuation">,</span> <span class="token string">'启'</span><span class="token punctuation">,</span> <span class="token string">'俐'</span><span class="token punctuation">,</span> <span class="token string">'俊'</span><span class="token punctuation">,</span> <span class="token string">'礼'</span><span class="token punctuation">,</span> <span class="token string">'齐'</span><span class="token punctuation">,</span>    <span class="token string">'庆'</span><span class="token punctuation">,</span> <span class="token string">'谚'</span><span class="token punctuation">,</span> <span class="token string">'香'</span><span class="token punctuation">,</span> <span class="token string">'富'</span><span class="token punctuation">,</span> <span class="token string">'妤'</span><span class="token punctuation">,</span> <span class="token string">'宜'</span><span class="token punctuation">,</span> <span class="token string">'弘'</span><span class="token punctuation">,</span> <span class="token string">'学'</span><span class="token punctuation">,</span> <span class="token string">'汉'</span><span class="token punctuation">,</span> <span class="token string">'政'</span><span class="token punctuation">,</span> <span class="token string">'以'</span><span class="token punctuation">,</span> <span class="token string">'伶'</span><span class="token punctuation">,</span> <span class="token string">'勇'</span><span class="token punctuation">,</span> <span class="token string">'绮'</span><span class="token punctuation">,</span> <span class="token string">'凡'</span><span class="token punctuation">,</span> <span class="token string">'吉'</span><span class="token punctuation">,</span> <span class="token string">'梅'</span><span class="token punctuation">,</span> <span class="token string">'慈'</span><span class="token punctuation">,</span> <span class="token string">'容'</span><span class="token punctuation">,</span> <span class="token string">'明'</span><span class="token punctuation">,</span> <span class="token string">'荣'</span><span class="token punctuation">,</span> <span class="token string">'萍'</span><span class="token punctuation">,</span>    <span class="token string">'贞'</span><span class="token punctuation">,</span> <span class="token string">'娟'</span><span class="token punctuation">,</span> <span class="token string">'信'</span><span class="token punctuation">,</span> <span class="token string">'青'</span><span class="token punctuation">,</span> <span class="token string">'皓'</span><span class="token punctuation">,</span> <span class="token string">'雪'</span><span class="token punctuation">,</span> <span class="token string">'治'</span><span class="token punctuation">,</span> <span class="token string">'琳'</span><span class="token punctuation">,</span> <span class="token string">'紫'</span><span class="token punctuation">,</span> <span class="token string">'兰'</span><span class="token punctuation">,</span> <span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token string">'婷'</span><span class="token punctuation">,</span> <span class="token string">'莹'</span><span class="token punctuation">,</span> <span class="token string">'嘉'</span><span class="token punctuation">,</span> <span class="token string">'恭'</span><span class="token punctuation">,</span> <span class="token string">'萱'</span><span class="token punctuation">,</span> <span class="token string">'顺'</span><span class="token punctuation">,</span> <span class="token string">'行'</span><span class="token punctuation">,</span> <span class="token string">'琪'</span><span class="token punctuation">,</span> <span class="token string">'念'</span><span class="token punctuation">,</span> <span class="token string">'宇'</span><span class="token punctuation">,</span> <span class="token string">'海'</span><span class="token punctuation">,</span>    <span class="token string">'坚'</span><span class="token punctuation">,</span> <span class="token string">'福'</span><span class="token punctuation">,</span> <span class="token string">'绍'</span><span class="token punctuation">,</span> <span class="token string">'桂'</span><span class="token punctuation">]</span><span class="token comment"># 生成10000个人名</span><span class="token keyword">for</span> WJ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># for WJ in range(1, 10001):</span>    <span class="token comment"># 名字格式</span>    name <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>listf<span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>listm<span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>listl<span class="token punctuation">)</span>    <span class="token comment"># 打开文件,(a+)追加内容</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span>    <span class="token comment"># 写入格式</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment"># 关闭文件</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析 "></a><font size=5><strong>数据分析</strong> </font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># _*_ coding: utf-8 _*_</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span>time1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 设置图片字体</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'SimHei'</span><span class="token comment"># 打开文件,(r)读取内容</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:/PyCharm/1211/file.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment"># 将读取的内容存入变量</span><span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 格式化成字典</span>b <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>Counter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 显示重复次数超过50的人名</span><span class="token comment"># print(&#123;key:value for key,value in b.items()if value > 50&#125;) </span><span class="token comment"># 整理排序,(reverse=True)按从大到小排序</span>res <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> b<span class="token punctuation">:</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 取前十</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 格式化打印格式</span><span class="token comment"># df2 = pd.DataFrame(&#123;"名字": df[0], "次数": df[1]&#125;)</span><span class="token comment"># 打印名字和重复次数</span><span class="token comment"># print(df2)</span><span class="token comment"># x,y轴的内容,以列表的形式赋值</span>x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># x,y轴的坐标系名称字体的大小的设定</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'名字'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'重复次数'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token comment"># 设置x,y轴的条形图信息,宽度,颜色等</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token comment"># 传值,把x,y列表的'值'导入到坐标系</span><span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token string">'%.0f'</span> <span class="token operator">%</span> b<span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 生成的图片信息</span>file_name <span class="token operator">=</span> <span class="token string">"重名次数统计图.jpg"</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"重名次数统计图"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>time2 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>time3 <span class="token operator">=</span> time2 <span class="token operator">-</span> time1<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该循环程序运行时间: '</span><span class="token punctuation">,</span> time3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看图片"><a href="#查看图片" class="headerlink" title="查看图片 "></a><font size=5><strong>查看图片</strong> </font></h2><p><img src="/medias/drawing-bed/python0/0.jpg" alt="重名次数统计图.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL造数据--学习</title>
      <link href="/posts/2cc1.html"/>
      <url>/posts/2cc1.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h2 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表 "></a><font size=5><strong>创建数据库和表</strong> </font></h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># sql语句</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">'utf8'</span> <span class="token keyword">COLLATE</span> <span class="token string">'utf8_bin'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>student<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>gender<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>cclass<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>yuwen<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>shuxue<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>english<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>total<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据 "></a><font size=5><strong>导入数据</strong> </font></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># @Time     : 2019/12/9 17:23</span><span class="token comment"># @Author   : wangjun</span><span class="token comment"># @Mail     : 158970251@qq.com</span><span class="token comment"># @File     : mysql.py</span><span class="token comment"># @Software : PyCharm</span><span class="token comment"># _*_ coding: utf-8 _*_</span><span class="token keyword">import</span> pymysql<span class="token keyword">import</span> random<span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 姓</span>listf <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'王'</span><span class="token punctuation">,</span> <span class="token string">'李'</span><span class="token punctuation">,</span> <span class="token string">'张'</span><span class="token punctuation">,</span> <span class="token string">'刘'</span><span class="token punctuation">,</span> <span class="token string">'陈'</span><span class="token punctuation">,</span> <span class="token string">'杨'</span><span class="token punctuation">,</span> <span class="token string">'黄'</span><span class="token punctuation">,</span> <span class="token string">'赵'</span><span class="token punctuation">,</span> <span class="token string">'吴'</span><span class="token punctuation">,</span> <span class="token string">'周'</span><span class="token punctuation">,</span> <span class="token string">'徐'</span><span class="token punctuation">,</span> <span class="token string">'孙'</span><span class="token punctuation">,</span> <span class="token string">'马'</span><span class="token punctuation">,</span> <span class="token string">'朱'</span><span class="token punctuation">,</span> <span class="token string">'胡'</span><span class="token punctuation">,</span> <span class="token string">'郭'</span><span class="token punctuation">,</span> <span class="token string">'何'</span><span class="token punctuation">,</span> <span class="token string">'高'</span><span class="token punctuation">,</span> <span class="token string">'林'</span><span class="token punctuation">,</span> <span class="token string">'罗'</span><span class="token punctuation">,</span>    <span class="token string">'郑'</span><span class="token punctuation">,</span> <span class="token string">'梁'</span><span class="token punctuation">,</span> <span class="token string">'谢'</span><span class="token punctuation">,</span> <span class="token string">'宋'</span><span class="token punctuation">,</span> <span class="token string">'唐'</span><span class="token punctuation">,</span> <span class="token string">'许'</span><span class="token punctuation">,</span> <span class="token string">'韩'</span><span class="token punctuation">,</span> <span class="token string">'冯'</span><span class="token punctuation">,</span> <span class="token string">'邓'</span><span class="token punctuation">,</span> <span class="token string">'曹'</span><span class="token punctuation">,</span> <span class="token string">'彭'</span><span class="token punctuation">,</span> <span class="token string">'曾'</span><span class="token punctuation">,</span> <span class="token string">'肖'</span><span class="token punctuation">,</span> <span class="token string">'田'</span><span class="token punctuation">,</span> <span class="token string">'董'</span><span class="token punctuation">,</span> <span class="token string">'袁'</span><span class="token punctuation">,</span> <span class="token string">'潘'</span><span class="token punctuation">,</span> <span class="token string">'于'</span><span class="token punctuation">,</span> <span class="token string">'蒋'</span><span class="token punctuation">,</span> <span class="token string">'蔡'</span><span class="token punctuation">,</span>    <span class="token string">'余'</span><span class="token punctuation">,</span> <span class="token string">'杜'</span><span class="token punctuation">,</span> <span class="token string">'叶'</span><span class="token punctuation">,</span> <span class="token string">'程'</span><span class="token punctuation">,</span> <span class="token string">'苏'</span><span class="token punctuation">,</span> <span class="token string">'魏'</span><span class="token punctuation">,</span> <span class="token string">'吕'</span><span class="token punctuation">,</span> <span class="token string">'丁'</span><span class="token punctuation">,</span> <span class="token string">'任'</span><span class="token punctuation">,</span> <span class="token string">'沈'</span><span class="token punctuation">,</span> <span class="token string">'姚'</span><span class="token punctuation">,</span> <span class="token string">'卢'</span><span class="token punctuation">,</span> <span class="token string">'姜'</span><span class="token punctuation">,</span> <span class="token string">'崔'</span><span class="token punctuation">,</span> <span class="token string">'钟'</span><span class="token punctuation">,</span> <span class="token string">'谭'</span><span class="token punctuation">,</span> <span class="token string">'陆'</span><span class="token punctuation">,</span> <span class="token string">'汪'</span><span class="token punctuation">,</span> <span class="token string">'范'</span><span class="token punctuation">,</span> <span class="token string">'金'</span><span class="token punctuation">,</span>    <span class="token string">'石'</span><span class="token punctuation">,</span> <span class="token string">'廖'</span><span class="token punctuation">,</span> <span class="token string">'贾'</span><span class="token punctuation">,</span> <span class="token string">'夏'</span><span class="token punctuation">,</span> <span class="token string">'韦'</span><span class="token punctuation">,</span> <span class="token string">'付'</span><span class="token punctuation">,</span> <span class="token string">'方'</span><span class="token punctuation">,</span> <span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token string">'邹'</span><span class="token punctuation">,</span> <span class="token string">'孟'</span><span class="token punctuation">,</span> <span class="token string">'熊'</span><span class="token punctuation">,</span> <span class="token string">'秦'</span><span class="token punctuation">,</span> <span class="token string">'邱'</span><span class="token punctuation">,</span> <span class="token string">'江'</span><span class="token punctuation">,</span> <span class="token string">'尹'</span><span class="token punctuation">,</span> <span class="token string">'薛'</span><span class="token punctuation">,</span> <span class="token string">'闫'</span><span class="token punctuation">,</span> <span class="token string">'段'</span><span class="token punctuation">,</span> <span class="token string">'雷'</span><span class="token punctuation">,</span> <span class="token string">'侯'</span><span class="token punctuation">,</span>    <span class="token string">'龙'</span><span class="token punctuation">,</span> <span class="token string">'史'</span><span class="token punctuation">,</span> <span class="token string">'陶'</span><span class="token punctuation">,</span> <span class="token string">'黎'</span><span class="token punctuation">,</span> <span class="token string">'贺'</span><span class="token punctuation">,</span> <span class="token string">'顾'</span><span class="token punctuation">,</span> <span class="token string">'毛'</span><span class="token punctuation">,</span> <span class="token string">'郝'</span><span class="token punctuation">,</span> <span class="token string">'龚'</span><span class="token punctuation">,</span> <span class="token string">'邵'</span><span class="token punctuation">,</span> <span class="token string">'万'</span><span class="token punctuation">,</span> <span class="token string">'钱'</span><span class="token punctuation">,</span> <span class="token string">'严'</span><span class="token punctuation">,</span> <span class="token string">'覃'</span><span class="token punctuation">,</span> <span class="token string">'武'</span><span class="token punctuation">,</span> <span class="token string">'戴'</span><span class="token punctuation">,</span> <span class="token string">'莫'</span><span class="token punctuation">,</span> <span class="token string">'孔'</span><span class="token punctuation">,</span> <span class="token string">'向'</span><span class="token punctuation">,</span> <span class="token string">'汤'</span><span class="token punctuation">]</span><span class="token comment"># 中间穿插的''是为了生成两个字的名字</span>listm <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'兰'</span><span class="token punctuation">,</span> <span class="token string">'旺'</span><span class="token punctuation">,</span> <span class="token string">'瑶'</span><span class="token punctuation">,</span> <span class="token string">'任'</span><span class="token punctuation">,</span> <span class="token string">'晴'</span><span class="token punctuation">,</span> <span class="token string">'镇'</span><span class="token punctuation">,</span> <span class="token string">'乔'</span><span class="token punctuation">,</span> <span class="token string">'欣'</span><span class="token punctuation">,</span> <span class="token string">'昆'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">,</span> <span class="token string">'筱'</span><span class="token punctuation">,</span> <span class="token string">'秉'</span><span class="token punctuation">,</span> <span class="token string">'曜'</span><span class="token punctuation">,</span> <span class="token string">'忠'</span><span class="token punctuation">,</span> <span class="token string">'真'</span><span class="token punctuation">,</span> <span class="token string">'凯'</span><span class="token punctuation">,</span> <span class="token string">'雯'</span><span class="token punctuation">,</span> <span class="token string">'懿'</span><span class="token punctuation">,</span> <span class="token string">'崇'</span><span class="token punctuation">,</span> <span class="token string">'成'</span><span class="token punctuation">,</span> <span class="token string">'顺'</span><span class="token punctuation">,</span> <span class="token string">'博'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'孟'</span><span class="token punctuation">,</span> <span class="token string">'琦'</span><span class="token punctuation">,</span> <span class="token string">'兆'</span><span class="token punctuation">,</span> <span class="token string">'佑'</span><span class="token punctuation">,</span> <span class="token string">'健'</span><span class="token punctuation">,</span> <span class="token string">'金'</span><span class="token punctuation">,</span> <span class="token string">'宥'</span><span class="token punctuation">,</span> <span class="token string">'贵'</span><span class="token punctuation">,</span> <span class="token string">'盛'</span><span class="token punctuation">,</span> <span class="token string">'元'</span><span class="token punctuation">,</span> <span class="token string">'珍'</span><span class="token punctuation">,</span> <span class="token string">'辰'</span><span class="token punctuation">,</span> <span class="token string">'初'</span><span class="token punctuation">,</span> <span class="token string">'慈'</span><span class="token punctuation">,</span> <span class="token string">'勇'</span><span class="token punctuation">,</span> <span class="token string">'仲'</span><span class="token punctuation">,</span> <span class="token string">'思'</span><span class="token punctuation">,</span> <span class="token string">'雪'</span><span class="token punctuation">,</span> <span class="token string">'右'</span><span class="token punctuation">,</span> <span class="token string">'琼'</span><span class="token punctuation">,</span> <span class="token string">'华'</span><span class="token punctuation">,</span> <span class="token string">'其'</span><span class="token punctuation">,</span>    <span class="token string">'火'</span><span class="token punctuation">,</span> <span class="token string">'彦'</span><span class="token punctuation">,</span> <span class="token string">'安'</span><span class="token punctuation">,</span> <span class="token string">'婷'</span><span class="token punctuation">,</span> <span class="token string">'曼'</span><span class="token punctuation">,</span> <span class="token string">'予'</span><span class="token punctuation">,</span> <span class="token string">'湖'</span><span class="token punctuation">,</span> <span class="token string">'绍'</span><span class="token punctuation">,</span> <span class="token string">'伊'</span><span class="token punctuation">,</span> <span class="token string">'以'</span><span class="token punctuation">,</span> <span class="token string">'宝'</span><span class="token punctuation">,</span> <span class="token string">'育'</span><span class="token punctuation">,</span> <span class="token string">'夙'</span><span class="token punctuation">,</span> <span class="token string">'富'</span><span class="token punctuation">,</span> <span class="token string">'武'</span><span class="token punctuation">,</span> <span class="token string">'品'</span><span class="token punctuation">,</span> <span class="token string">'玉'</span><span class="token punctuation">,</span> <span class="token string">'馨'</span><span class="token punctuation">,</span> <span class="token string">'家'</span><span class="token punctuation">,</span> <span class="token string">'山'</span><span class="token punctuation">,</span> <span class="token string">'美'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'常'</span><span class="token punctuation">,</span> <span class="token string">'扬'</span><span class="token punctuation">,</span> <span class="token string">'诚'</span><span class="token punctuation">,</span> <span class="token string">'士'</span><span class="token punctuation">,</span> <span class="token string">'姿'</span><span class="token punctuation">,</span> <span class="token string">'力'</span><span class="token punctuation">,</span> <span class="token string">'耀'</span><span class="token punctuation">,</span> <span class="token string">'竣'</span><span class="token punctuation">,</span> <span class="token string">'允'</span><span class="token punctuation">,</span> <span class="token string">'筠'</span><span class="token punctuation">,</span> <span class="token string">'瑜'</span><span class="token punctuation">,</span> <span class="token string">'舜'</span><span class="token punctuation">,</span> <span class="token string">'昌'</span><span class="token punctuation">,</span> <span class="token string">'冰'</span><span class="token punctuation">,</span> <span class="token string">'行'</span><span class="token punctuation">,</span> <span class="token string">'晓'</span><span class="token punctuation">,</span> <span class="token string">'轩'</span><span class="token punctuation">,</span> <span class="token string">'义'</span><span class="token punctuation">,</span> <span class="token string">'纬'</span><span class="token punctuation">,</span> <span class="token string">'淑'</span><span class="token punctuation">,</span> <span class="token string">'荣'</span><span class="token punctuation">,</span> <span class="token string">'海'</span><span class="token punctuation">,</span>    <span class="token string">'呈'</span><span class="token punctuation">,</span> <span class="token string">'素'</span><span class="token punctuation">,</span> <span class="token string">'之'</span><span class="token punctuation">,</span> <span class="token string">'碧'</span><span class="token punctuation">,</span> <span class="token string">'韦'</span><span class="token punctuation">,</span> <span class="token string">'峻'</span><span class="token punctuation">,</span> <span class="token string">'晏'</span><span class="token punctuation">,</span> <span class="token string">'胜'</span><span class="token punctuation">,</span> <span class="token string">'裕'</span><span class="token punctuation">,</span> <span class="token string">'惠'</span><span class="token punctuation">,</span> <span class="token string">'子'</span><span class="token punctuation">,</span> <span class="token string">'昭'</span><span class="token punctuation">,</span> <span class="token string">'骏'</span><span class="token punctuation">,</span> <span class="token string">'芳'</span><span class="token punctuation">,</span> <span class="token string">'凡'</span><span class="token punctuation">,</span> <span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token string">'恭'</span><span class="token punctuation">,</span> <span class="token string">'弘'</span><span class="token punctuation">,</span> <span class="token string">'明'</span><span class="token punctuation">,</span> <span class="token string">'兴'</span><span class="token punctuation">,</span> <span class="token string">'坚'</span><span class="token punctuation">,</span> <span class="token string">'紫'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'婉'</span><span class="token punctuation">,</span> <span class="token string">'芝'</span><span class="token punctuation">,</span> <span class="token string">'小'</span><span class="token punctuation">,</span> <span class="token string">'孝'</span><span class="token punctuation">,</span> <span class="token string">'翊'</span><span class="token punctuation">,</span> <span class="token string">'乐'</span><span class="token punctuation">,</span> <span class="token string">'如'</span><span class="token punctuation">,</span> <span class="token string">'姵'</span><span class="token punctuation">,</span> <span class="token string">'珮'</span><span class="token punctuation">,</span> <span class="token string">'智'</span><span class="token punctuation">,</span> <span class="token string">'惟'</span><span class="token punctuation">,</span> <span class="token string">'添'</span><span class="token punctuation">,</span> <span class="token string">'旻'</span><span class="token punctuation">,</span> <span class="token string">'宁'</span><span class="token punctuation">,</span> <span class="token string">'东'</span><span class="token punctuation">,</span> <span class="token string">'淳'</span><span class="token punctuation">,</span> <span class="token string">'柏'</span><span class="token punctuation">,</span> <span class="token string">'沛'</span><span class="token punctuation">,</span> <span class="token string">'合'</span><span class="token punctuation">,</span> <span class="token string">'国'</span><span class="token punctuation">,</span> <span class="token string">'宣'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">,</span>    <span class="token string">'伯'</span><span class="token punctuation">,</span> <span class="token string">'长'</span><span class="token punctuation">,</span> <span class="token string">'于'</span><span class="token punctuation">,</span> <span class="token string">'平'</span><span class="token punctuation">,</span> <span class="token string">'绿'</span><span class="token punctuation">,</span> <span class="token string">'维'</span><span class="token punctuation">,</span> <span class="token string">'舒'</span><span class="token punctuation">,</span> <span class="token string">'妤'</span><span class="token punctuation">,</span> <span class="token string">'南'</span><span class="token punctuation">,</span> <span class="token string">'昱'</span><span class="token punctuation">,</span> <span class="token string">'宇'</span><span class="token punctuation">,</span> <span class="token string">'岳'</span><span class="token punctuation">,</span> <span class="token string">'恩'</span><span class="token punctuation">,</span> <span class="token string">'礼'</span><span class="token punctuation">,</span> <span class="token string">'群'</span><span class="token punctuation">,</span> <span class="token string">'佩'</span><span class="token punctuation">,</span> <span class="token string">'军'</span><span class="token punctuation">,</span> <span class="token string">'璇'</span><span class="token punctuation">,</span> <span class="token string">'文'</span><span class="token punctuation">,</span> <span class="token string">'咏'</span><span class="token punctuation">,</span> <span class="token string">'介'</span><span class="token punctuation">,</span> <span class="token string">'喜'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'毅'</span><span class="token punctuation">,</span> <span class="token string">'君'</span><span class="token punctuation">,</span> <span class="token string">'劭'</span><span class="token punctuation">,</span> <span class="token string">'嘉'</span><span class="token punctuation">,</span> <span class="token string">'肇'</span><span class="token punctuation">,</span> <span class="token string">'法'</span><span class="token punctuation">,</span> <span class="token string">'逸'</span><span class="token punctuation">,</span> <span class="token string">'治'</span><span class="token punctuation">,</span> <span class="token string">'万'</span><span class="token punctuation">,</span> <span class="token string">'松'</span><span class="token punctuation">,</span> <span class="token string">'水'</span><span class="token punctuation">,</span> <span class="token string">'浩'</span><span class="token punctuation">,</span> <span class="token string">'莹'</span><span class="token punctuation">,</span> <span class="token string">'景'</span><span class="token punctuation">,</span> <span class="token string">'茂'</span><span class="token punctuation">,</span> <span class="token string">'绮'</span><span class="token punctuation">,</span> <span class="token string">'蓉'</span><span class="token punctuation">,</span> <span class="token string">'薇'</span><span class="token punctuation">,</span> <span class="token string">'郁'</span><span class="token punctuation">,</span> <span class="token string">'俞'</span><span class="token punctuation">,</span> <span class="token string">'和'</span><span class="token punctuation">,</span> <span class="token string">'坤'</span><span class="token punctuation">,</span>    <span class="token string">'毓'</span><span class="token punctuation">,</span> <span class="token string">'均'</span><span class="token punctuation">,</span> <span class="token string">'梦'</span><span class="token punctuation">,</span> <span class="token string">'培'</span><span class="token punctuation">,</span> <span class="token string">'与'</span><span class="token punctuation">,</span> <span class="token string">'廷'</span><span class="token punctuation">,</span> <span class="token string">'乃'</span><span class="token punctuation">,</span> <span class="token string">'勋'</span><span class="token punctuation">,</span> <span class="token string">'登'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">,</span> <span class="token string">'梅'</span><span class="token punctuation">,</span> <span class="token string">'千'</span><span class="token punctuation">,</span> <span class="token string">'书'</span><span class="token punctuation">,</span> <span class="token string">'欢'</span><span class="token punctuation">,</span> <span class="token string">'琇'</span><span class="token punctuation">,</span> <span class="token string">'念'</span><span class="token punctuation">,</span> <span class="token string">'玟'</span><span class="token punctuation">,</span> <span class="token string">'秋'</span><span class="token punctuation">,</span> <span class="token string">'颖'</span><span class="token punctuation">,</span> <span class="token string">'得'</span><span class="token punctuation">,</span> <span class="token string">'星'</span><span class="token punctuation">,</span> <span class="token string">'江'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'容'</span><span class="token punctuation">,</span> <span class="token string">'映'</span><span class="token punctuation">,</span> <span class="token string">'德'</span><span class="token punctuation">,</span> <span class="token string">'怡'</span><span class="token punctuation">,</span> <span class="token string">'茹'</span><span class="token punctuation">,</span> <span class="token string">'仪'</span><span class="token punctuation">,</span> <span class="token string">'儒'</span><span class="token punctuation">,</span> <span class="token string">'杰'</span><span class="token punctuation">,</span> <span class="token string">'哲'</span><span class="token punctuation">,</span> <span class="token string">'汉'</span><span class="token punctuation">,</span> <span class="token string">'刚'</span><span class="token punctuation">,</span> <span class="token string">'娇'</span><span class="token punctuation">,</span> <span class="token string">'修'</span><span class="token punctuation">,</span> <span class="token string">'旭'</span><span class="token punctuation">,</span> <span class="token string">'桂'</span><span class="token punctuation">,</span> <span class="token string">'雨'</span><span class="token punctuation">,</span> <span class="token string">'仕'</span><span class="token punctuation">,</span> <span class="token string">'莉'</span><span class="token punctuation">,</span> <span class="token string">'克'</span><span class="token punctuation">,</span> <span class="token string">'佳'</span><span class="token punctuation">,</span> <span class="token string">'珊'</span><span class="token punctuation">,</span> <span class="token string">'阿'</span><span class="token punctuation">,</span>    <span class="token string">'秀'</span><span class="token punctuation">,</span> <span class="token string">'尚'</span><span class="token punctuation">,</span> <span class="token string">'尧'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">,</span> <span class="token string">'湘'</span><span class="token punctuation">,</span> <span class="token string">'俐'</span><span class="token punctuation">,</span> <span class="token string">'春'</span><span class="token punctuation">,</span> <span class="token string">'虹'</span><span class="token punctuation">,</span> <span class="token string">'瑞'</span><span class="token punctuation">,</span> <span class="token string">'百'</span><span class="token punctuation">,</span> <span class="token string">'琳'</span><span class="token punctuation">,</span> <span class="token string">'语'</span><span class="token punctuation">,</span> <span class="token string">'阳'</span><span class="token punctuation">,</span> <span class="token string">'木'</span><span class="token punctuation">,</span> <span class="token string">'建'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">,</span> <span class="token string">'琪'</span><span class="token punctuation">,</span> <span class="token string">'财'</span><span class="token punctuation">,</span> <span class="token string">'英'</span><span class="token punctuation">,</span> <span class="token string">'慧'</span><span class="token punctuation">,</span> <span class="token string">'靖'</span><span class="token punctuation">,</span> <span class="token string">'菁'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'若'</span><span class="token punctuation">,</span> <span class="token string">'大'</span><span class="token punctuation">,</span> <span class="token string">'原'</span><span class="token punctuation">,</span> <span class="token string">'婕'</span><span class="token punctuation">,</span> <span class="token string">'意'</span><span class="token punctuation">,</span> <span class="token string">'展'</span><span class="token punctuation">,</span> <span class="token string">'巧'</span><span class="token punctuation">,</span> <span class="token string">'人'</span><span class="token punctuation">,</span> <span class="token string">'吟'</span><span class="token punctuation">,</span> <span class="token string">'竹'</span><span class="token punctuation">,</span> <span class="token string">'重'</span><span class="token punctuation">,</span> <span class="token string">'鸿'</span><span class="token punctuation">,</span> <span class="token string">'敬'</span><span class="token punctuation">,</span> <span class="token string">'依'</span><span class="token punctuation">,</span> <span class="token string">'进'</span><span class="token punctuation">,</span> <span class="token string">'台'</span><span class="token punctuation">,</span> <span class="token string">'左'</span><span class="token punctuation">,</span> <span class="token string">'亦'</span><span class="token punctuation">,</span> <span class="token string">'韵'</span><span class="token punctuation">,</span> <span class="token string">'钰'</span><span class="token punctuation">,</span> <span class="token string">'新'</span><span class="token punctuation">,</span> <span class="token string">'羽'</span><span class="token punctuation">,</span>    <span class="token string">'静'</span><span class="token punctuation">,</span> <span class="token string">'名'</span><span class="token punctuation">,</span> <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'仁'</span><span class="token punctuation">,</span> <span class="token string">'采'</span><span class="token punctuation">,</span> <span class="token string">'亭'</span><span class="token punctuation">,</span> <span class="token string">'妙'</span><span class="token punctuation">,</span> <span class="token string">'希'</span><span class="token punctuation">,</span> <span class="token string">'必'</span><span class="token punctuation">,</span> <span class="token string">'承'</span><span class="token punctuation">,</span> <span class="token string">'豪'</span><span class="token punctuation">,</span> <span class="token string">'吉'</span><span class="token punctuation">,</span> <span class="token string">'芷'</span><span class="token punctuation">,</span> <span class="token string">'上'</span><span class="token punctuation">,</span> <span class="token string">'石'</span><span class="token punctuation">,</span> <span class="token string">'冠'</span><span class="token punctuation">,</span> <span class="token string">'威'</span><span class="token punctuation">,</span> <span class="token string">'又'</span><span class="token punctuation">,</span> <span class="token string">'辛'</span><span class="token punctuation">,</span> <span class="token string">'奕'</span><span class="token punctuation">,</span> <span class="token string">'雅'</span><span class="token punctuation">,</span> <span class="token string">'泓'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'伶'</span><span class="token punctuation">,</span> <span class="token string">'玫'</span><span class="token punctuation">,</span> <span class="token string">'定'</span><span class="token punctuation">,</span> <span class="token string">'世'</span><span class="token punctuation">,</span> <span class="token string">'皓'</span><span class="token punctuation">,</span> <span class="token string">'协'</span><span class="token punctuation">,</span> <span class="token string">'芸'</span><span class="token punctuation">,</span> <span class="token string">'政'</span><span class="token punctuation">,</span> <span class="token string">'洁'</span><span class="token punctuation">,</span> <span class="token string">'祥'</span><span class="token punctuation">,</span> <span class="token string">'清'</span><span class="token punctuation">,</span> <span class="token string">'光'</span><span class="token punctuation">,</span> <span class="token string">'贞'</span><span class="token punctuation">,</span> <span class="token string">'翠'</span><span class="token punctuation">,</span> <span class="token string">'纯'</span><span class="token punctuation">,</span> <span class="token string">'伟'</span><span class="token punctuation">,</span> <span class="token string">'振'</span><span class="token punctuation">,</span> <span class="token string">'庭'</span><span class="token punctuation">,</span> <span class="token string">'易'</span><span class="token punctuation">,</span> <span class="token string">'香'</span><span class="token punctuation">,</span> <span class="token string">'永'</span><span class="token punctuation">,</span> <span class="token string">'皇'</span><span class="token punctuation">,</span>    <span class="token string">'茜'</span><span class="token punctuation">,</span> <span class="token string">'良'</span><span class="token punctuation">,</span> <span class="token string">'敏'</span><span class="token punctuation">,</span> <span class="token string">'燕'</span><span class="token punctuation">,</span> <span class="token string">'俊'</span><span class="token punctuation">,</span> <span class="token string">'月'</span><span class="token punctuation">,</span> <span class="token string">'民'</span><span class="token punctuation">,</span> <span class="token string">'隆'</span><span class="token punctuation">,</span> <span class="token string">'侑'</span><span class="token punctuation">,</span> <span class="token string">'诗'</span><span class="token punctuation">,</span> <span class="token string">'心'</span><span class="token punctuation">,</span> <span class="token string">'友'</span><span class="token punctuation">,</span> <span class="token string">'致'</span><span class="token punctuation">,</span> <span class="token string">'贤'</span><span class="token punctuation">,</span> <span class="token string">'宛'</span><span class="token punctuation">,</span> <span class="token string">'奇'</span><span class="token punctuation">,</span> <span class="token string">'玲'</span><span class="token punctuation">,</span> <span class="token string">'志'</span><span class="token punctuation">,</span> <span class="token string">'宪'</span><span class="token punctuation">,</span> <span class="token string">'启'</span><span class="token punctuation">,</span> <span class="token string">'亚'</span><span class="token punctuation">,</span> <span class="token string">'盈'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'睿'</span><span class="token punctuation">,</span> <span class="token string">'涵'</span><span class="token punctuation">,</span> <span class="token string">'柔'</span><span class="token punctuation">,</span> <span class="token string">'萱'</span><span class="token punctuation">,</span> <span class="token string">'昀'</span><span class="token punctuation">,</span> <span class="token string">'伦'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">,</span> <span class="token string">'季'</span><span class="token punctuation">,</span> <span class="token string">'玮'</span><span class="token punctuation">,</span> <span class="token string">'凤'</span><span class="token punctuation">,</span> <span class="token string">'善'</span><span class="token punctuation">,</span> <span class="token string">'云'</span><span class="token punctuation">,</span> <span class="token string">'祯'</span><span class="token punctuation">,</span> <span class="token string">'幸'</span><span class="token punctuation">,</span> <span class="token string">'宏'</span><span class="token punctuation">,</span> <span class="token string">'可'</span><span class="token punctuation">,</span> <span class="token string">'信'</span><span class="token punctuation">,</span> <span class="token string">'天'</span><span class="token punctuation">,</span> <span class="token string">'宗'</span><span class="token punctuation">,</span> <span class="token string">'宜'</span><span class="token punctuation">,</span> <span class="token string">'忆'</span><span class="token punctuation">,</span> <span class="token string">'康'</span><span class="token punctuation">,</span>    <span class="token string">'翰'</span><span class="token punctuation">,</span> <span class="token string">'正'</span><span class="token punctuation">,</span> <span class="token string">'丽'</span><span class="token punctuation">,</span> <span class="token string">'翔'</span><span class="token punctuation">,</span> <span class="token string">'少'</span><span class="token punctuation">,</span> <span class="token string">'朝'</span><span class="token punctuation">,</span> <span class="token string">'倩'</span><span class="token punctuation">,</span> <span class="token string">'圣'</span><span class="token punctuation">,</span> <span class="token string">'钧'</span><span class="token punctuation">,</span> <span class="token string">'琬'</span><span class="token punctuation">,</span> <span class="token string">'铭'</span><span class="token punctuation">,</span> <span class="token string">'学'</span><span class="token punctuation">,</span> <span class="token string">'幼'</span><span class="token punctuation">,</span> <span class="token string">'立'</span><span class="token punctuation">,</span> <span class="token string">'蕙'</span><span class="token punctuation">,</span> <span class="token string">'青'</span><span class="token punctuation">,</span> <span class="token string">'枝'</span><span class="token punctuation">,</span> <span class="token string">'庆'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token comment"># 名</span>listl <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'盛'</span><span class="token punctuation">,</span> <span class="token string">'斌'</span><span class="token punctuation">,</span> <span class="token string">'铃'</span><span class="token punctuation">,</span> <span class="token string">'峰'</span><span class="token punctuation">,</span> <span class="token string">'志'</span><span class="token punctuation">,</span> <span class="token string">'原'</span><span class="token punctuation">,</span> <span class="token string">'莲'</span><span class="token punctuation">,</span> <span class="token string">'扬'</span><span class="token punctuation">,</span> <span class="token string">'全'</span><span class="token punctuation">,</span> <span class="token string">'茂'</span><span class="token punctuation">,</span> <span class="token string">'辰'</span><span class="token punctuation">,</span> <span class="token string">'彰'</span><span class="token punctuation">,</span> <span class="token string">'臻'</span><span class="token punctuation">,</span> <span class="token string">'竹'</span><span class="token punctuation">,</span> <span class="token string">'翰'</span><span class="token punctuation">,</span> <span class="token string">'静'</span><span class="token punctuation">,</span> <span class="token string">'妹'</span><span class="token punctuation">,</span> <span class="token string">'霖'</span><span class="token punctuation">,</span> <span class="token string">'添'</span><span class="token punctuation">,</span> <span class="token string">'吟'</span><span class="token punctuation">,</span> <span class="token string">'廷'</span><span class="token punctuation">,</span> <span class="token string">'正'</span><span class="token punctuation">,</span>    <span class="token string">'奇'</span><span class="token punctuation">,</span> <span class="token string">'平'</span><span class="token punctuation">,</span> <span class="token string">'安'</span><span class="token punctuation">,</span> <span class="token string">'柔'</span><span class="token punctuation">,</span> <span class="token string">'毓'</span><span class="token punctuation">,</span> <span class="token string">'贵'</span><span class="token punctuation">,</span> <span class="token string">'宪'</span><span class="token punctuation">,</span> <span class="token string">'怡'</span><span class="token punctuation">,</span> <span class="token string">'秋'</span><span class="token punctuation">,</span> <span class="token string">'茜'</span><span class="token punctuation">,</span> <span class="token string">'和'</span><span class="token punctuation">,</span> <span class="token string">'玉'</span><span class="token punctuation">,</span> <span class="token string">'泉'</span><span class="token punctuation">,</span> <span class="token string">'珍'</span><span class="token punctuation">,</span> <span class="token string">'季'</span><span class="token punctuation">,</span> <span class="token string">'娇'</span><span class="token punctuation">,</span> <span class="token string">'盈'</span><span class="token punctuation">,</span> <span class="token string">'蓉'</span><span class="token punctuation">,</span> <span class="token string">'仪'</span><span class="token punctuation">,</span> <span class="token string">'群'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">,</span> <span class="token string">'忠'</span><span class="token punctuation">,</span>    <span class="token string">'慧'</span><span class="token punctuation">,</span> <span class="token string">'睿'</span><span class="token punctuation">,</span> <span class="token string">'军'</span><span class="token punctuation">,</span> <span class="token string">'友'</span><span class="token punctuation">,</span> <span class="token string">'威'</span><span class="token punctuation">,</span> <span class="token string">'云'</span><span class="token punctuation">,</span> <span class="token string">'玲'</span><span class="token punctuation">,</span> <span class="token string">'康'</span><span class="token punctuation">,</span> <span class="token string">'彬'</span><span class="token punctuation">,</span> <span class="token string">'雅'</span><span class="token punctuation">,</span> <span class="token string">'勋'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">,</span> <span class="token string">'帆'</span><span class="token punctuation">,</span> <span class="token string">'君'</span><span class="token punctuation">,</span> <span class="token string">'琴'</span><span class="token punctuation">,</span> <span class="token string">'毅'</span><span class="token punctuation">,</span> <span class="token string">'玫'</span><span class="token punctuation">,</span> <span class="token string">'璇'</span><span class="token punctuation">,</span> <span class="token string">'淑'</span><span class="token punctuation">,</span> <span class="token string">'秀'</span><span class="token punctuation">,</span> <span class="token string">'琦'</span><span class="token punctuation">,</span> <span class="token string">'玮'</span><span class="token punctuation">,</span>    <span class="token string">'媛'</span><span class="token punctuation">,</span> <span class="token string">'逸'</span><span class="token punctuation">,</span> <span class="token string">'博'</span><span class="token punctuation">,</span> <span class="token string">'筑'</span><span class="token punctuation">,</span> <span class="token string">'维'</span><span class="token punctuation">,</span> <span class="token string">'韦'</span><span class="token punctuation">,</span> <span class="token string">'均'</span><span class="token punctuation">,</span> <span class="token string">'昌'</span><span class="token punctuation">,</span> <span class="token string">'欣'</span><span class="token punctuation">,</span> <span class="token string">'合'</span><span class="token punctuation">,</span> <span class="token string">'强'</span><span class="token punctuation">,</span> <span class="token string">'法'</span><span class="token punctuation">,</span> <span class="token string">'冰'</span><span class="token punctuation">,</span> <span class="token string">'其'</span><span class="token punctuation">,</span> <span class="token string">'昀'</span><span class="token punctuation">,</span> <span class="token string">'心'</span><span class="token punctuation">,</span> <span class="token string">'惠'</span><span class="token punctuation">,</span> <span class="token string">'甄'</span><span class="token punctuation">,</span> <span class="token string">'薇'</span><span class="token punctuation">,</span> <span class="token string">'旺'</span><span class="token punctuation">,</span> <span class="token string">'纬'</span><span class="token punctuation">,</span> <span class="token string">'南'</span><span class="token punctuation">,</span>    <span class="token string">'辛'</span><span class="token punctuation">,</span> <span class="token string">'伯'</span><span class="token punctuation">,</span> <span class="token string">'凤'</span><span class="token punctuation">,</span> <span class="token string">'祥'</span><span class="token punctuation">,</span> <span class="token string">'倩'</span><span class="token punctuation">,</span> <span class="token string">'舜'</span><span class="token punctuation">,</span> <span class="token string">'菱'</span><span class="token punctuation">,</span> <span class="token string">'英'</span><span class="token punctuation">,</span> <span class="token string">'美'</span><span class="token punctuation">,</span> <span class="token string">'虹'</span><span class="token punctuation">,</span> <span class="token string">'松'</span><span class="token punctuation">,</span> <span class="token string">'星'</span><span class="token punctuation">,</span> <span class="token string">'辉'</span><span class="token punctuation">,</span> <span class="token string">'元'</span><span class="token punctuation">,</span> <span class="token string">'圣'</span><span class="token punctuation">,</span> <span class="token string">'隆'</span><span class="token punctuation">,</span> <span class="token string">'龙'</span><span class="token punctuation">,</span> <span class="token string">'花'</span><span class="token punctuation">,</span> <span class="token string">'苹'</span><span class="token punctuation">,</span> <span class="token string">'筠'</span><span class="token punctuation">,</span> <span class="token string">'任'</span><span class="token punctuation">,</span> <span class="token string">'纶'</span><span class="token punctuation">,</span>    <span class="token string">'岚'</span><span class="token punctuation">,</span> <span class="token string">'妃'</span><span class="token punctuation">,</span> <span class="token string">'昆'</span><span class="token punctuation">,</span> <span class="token string">'贤'</span><span class="token punctuation">,</span> <span class="token string">'生'</span><span class="token punctuation">,</span> <span class="token string">'瑄'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">,</span> <span class="token string">'兴'</span><span class="token punctuation">,</span> <span class="token string">'伟'</span><span class="token punctuation">,</span> <span class="token string">'宝'</span><span class="token punctuation">,</span> <span class="token string">'沛'</span><span class="token punctuation">,</span> <span class="token string">'馨'</span><span class="token punctuation">,</span> <span class="token string">'珮'</span><span class="token punctuation">,</span> <span class="token string">'蓁'</span><span class="token punctuation">,</span> <span class="token string">'蕙'</span><span class="token punctuation">,</span> <span class="token string">'钰'</span><span class="token punctuation">,</span> <span class="token string">'杰'</span><span class="token punctuation">,</span> <span class="token string">'劭'</span><span class="token punctuation">,</span> <span class="token string">'旭'</span><span class="token punctuation">,</span> <span class="token string">'宏'</span><span class="token punctuation">,</span> <span class="token string">'庭'</span><span class="token punctuation">,</span> <span class="token string">'坤'</span><span class="token punctuation">,</span>    <span class="token string">'轩'</span><span class="token punctuation">,</span> <span class="token string">'修'</span><span class="token punctuation">,</span> <span class="token string">'芸'</span><span class="token punctuation">,</span> <span class="token string">'佳'</span><span class="token punctuation">,</span> <span class="token string">'月'</span><span class="token punctuation">,</span> <span class="token string">'桦'</span><span class="token punctuation">,</span> <span class="token string">'来'</span><span class="token punctuation">,</span> <span class="token string">'霞'</span><span class="token punctuation">,</span> <span class="token string">'孜'</span><span class="token punctuation">,</span> <span class="token string">'乐'</span><span class="token punctuation">,</span> <span class="token string">'达'</span><span class="token punctuation">,</span> <span class="token string">'敏'</span><span class="token punctuation">,</span> <span class="token string">'善'</span><span class="token punctuation">,</span> <span class="token string">'亦'</span><span class="token punctuation">,</span> <span class="token string">'超'</span><span class="token punctuation">,</span> <span class="token string">'钧'</span><span class="token punctuation">,</span> <span class="token string">'天'</span><span class="token punctuation">,</span> <span class="token string">'羽'</span><span class="token punctuation">,</span> <span class="token string">'刚'</span><span class="token punctuation">,</span> <span class="token string">'绿'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">,</span> <span class="token string">'纯'</span><span class="token punctuation">,</span>    <span class="token string">'侑'</span><span class="token punctuation">,</span> <span class="token string">'士'</span><span class="token punctuation">,</span> <span class="token string">'名'</span><span class="token punctuation">,</span> <span class="token string">'雯'</span><span class="token punctuation">,</span> <span class="token string">'义'</span><span class="token punctuation">,</span> <span class="token string">'亚'</span><span class="token punctuation">,</span> <span class="token string">'琬'</span><span class="token punctuation">,</span> <span class="token string">'芷'</span><span class="token punctuation">,</span> <span class="token string">'尧'</span><span class="token punctuation">,</span> <span class="token string">'伦'</span><span class="token punctuation">,</span> <span class="token string">'新'</span><span class="token punctuation">,</span> <span class="token string">'乔'</span><span class="token punctuation">,</span> <span class="token string">'雄'</span><span class="token punctuation">,</span> <span class="token string">'洁'</span><span class="token punctuation">,</span> <span class="token string">'幸'</span><span class="token punctuation">,</span> <span class="token string">'娥'</span><span class="token punctuation">,</span> <span class="token string">'恩'</span><span class="token punctuation">,</span> <span class="token string">'玟'</span><span class="token punctuation">,</span> <span class="token string">'书'</span><span class="token punctuation">,</span> <span class="token string">'惟'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">,</span> <span class="token string">'瑜'</span><span class="token punctuation">,</span>    <span class="token string">'珊'</span><span class="token punctuation">,</span> <span class="token string">'远'</span><span class="token punctuation">,</span> <span class="token string">'晴'</span><span class="token punctuation">,</span> <span class="token string">'彦'</span><span class="token punctuation">,</span> <span class="token string">'哲'</span><span class="token punctuation">,</span> <span class="token string">'瑞'</span><span class="token punctuation">,</span> <span class="token string">'琇'</span><span class="token punctuation">,</span> <span class="token string">'智'</span><span class="token punctuation">,</span> <span class="token string">'映'</span><span class="token punctuation">,</span> <span class="token string">'珠'</span><span class="token punctuation">,</span> <span class="token string">'鸿'</span><span class="token punctuation">,</span> <span class="token string">'梦'</span><span class="token punctuation">,</span> <span class="token string">'燕'</span><span class="token punctuation">,</span> <span class="token string">'人'</span><span class="token punctuation">,</span> <span class="token string">'春'</span><span class="token punctuation">,</span> <span class="token string">'儒'</span><span class="token punctuation">,</span> <span class="token string">'卿'</span><span class="token punctuation">,</span> <span class="token string">'佩'</span><span class="token punctuation">,</span> <span class="token string">'祯'</span><span class="token punctuation">,</span> <span class="token string">'良'</span><span class="token punctuation">,</span> <span class="token string">'清'</span><span class="token punctuation">,</span> <span class="token string">'欢'</span><span class="token punctuation">,</span>    <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'麟'</span><span class="token punctuation">,</span> <span class="token string">'骏'</span><span class="token punctuation">,</span> <span class="token string">'岳'</span><span class="token punctuation">,</span> <span class="token string">'财'</span><span class="token punctuation">,</span> <span class="token string">'芳'</span><span class="token punctuation">,</span> <span class="token string">'诚'</span><span class="token punctuation">,</span> <span class="token string">'文'</span><span class="token punctuation">,</span> <span class="token string">'真'</span><span class="token punctuation">,</span> <span class="token string">'柏'</span><span class="token punctuation">,</span> <span class="token string">'湖'</span><span class="token punctuation">,</span> <span class="token string">'菁'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">'佑'</span><span class="token punctuation">,</span> <span class="token string">'颖'</span><span class="token punctuation">,</span> <span class="token string">'阳'</span><span class="token punctuation">,</span> <span class="token string">'水'</span><span class="token punctuation">,</span> <span class="token string">'枝'</span><span class="token punctuation">,</span> <span class="token string">'茹'</span><span class="token punctuation">,</span> <span class="token string">'德'</span><span class="token punctuation">,</span> <span class="token string">'豪'</span><span class="token punctuation">,</span>    <span class="token string">'谕'</span><span class="token punctuation">,</span> <span class="token string">'华'</span><span class="token punctuation">,</span> <span class="token string">'裕'</span><span class="token punctuation">,</span> <span class="token string">'山'</span><span class="token punctuation">,</span> <span class="token string">'孝'</span><span class="token punctuation">,</span> <span class="token string">'依'</span><span class="token punctuation">,</span> <span class="token string">'木'</span><span class="token punctuation">,</span> <span class="token string">'宣'</span><span class="token punctuation">,</span> <span class="token string">'涵'</span><span class="token punctuation">,</span> <span class="token string">'凯'</span><span class="token punctuation">,</span> <span class="token string">'源'</span><span class="token punctuation">,</span> <span class="token string">'韵'</span><span class="token punctuation">,</span> <span class="token string">'成'</span><span class="token punctuation">,</span> <span class="token string">'育'</span><span class="token punctuation">,</span> <span class="token string">'喜'</span><span class="token punctuation">,</span> <span class="token string">'宁'</span><span class="token punctuation">,</span> <span class="token string">'郁'</span><span class="token punctuation">,</span> <span class="token string">'仁'</span><span class="token punctuation">,</span> <span class="token string">'仲'</span><span class="token punctuation">,</span> <span class="token string">'希'</span><span class="token punctuation">,</span> <span class="token string">'芬'</span><span class="token punctuation">,</span> <span class="token string">'雨'</span><span class="token punctuation">,</span>    <span class="token string">'瑶'</span><span class="token punctuation">,</span> <span class="token string">'翔'</span><span class="token punctuation">,</span> <span class="token string">'火'</span><span class="token punctuation">,</span> <span class="token string">'铭'</span><span class="token punctuation">,</span> <span class="token string">'芝'</span><span class="token punctuation">,</span> <span class="token string">'东'</span><span class="token punctuation">,</span> <span class="token string">'定'</span><span class="token punctuation">,</span> <span class="token string">'璋'</span><span class="token punctuation">,</span> <span class="token string">'意'</span><span class="token punctuation">,</span> <span class="token string">'江'</span><span class="token punctuation">,</span> <span class="token string">'靖'</span><span class="token punctuation">,</span> <span class="token string">'民'</span><span class="token punctuation">,</span> <span class="token string">'易'</span><span class="token punctuation">,</span> <span class="token string">'如'</span><span class="token punctuation">,</span> <span class="token string">'淳'</span><span class="token punctuation">,</span> <span class="token string">'光'</span><span class="token punctuation">,</span> <span class="token string">'发'</span><span class="token punctuation">,</span> <span class="token string">'启'</span><span class="token punctuation">,</span> <span class="token string">'俐'</span><span class="token punctuation">,</span> <span class="token string">'俊'</span><span class="token punctuation">,</span> <span class="token string">'礼'</span><span class="token punctuation">,</span> <span class="token string">'齐'</span><span class="token punctuation">,</span>    <span class="token string">'庆'</span><span class="token punctuation">,</span> <span class="token string">'谚'</span><span class="token punctuation">,</span> <span class="token string">'香'</span><span class="token punctuation">,</span> <span class="token string">'富'</span><span class="token punctuation">,</span> <span class="token string">'妤'</span><span class="token punctuation">,</span> <span class="token string">'宜'</span><span class="token punctuation">,</span> <span class="token string">'弘'</span><span class="token punctuation">,</span> <span class="token string">'学'</span><span class="token punctuation">,</span> <span class="token string">'汉'</span><span class="token punctuation">,</span> <span class="token string">'政'</span><span class="token punctuation">,</span> <span class="token string">'以'</span><span class="token punctuation">,</span> <span class="token string">'伶'</span><span class="token punctuation">,</span> <span class="token string">'勇'</span><span class="token punctuation">,</span> <span class="token string">'绮'</span><span class="token punctuation">,</span> <span class="token string">'凡'</span><span class="token punctuation">,</span> <span class="token string">'吉'</span><span class="token punctuation">,</span> <span class="token string">'梅'</span><span class="token punctuation">,</span> <span class="token string">'慈'</span><span class="token punctuation">,</span> <span class="token string">'容'</span><span class="token punctuation">,</span> <span class="token string">'明'</span><span class="token punctuation">,</span> <span class="token string">'荣'</span><span class="token punctuation">,</span> <span class="token string">'萍'</span><span class="token punctuation">,</span>    <span class="token string">'贞'</span><span class="token punctuation">,</span> <span class="token string">'娟'</span><span class="token punctuation">,</span> <span class="token string">'信'</span><span class="token punctuation">,</span> <span class="token string">'青'</span><span class="token punctuation">,</span> <span class="token string">'皓'</span><span class="token punctuation">,</span> <span class="token string">'雪'</span><span class="token punctuation">,</span> <span class="token string">'治'</span><span class="token punctuation">,</span> <span class="token string">'琳'</span><span class="token punctuation">,</span> <span class="token string">'紫'</span><span class="token punctuation">,</span> <span class="token string">'兰'</span><span class="token punctuation">,</span> <span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token string">'婷'</span><span class="token punctuation">,</span> <span class="token string">'莹'</span><span class="token punctuation">,</span> <span class="token string">'嘉'</span><span class="token punctuation">,</span> <span class="token string">'恭'</span><span class="token punctuation">,</span> <span class="token string">'萱'</span><span class="token punctuation">,</span> <span class="token string">'顺'</span><span class="token punctuation">,</span> <span class="token string">'行'</span><span class="token punctuation">,</span> <span class="token string">'琪'</span><span class="token punctuation">,</span> <span class="token string">'念'</span><span class="token punctuation">,</span> <span class="token string">'宇'</span><span class="token punctuation">,</span> <span class="token string">'海'</span><span class="token punctuation">,</span>    <span class="token string">'坚'</span><span class="token punctuation">,</span> <span class="token string">'福'</span><span class="token punctuation">,</span> <span class="token string">'绍'</span><span class="token punctuation">,</span> <span class="token string">'桂'</span><span class="token punctuation">]</span><span class="token comment"># 数据库类</span><span class="token keyword">class</span> <span class="token class-name">Wdatabases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__db_host <span class="token operator">=</span> <span class="token string">"192.168.236.128"</span>        self<span class="token punctuation">.</span>__db_port <span class="token operator">=</span> <span class="token number">3306</span>        self<span class="token punctuation">.</span>__db_user <span class="token operator">=</span> <span class="token string">"root"</span>        self<span class="token punctuation">.</span>__db_password <span class="token operator">=</span> <span class="token string">"YjUzZjg0NTU1OWViM2I5ZTM1ZWE0NWZj"</span>        self<span class="token punctuation">.</span>__db_database <span class="token operator">=</span> <span class="token string">"school"</span>    <span class="token comment"># 链接数据库</span>    <span class="token keyword">def</span> <span class="token function">Wlink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span>self<span class="token punctuation">.</span>__db_host<span class="token punctuation">,</span>            port<span class="token operator">=</span>self<span class="token punctuation">.</span>__db_port<span class="token punctuation">,</span>            user<span class="token operator">=</span>self<span class="token punctuation">.</span>__db_user<span class="token punctuation">,</span>            password<span class="token operator">=</span>self<span class="token punctuation">.</span>__db_password<span class="token punctuation">,</span>            database<span class="token operator">=</span>self<span class="token punctuation">.</span>__db_database<span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">'utf8'</span>        <span class="token punctuation">)</span>    <span class="token comment"># 插入数据</span>    <span class="token keyword">def</span> <span class="token function">Winsert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> ages<span class="token punctuation">,</span> cclass<span class="token punctuation">,</span> yuwen<span class="token punctuation">,</span> shuxue<span class="token punctuation">,</span> english<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 连接数据库</span>            self<span class="token punctuation">.</span>Wlink<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 创建游标</span>            <span class="token keyword">global</span> cursor            cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># sql命令</span>            sql <span class="token operator">=</span> <span class="token string">"insert into student(name,gender,age,cclass,yuwen,shuxue,english, total) value(%s,%s,%s,%s,%s,%s,"</span> \                  <span class="token string">"%s,%s)"</span>            <span class="token comment"># 执行sql命令</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> ages<span class="token punctuation">,</span> cclass<span class="token punctuation">,</span> yuwen<span class="token punctuation">,</span> shuxue<span class="token punctuation">,</span> english<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token comment"># 关闭游标</span>            cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 提交</span>            self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 关闭数据库连接</span>            self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 数据生成姓名, 年龄, 等并调用数据插入方法</span>    <span class="token keyword">def</span> <span class="token function">Wcommit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>listf<span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>listm<span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>listf<span class="token punctuation">)</span>        age <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>        yuwen <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        shuxue <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        english <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        gender <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        total <span class="token operator">=</span> yuwen <span class="token operator">+</span> shuxue <span class="token operator">+</span> english        cclass <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment"># cclass = random.choice(('一', '二', '三'))</span>        self<span class="token punctuation">.</span>Winsert<span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> cclass<span class="token punctuation">,</span> yuwen<span class="token punctuation">,</span> shuxue<span class="token punctuation">,</span> english<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    开始时间 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建实例化对象</span>    db <span class="token operator">=</span> Wdatabases<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 插入100条数据</span>    <span class="token keyword">for</span> WJ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 调用方法</span>        db<span class="token punctuation">.</span>Wcommit<span class="token punctuation">(</span><span class="token punctuation">)</span>    结束时间 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    运行时间 <span class="token operator">=</span> 结束时间 <span class="token operator">-</span> 开始时间    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该循环程序运行时间: '</span><span class="token punctuation">,</span> 运行时间<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看运行时间"><a href="#查看运行时间" class="headerlink" title="查看运行时间 "></a><font size=5><strong>查看运行时间</strong> </font></h2><p>&emsp;&emsp;(我用的是pycharm软件,可以直接复制到MySQL服务器,运行.py文件)</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">D:\PyCharm\venv\Scripts\python<span class="token punctuation">.</span>exe <span class="token string">"F:\PyCharm 2019.2.3\helpers\pydev\pydevconsole.py"</span> <span class="token operator">--</span>mode=client <span class="token operator">--</span>port=62152import sys<span class="token punctuation">;</span> print<span class="token punctuation">(</span><span class="token string">'Python %s on %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>version<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'D:\\PyCharm'</span><span class="token punctuation">,</span> <span class="token string">'D:/PyCharm'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>PyDev console: starting<span class="token punctuation">.</span>Python 3<span class="token punctuation">.</span>7<span class="token punctuation">.</span>0 <span class="token punctuation">(</span>v3<span class="token punctuation">.</span>7<span class="token punctuation">.</span>0:1bf9cc5093<span class="token punctuation">,</span> Jun 27 2018<span class="token punctuation">,</span> 04:59:51<span class="token punctuation">)</span> <span class="token namespace">[MSC v.1914 64 bit (AMD64)]</span> on win32>>> runfile<span class="token punctuation">(</span><span class="token string">'D:/PyCharm/1209/mysql.py'</span><span class="token punctuation">,</span> wdir=<span class="token string">'D:/PyCharm/1209'</span><span class="token punctuation">)</span>该循环程序运行时间:  0<span class="token punctuation">.</span>7610917091369629<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mysql </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-ce 安装</title>
      <link href="/posts/1bf7.html"/>
      <url>/posts/1bf7.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a><font size=5><strong>约定</strong></font></h1><p>&emsp;&emsp;系统Ubuntu 18.04.3 LTS</p><h1 id="修改阿里云apt源"><a href="#修改阿里云apt源" class="headerlink" title="修改阿里云apt源"></a><font size=5><strong>修改阿里云apt源</strong></font></h1><p>&emsp;&emsp;如果你是按照本博客Ubuntu安装视频安装的Ubuntu系统,则不用修改apt源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wang@wujiops:/etc/apt$ <span class="token function">sudo</span> <span class="token function">mv</span> /etc/apt/sources.list /etc/apt/sources.old   <span class="token comment"># 备份旧的apt源</span>wang@wujiops:/etc/apt$ <span class="token function">cat</span> sources.list   <span class="token comment"># 新的apt源</span><span class="token comment"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span><span class="token comment"># newer versions of the distribution.</span>deb http://mirrors.aliyun.com/ubuntu bionic main restricted<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic main restricted</span><span class="token comment">## Major bug fix updates produced after the final release of the</span><span class="token comment">## distribution.</span>deb http://mirrors.aliyun.com/ubuntu bionic-updates main restricted<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic-updates main restricted</span><span class="token comment">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><span class="token comment">## team. Also, please note that software in universe WILL NOT receive any</span><span class="token comment">## review or updates from the Ubuntu security team.</span>deb http://mirrors.aliyun.com/ubuntu bionic universe<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic universe</span>deb http://mirrors.aliyun.com/ubuntu bionic-updates universe<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic-updates universe</span><span class="token comment">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><span class="token comment">## team, and may not be under a free licence. Please satisfy yourself as to</span><span class="token comment">## your rights to use the software. Also, please note that software in</span><span class="token comment">## multiverse WILL NOT receive any review or updates from the Ubuntu</span><span class="token comment">## security team.</span>deb http://mirrors.aliyun.com/ubuntu bionic multiverse<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic multiverse</span>deb http://mirrors.aliyun.com/ubuntu bionic-updates multiverse<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic-updates multiverse</span><span class="token comment">## N.B. software from this repository may not have been tested as</span><span class="token comment">## extensively as that contained in the main release, although it includes</span><span class="token comment">## newer versions of some applications which may provide useful features.</span><span class="token comment">## Also, please note that software in backports WILL NOT receive any review</span><span class="token comment">## or updates from the Ubuntu security team.</span>deb http://mirrors.aliyun.com/ubuntu bionic-backports main restricted universe multiverse<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic-backports main restricted universe multiverse</span><span class="token comment">## Uncomment the following two lines to add software from Canonical's</span><span class="token comment">## 'partner' repository.</span><span class="token comment">## This software is not part of Ubuntu, but is offered by Canonical and the</span><span class="token comment">## respective vendors as a service to Ubuntu users.</span><span class="token comment"># deb http://archive.canonical.com/ubuntu bionic partner</span><span class="token comment"># deb-src http://archive.canonical.com/ubuntu bionic partner</span>deb http://mirrors.aliyun.com/ubuntu bionic-security main restricted<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic-security main restricted</span>deb http://mirrors.aliyun.com/ubuntu bionic-security universe<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic-security universe</span>deb http://mirrors.aliyun.com/ubuntu bionic-security multiverse<span class="token comment"># deb-src http://mirrors.aliyun.com/ubuntu bionic-security multiverse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置Ubuntu-docker-ce-阿里云apt源"><a href="#配置Ubuntu-docker-ce-阿里云apt源" class="headerlink" title="配置Ubuntu docker-ce 阿里云apt源"></a><font size=5><strong>配置Ubuntu docker-ce 阿里云apt源</strong></font></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wang@wujiops:/etc/apt$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update   <span class="token comment"># 更新apt源</span>wang@wujiops:/etc/apt$ <span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common   <span class="token comment"># 安装系统工具</span>wang@wujiops:/etc/apt$ <span class="token function">curl</span> -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -   <span class="token comment"># 添加GPG证书</span>wang@wujiops:/etc/apt$ <span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span>   <span class="token comment"># 设置Ubuntu的docker-ce的阿里云apt源</span>wang@wujiops:/etc/apt$ <span class="token function">sudo</span> <span class="token function">apt-get</span> -y update   <span class="token comment"># 更新apt源</span>wang@wujiops:/etc/apt$ <span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> docker-ce   <span class="token comment"># 安装docker-ce</span><span class="token comment">#**安装指定版本**</span>wang@wujiops:/etc/apt$ <span class="token function">apt-cache</span> madison docker-ce   <span class="token comment"># 查看docker-ce版本</span> docker-ce <span class="token operator">|</span> <span class="token number">5</span>:19.03.5~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:19.03.4~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:19.03.3~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:19.03.2~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:19.03.1~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:19.03.0~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.9~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.8~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.7~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.6~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.5~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.4~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.3~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.2~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.1~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">5</span>:18.09.0~3-0~ubuntu-bionic <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">18.06</span>.3~ce~3-0~ubuntu <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">18.06</span>.2~ce~3-0~ubuntu <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">18.06</span>.1~ce~3-0~ubuntu <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">18.06</span>.0~ce~3-0~ubuntu <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages docker-ce <span class="token operator">|</span> <span class="token number">18.03</span>.1~ce~3-0~ubuntu <span class="token operator">|</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic/stable amd64 Packages<span class="token comment"># 安装指定版本的docker-ce: (VERSION=19.03.5~3-0~ubuntu-bionic)</span><span class="token comment"># wang@wujiops:/etc/apt$ sudo apt-get -y install docker-ce=[VERSION]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装和校验"><a href="#安装和校验" class="headerlink" title="安装和校验"></a><font size=5><strong>安装和校验</strong></font></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wang@wujiops:~$ <span class="token function">sudo</span> docker version   <span class="token comment"># 查看docker-ce版本</span>Client: Docker Engine - Community Version:           <span class="token number">19.03</span>.5 API version:       <span class="token number">1.40</span> Go version:        go1.12.12 Git commit:        633a0ea838 Built:             Wed Nov <span class="token number">13</span> 07:29:52 <span class="token number">2019</span> OS/Arch:           linux/amd64 Experimental:      <span class="token boolean">false</span>Server: Docker Engine - Community Engine:  Version:          <span class="token number">19.03</span>.5  API version:      <span class="token number">1.40</span> <span class="token punctuation">(</span>minimum version <span class="token number">1.12</span><span class="token punctuation">)</span>  Go version:       go1.12.12  Git commit:       633a0ea838  Built:            Wed Nov <span class="token number">13</span> 07:28:22 <span class="token number">2019</span>  OS/Arch:          linux/amd64  Experimental:     <span class="token boolean">false</span> containerd:  Version:          <span class="token number">1.2</span>.10  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339 runc:  Version:          <span class="token number">1.0</span>.0-rc8+dev  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657 docker-init:  Version:          <span class="token number">0.18</span>.0  GitCommit:        fec3683<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="centos-7-安装docker-ce"><a href="#centos-7-安装docker-ce" class="headerlink" title="centos 7 安装docker-ce"></a>centos 7 安装docker-ce</h1><h2 id="关闭firewalld和selinux"><a href="#关闭firewalld和selinux" class="headerlink" title="关闭firewalld和selinux"></a>关闭firewalld和selinux</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalldsetenforce <span class="token number">0</span><span class="token function">sed</span> -i <span class="token string">'s/enforcing$/disabled/g'</span> /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="增加aliyun-dockeryum源"><a href="#增加aliyun-dockeryum源" class="headerlink" title="增加aliyun dockeryum源"></a>增加aliyun dockeryum源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum makecache fast   <span class="token comment"># 建立缓存</span>yum -y <span class="token function">install</span> docker-ce<span class="token function">service</span> docker start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="docker-pull加速"><a href="#docker-pull加速" class="headerlink" title="docker pull加速"></a>docker pull加速</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /etc/docker<span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://fogd2pyo.mirror.aliyuncs.com"]&#125;EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload   <span class="token comment"># 加载配置</span>systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> wujiops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 18 安装</title>
      <link href="/posts/e57b.html"/>
      <url>/posts/e57b.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a><font size=6><strong>约定</strong></font></h1><p>&emsp;&emsp;VMware 版本 15.5.1 <a href="https://my.vmware.com/cn/web/vmware/details?downloadGroup=WKST-1551-WIN&productId=799&rPId=39513" title="VMware版本15.5.1 build-15018445">build-15018445</a><br>&emsp;&emsp;Ubuntu18 版本 <a href="http://mirror.bytemark.co.uk/ubuntu-releases/18.04.3/ubuntu-18.04.3-live-server-amd64.iso" title="ubuntu-18.04.3-live-server-amd64.iso">ubuntu-18.04.3-live-server-amd64</a>  </p><h2 id="Ubuntu18安装"><a href="#Ubuntu18安装" class="headerlink" title="Ubuntu18安装"></a><font size=5><strong>Ubuntu18安装</strong></font></h2><iframe height="600" width="800" src="//player.bilibili.com/player.html?aid=78488013&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="新建虚拟机-选择典型"><a href="#新建虚拟机-选择典型" class="headerlink" title="新建虚拟机,选择典型"></a><font size=4><strong>新建虚拟机,选择典型</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/0.jpg"></p><h3 id="选择下载好的Ubuntu18-server镜像"><a href="#选择下载好的Ubuntu18-server镜像" class="headerlink" title="选择下载好的Ubuntu18-server镜像"></a><font size=4><strong>选择下载好的Ubuntu18-server镜像</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/1.jpg"></p><h3 id="个性化-用户名密码"><a href="#个性化-用户名密码" class="headerlink" title="个性化(用户名密码)"></a><font size=4><strong>个性化(用户名密码)</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/2.jpg"></p><h3 id="安装位置-和虚拟机名称"><a href="#安装位置-和虚拟机名称" class="headerlink" title="安装位置,和虚拟机名称"></a><font size=4><strong>安装位置,和虚拟机名称</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/3.jpg"></p><h3 id="磁盘选择20G-存储为单个文件"><a href="#磁盘选择20G-存储为单个文件" class="headerlink" title="磁盘选择20G,存储为单个文件"></a><font size=4><strong>磁盘选择20G,存储为单个文件</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/4.jpg"></p><h3 id="点击完成"><a href="#点击完成" class="headerlink" title="点击完成"></a><font size=4><strong>点击完成</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/5.jpg"></p><h2 id="开机设置-设置使用英语"><a href="#开机设置-设置使用英语" class="headerlink" title="开机设置,设置使用英语"></a><font size=5><strong>开机设置,设置使用英语</strong></font></h2><p><img src="/medias/drawing-bed/ubuntu/6.jpg"></p><h3 id="键盘默认-不用改"><a href="#键盘默认-不用改" class="headerlink" title="键盘默认,不用改"></a><font size=4><strong>键盘默认,不用改</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/7.jpg"></p><h3 id="选定网卡-选择IPv4"><a href="#选定网卡-选择IPv4" class="headerlink" title="选定网卡,选择IPv4"></a><font size=4><strong>选定网卡,选择IPv4</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/8.jpg"></p><h3 id="设置Manual"><a href="#设置Manual" class="headerlink" title="设置Manual"></a><font size=4><strong>设置Manual</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/9.jpg"></p><h3 id="填入自己的IP-网关等"><a href="#填入自己的IP-网关等" class="headerlink" title="填入自己的IP,网关等."></a><font size=4><strong>填入自己的IP,网关等.</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/10.jpg"></p><h3 id="我的如下"><a href="#我的如下" class="headerlink" title="我的如下"></a><font size=4><strong>我的如下</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/11.jpg"></p><h3 id="查询自己的信息"><a href="#查询自己的信息" class="headerlink" title="查询自己的信息"></a><font size=4><strong>查询自己的信息</strong></font></h3><p>&emsp;&emsp;在VMware编辑里面,选择NAT模式,进入NAT设置,查看网关信息.依据此,填写自己的IP和网关.<br><img src="/medias/drawing-bed/ubuntu/12.jpg"></p><h3 id="填完效果如下"><a href="#填完效果如下" class="headerlink" title="填完效果如下"></a><font size=4><strong>填完效果如下</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/13.jpg"></p><h3 id="代理跳过-不设置"><a href="#代理跳过-不设置" class="headerlink" title="代理跳过,不设置"></a><font size=4><strong>代理跳过,不设置</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/14.jpg"></p><h3 id="修改为阿里云apt源"><a href="#修改为阿里云apt源" class="headerlink" title="修改为阿里云apt源"></a><font size=4><strong>修改为阿里云apt源</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/15.jpg"></p><h3 id="选择安装磁盘"><a href="#选择安装磁盘" class="headerlink" title="选择安装磁盘"></a><font size=4><strong>选择安装磁盘</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/16.jpg"></p><h3 id="直接回车"><a href="#直接回车" class="headerlink" title="直接回车"></a><font size=4><strong>直接回车</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/17.jpg"></p><h3 id="分好的区"><a href="#分好的区" class="headerlink" title="分好的区"></a><font size=4><strong>分好的区</strong></font></h3><p>&emsp;&emsp;20G磁盘没有必要自定义分区,<strong>服务器安装请勿参考此分区.</strong><br><img src="/medias/drawing-bed/ubuntu/18.jpg"></p><h3 id="选择格式化"><a href="#选择格式化" class="headerlink" title="选择格式化"></a><font size=4><strong>选择格式化</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/19.jpg"></p><h3 id="填入姓名-主机名-密码"><a href="#填入姓名-主机名-密码" class="headerlink" title="填入姓名,主机名,密码"></a><font size=4><strong>填入姓名,主机名,密码</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/20.jpg"></p><h3 id="选择安装OpenSSH"><a href="#选择安装OpenSSH" class="headerlink" title="选择安装OpenSSH"></a><font size=4><strong>选择安装OpenSSH</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/21.jpg"></p><h3 id="跳过-直接Done"><a href="#跳过-直接Done" class="headerlink" title="跳过,直接Done"></a><font size=4><strong>跳过,直接Done</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/22.jpg"></p><h3 id="等待安装-View-full-log可以查看安装日志"><a href="#等待安装-View-full-log可以查看安装日志" class="headerlink" title="等待安装,View full log可以查看安装日志"></a><font size=4><strong>等待安装,View full log可以查看安装日志</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/23.jpg"></p><h3 id="重启-完成安装"><a href="#重启-完成安装" class="headerlink" title="重启,完成安装"></a><font size=4><strong>重启,完成安装</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/24.jpg"></p><h3 id="用户名-密码登录"><a href="#用户名-密码登录" class="headerlink" title="用户名,密码登录"></a><font size=4><strong>用户名,密码登录</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/25.jpg"></p><h3 id="会打印启动日志-覆盖掉登录窗口-直接回车显示登录信息"><a href="#会打印启动日志-覆盖掉登录窗口-直接回车显示登录信息" class="headerlink" title="会打印启动日志,覆盖掉登录窗口,直接回车显示登录信息"></a><font size=4><strong>会打印启动日志,覆盖掉登录窗口,直接回车显示登录信息</strong></font></h3><p><img src="/medias/drawing-bed/ubuntu/26.jpg"></p><h2 id="开机设置-root密码-SSH远程登录"><a href="#开机设置-root密码-SSH远程登录" class="headerlink" title="开机设置,root密码,SSH远程登录"></a><font size=5><strong>开机设置,root密码,SSH远程登录</strong></font></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置root密码</span>wang@wujiops:~$ <span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> wang:    <span class="token comment"># 当前用户密码</span>Enter new UNIX password:    <span class="token comment"># 新root密码</span>Retype new UNIX password:    <span class="token comment"># 再次输入</span>passwd: password updated successfullywang@wujiops:~$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/ssh/sshd_config<span class="token comment"># 揭开注释 &amp; 修改以下两行内容</span>Port <span class="token number">22</span>PermitRootLogin <span class="token function">yes</span>wang@wujiops:~$ <span class="token function">sudo</span> <span class="token function">service</span> sshd restart   <span class="token comment"># 重启sshd服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;打开xshell尝试链接吧!</p><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 安装</title>
      <link href="/posts/76c1.html"/>
      <url>/posts/76c1.html</url>
      
        <content type="html"><![CDATA[<!-- 文章头部设置 --><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a><font size=6><strong>约定</strong></font></h1><p>&emsp;&emsp;VMware 版本 15.5.1 <a href="https://my.vmware.com/cn/web/vmware/details?downloadGroup=WKST-1551-WIN&productId=799&rPId=39513" title="VMware版本15.5.1 build-15018445">build-15018445</a><br>&emsp;&emsp;CentOS7 版本 <a href="https://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso" title="CentOS-7-x86_64-Minimal-1908.iso">CentOS-7-x86_64-Minimal-1908</a>  </p><h2 id="centos7系统安装"><a href="#centos7系统安装" class="headerlink" title="centos7系统安装"></a><font size=5><strong>centos7系统安装</strong></font></h2><p>&emsp;&emsp;采用VMware安装, 系统为Minimal版, 前面的大部分省略, 网路上的教程够多了。</p><iframe height="600" width="800" src="//player.bilibili.com/player.html?aid=78039743&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="1-先设置安装位置、网络和主机名"><a href="#1-先设置安装位置、网络和主机名" class="headerlink" title="1.先设置安装位置、网络和主机名"></a><font size=4><strong>1.先设置安装位置、网络和主机名</strong></font></h3><p><img src="/medias/drawing-bed/centos7/0.jpg"></p><ul><li>点击网络和主机名设置<br>&emsp;&emsp;记住这些信息, 一会要用到<br><img src="/medias/drawing-bed/centos7/1.jpg"></li><li>填入刚才的信息<br><img src="/medias/drawing-bed/centos7/2.jpg"></li><li>修改主机名、观察变化保存<br><img src="/medias/drawing-bed/centos7/3.jpg"></li><li>设置安装位置<br><img src="/medias/drawing-bed/centos7/4.jpg"></li><li>自动创建<br><img src="/medias/drawing-bed/centos7/5.jpg"></li><li>生成下图<br><img src="/medias/drawing-bed/centos7/6.jpg"><h3 id="2-网络和时间设置"><a href="#2-网络和时间设置" class="headerlink" title="2.网络和时间设置"></a><font size=4><strong>2.网络和时间设置</strong></font></h3></li><li>设置自动同步<br>&emsp;&emsp;有绿色的<font color=#008000>✔</font>就行, 保存退出<br><img src="/medias/drawing-bed/centos7/7.jpg"></li><li>选择安装, 这时候设置密码<br><img src="/medias/drawing-bed/centos7/8.jpg"></li><li>如果密码过于简单就要双击保存<br><img src="/medias/drawing-bed/centos7/9.jpg"></li></ul><p>如果您有 补充 &amp; 更正 的意见和建议请留言评论，谢谢~</p>]]></content>
      
      
      <categories>
          
          <category> system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
